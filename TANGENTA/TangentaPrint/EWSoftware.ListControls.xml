<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EWSoftware.ListControls</name>
    </assembly>
    <members>
        <member name="T:EWSoftware.ListControls.ChangePolicyEventArgs">
            <summary>
            This is used for the <see cref="E:EWSoftware.ListControls.DataList.ChangePolicyModified"> DataList.ChangePolicyModified</see> and
            <see cref="E:EWSoftware.ListControls.DataNavigator.ChangePolicyModified"> DataNavigator.ChangePolicyModified</see> events.
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.ChangePolicyEventArgs.AllowAdditions">
            <summary>
            This is used to determine whether or not additions are allowed to be made to the data source
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.ChangePolicyEventArgs.AllowEdits">
            <summary>
            This is used to determine whether or not edits are allowed to be made to the data source
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.ChangePolicyEventArgs.AllowDeletes">
            <summary>
            This is used to determine whether or not deletes are allowed to be made to the data source
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.ChangePolicyEventArgs.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="canAdd">Whether or not additions are allowed</param>
            <param name="canEdit">Whether or not edits are allowed</param>
            <param name="canDelete">Whether or not deletions are allowed</param>
        </member>
        <member name="T:EWSoftware.ListControls.DataListCancelEventArgs">
            <summary>
            This is used for various cancelable data list events (adding, deleting, etc.)
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataListCancelEventArgs.Cancel">
            <summary>
            Get or set whether or not the event is canceled
            </summary>
            <remarks>Set this to true to cancel the event</remarks>
        </member>
        <member name="M:EWSoftware.ListControls.DataListCancelEventArgs.#ctor(System.Int32,EWSoftware.ListControls.TemplateControl)">
            <summary>
            Constructor
            </summary>
            <param name="idx">The row index of the template item</param>
            <param name="templateItem">The item related to the event</param>
        </member>
        <member name="T:EWSoftware.ListControls.DataListEventArgs">
            <summary>
            This is used for various data list events (item bound, added, deleted, current, etc.).
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataListEventArgs.Index">
            <summary>
            Get the index of the row affected
            </summary>
            <remarks>This may be -1 if the item does not yet exist or if the item has been deleted.  Also be
            aware that this index value is for use with the control.  Due to additions and deletions, the given
            index may not refer to the same row indexed in the original data source.</remarks>
        </member>
        <member name="P:EWSoftware.ListControls.DataListEventArgs.Item">
            <summary>
            Get a reference to the item related to the event
            </summary>
            <remarks>This may be null if the item does not yet exist or if it has been deleted</remarks>
        </member>
        <member name="M:EWSoftware.ListControls.DataListEventArgs.#ctor(System.Int32,EWSoftware.ListControls.TemplateControl)">
            <summary>
            Constructor
            </summary>
            <param name="idx">The row index of the template item</param>
            <param name="templateItem">The item related to the event</param>
        </member>
        <member name="T:EWSoftware.ListControls.DataListHitType">
            <summary>
            This enumerated type defines the hit test locations for the data list
            </summary>
        </member>
        <member name="F:EWSoftware.ListControls.DataListHitType.None">
            <summary>
            The location is undefined.
            </summary>
        </member>
        <member name="F:EWSoftware.ListControls.DataListHitType.Header">
            <summary>
            The location is in the data list's header.
            </summary>
        </member>
        <member name="F:EWSoftware.ListControls.DataListHitType.Footer">
            <summary>
            The location is in the data list's footer.
            </summary>
        </member>
        <member name="F:EWSoftware.ListControls.DataListHitType.Navigation">
            <summary>
            The location is in the data list's navigation control area.
            </summary>
        </member>
        <member name="F:EWSoftware.ListControls.DataListHitType.RowHeader">
            <summary>
            The location is in a row header.
            </summary>
        </member>
        <member name="F:EWSoftware.ListControls.DataListHitType.Row">
            <summary>
            The location is in a row template.
            </summary>
        </member>
        <member name="F:EWSoftware.ListControls.DataListHitType.RowOrHeader">
            <summary>
            The location is in a row template or a row header
            </summary>
        </member>
        <member name="T:EWSoftware.ListControls.DataNavigatorCancelEventArgs">
            <summary>
            This is used for various cancelable data navigator  events (adding, deleting, etc.)
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataNavigatorCancelEventArgs.Cancel">
            <summary>
            Get or set whether or not the event is canceled
            </summary>
            <remarks>Set this to true to cancel the event</remarks>
        </member>
        <member name="M:EWSoftware.ListControls.DataNavigatorCancelEventArgs.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="idx">The row index of the item</param>
        </member>
        <member name="T:EWSoftware.ListControls.DataNavigatorEventArgs">
            <summary>
            This is used for various data navigator events (added, deleted, current, etc.)
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataNavigatorEventArgs.Index">
            <summary>
            Get the index of the row affected
            </summary>
            <remarks>This may be -1 if the item does not yet exist or if the item has been deleted.  Also be
            aware that this index value is for use with the control.  Due to additions and deletions, the given
            index may not refer to the same row indexed in the original data source.</remarks>
        </member>
        <member name="M:EWSoftware.ListControls.DataNavigatorEventArgs.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="idx">The row index of the item</param>
        </member>
        <member name="T:EWSoftware.ListControls.DragMode">
            <summary>
            This enumerated type defines the drag mode for the data list
            </summary>
        </member>
        <member name="F:EWSoftware.ListControls.DragMode.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:EWSoftware.ListControls.DragMode.Select">
            <summary>
            Select rows.
            </summary>
        </member>
        <member name="F:EWSoftware.ListControls.DragMode.DragAndDrop">
            <summary>
            Begin drag and drop.
            </summary>
        </member>
        <member name="T:EWSoftware.ListControls.ItemCheckStateEventArgs">
            <summary>
            This is used to provide information about a <see cref="T:EWSoftware.ListControls.CheckBoxList"/> item that had a change in its
            check state.
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.ItemCheckStateEventArgs.Index">
            <summary>
            Get the index of the item affected
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.ItemCheckStateEventArgs.CheckState">
            <summary>
            Get the check state of the item
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.ItemCheckStateEventArgs.#ctor(System.Int32,System.Windows.Forms.CheckState)">
            <summary>
            Constructor
            </summary>
            <param name="idx">The index of the item</param>
            <param name="checkState">The check state of the item</param>
        </member>
        <member name="T:EWSoftware.ListControls.LayoutMethod">
            <summary>
            This enumerated type defines the layout method for the <see cref="T:EWSoftware.ListControls.BaseButtonList"/> control and its
            derived classes.
            </summary>
            <remarks>In all cases, the <c>BaseButtonList</c> derived classes will display scrollbars as needed if all
            items will not fit within their bounds.
            </remarks>
        </member>
        <member name="F:EWSoftware.ListControls.LayoutMethod.SingleColumn">
            <summary>
            A single column of buttons.  This is the default.
            </summary>
        </member>
        <member name="F:EWSoftware.ListControls.LayoutMethod.SingleRow">
            <summary>
            A single row of buttons.
            </summary>
        </member>
        <member name="F:EWSoftware.ListControls.LayoutMethod.DownThenAcross">
            <summary>
            A multi-column list.  There will be as many rows as will fit vertically and extra columns are added
            to handle any overflow.
            </summary>
        </member>
        <member name="F:EWSoftware.ListControls.LayoutMethod.AcrossThenDown">
            <summary>
            A multi-column list.  There will be as many columns as will fit horizontally and extra rows are added
            to handle any overflow.
            </summary>
        </member>
        <member name="T:EWSoftware.ListControls.ListSortOrder">
            <summary>
            This enumerated type defines the sort order option for list controls
            </summary>
        </member>
        <member name="F:EWSoftware.ListControls.ListSortOrder.None">
            <summary>
            None.  This is the default and is the only value allowed if the list control has a data source
            assigned to it.
            </summary>
        </member>
        <member name="F:EWSoftware.ListControls.ListSortOrder.Ascending">
            <summary>
            Sort in ascending order.
            </summary>
        </member>
        <member name="F:EWSoftware.ListControls.ListSortOrder.Descending">
            <summary>
            Sort in descending order.
            </summary>
        </member>
        <member name="T:EWSoftware.ListControls.NodeParts">
            <summary>
            This public enumerated type defines the various node parts that are to be drawn for the
            <see cref="T:EWSoftware.ListControls.ExtendedTreeView"/> control.
            </summary>
        </member>
        <member name="F:EWSoftware.ListControls.NodeParts.None">
            <summary>
            Nothing is to be drawn
            </summary>
        </member>
        <member name="F:EWSoftware.ListControls.NodeParts.Background">
            <summary>
            Erase the node's background
            </summary>
        </member>
        <member name="F:EWSoftware.ListControls.NodeParts.Lines">
            <summary>
            Draw connecting node lines
            </summary>
        </member>
        <member name="F:EWSoftware.ListControls.NodeParts.Expando">
            <summary>
            Draw the expando (+/-) image
            </summary>
        </member>
        <member name="F:EWSoftware.ListControls.NodeParts.StateImage">
            <summary>
            Draw the checkbox/state image
            </summary>
        </member>
        <member name="F:EWSoftware.ListControls.NodeParts.NodeImage">
            <summary>
            Draw the item image
            </summary>
        </member>
        <member name="F:EWSoftware.ListControls.NodeParts.Text">
            <summary>
            Draw the text
            </summary>
        </member>
        <member name="T:EWSoftware.ListControls.AutoCompleteComboBox">
            <summary>
            This is a standard combo box control that supplies an auto-complete feature that selects the best match
            as the user types text into it.  Auto-completion works for all combo box styles.
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.AutoCompleteComboBox.Item(System.String)">
            <summary>
            This can be used to get the value of the specified column in the currently selected item
            </summary>
            <param name="columnName">The column name of the item to get.  This can be any column in the data
            source, not just those displayed by the control.</param>
            <value>Returns the entry at the specified column in the currently selected item.  If
            <see cref="P:System.Windows.Forms.ComboBox.SelectedIndex"/> equals -1 (no selection) or the column cannot be found, this
            returns null.</value>
            <overloads>There are two overloads for this property</overloads>
        </member>
        <member name="P:EWSoftware.ListControls.AutoCompleteComboBox.Item(System.Int32,System.String)">
            <summary>
            This can be used to get the value of the specified column in the specified row of the list control's
            data source.
            </summary>
            <param name="rowIndex">The row index of the item.</param>
            <param name="columnName">The column name of the item to get.  This can be any column in the data
            source, not just those displayed by the control.</param>
            <value>Returns the entry at the specified column in the specified row.  If the row is out of bounds
            or if the column cannot be found, this will return null.</value>
        </member>
        <member name="M:EWSoftware.ListControls.AutoCompleteComboBox.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.AutoCompleteComboBox.OnDropDownStyleChanged(System.EventArgs)">
            <summary>
            This is overridden to clear any existing auto-completion tracking text when the style changes
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.AutoCompleteComboBox.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            This is overridden to handle certain keys differently for the auto-completion combo box
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.AutoCompleteComboBox.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            This is overridden to allow auto-completion to occur
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.AutoCompleteComboBox.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            This is overridden to add characters to the auto-complete tracking string in <c>DropDownList</c> mode
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.AutoCompleteComboBox.OnEnter(System.EventArgs)">
            <summary>
            This is overridden to clear the auto-complete text when the control gains the focus
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.AutoCompleteComboBox.OnLeave(System.EventArgs)">
            <summary>
            This is overridden to ensure that the selected item is chosen if the control is left while the
            drop-down is shown.
            </summary>
            <param name="e">The event arguments</param>
            <remarks>There is an odd problem that happens every so often where if the drop-down is displayed,
            you type letters to use auto-completion to select an entry, and then tab out, it doesn't save the
            selected item.  If this event is fired while the drop-down is shown, it saves the item selected,
            hides the drop-down, and restores the chosen item.</remarks>
        </member>
        <member name="M:EWSoftware.ListControls.AutoCompleteComboBox.AutoComplete">
            <summary>
            This handles auto-completion when the user types text
            </summary>
        </member>
        <member name="T:EWSoftware.ListControls.BaseButtonList">
            <summary>
            This is an abstract base button list control that supports data binding, layout options, and data source
            indexers and serves as the base class for the <see cref="T:EWSoftware.ListControls.RadioButtonList"/> and <see cref="T:EWSoftware.ListControls.CheckBoxList"/>
            controls.
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.BaseButtonList.AutoSize">
            <summary>
            This is overridden to pass the value to the contained button panel
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.BaseButtonList.AutoSizeMode">
            <summary>
            This is used to pass the value to the contained button panel
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.BaseButtonList.ButtonPanel">
            <summary>
            This returns a reference to the panel control that contains the button controls
            </summary>
            <remarks>This can be used to customize the appearance of the individual button controls.  This is
            usually accomplished by handling the <see cref="E:EWSoftware.ListControls.BaseListControl.SubControlsRefreshed"/> event.</remarks>
        </member>
        <member name="P:EWSoftware.ListControls.BaseButtonList.BorderStyle">
            <summary>
            This property is used to set or get the border style
            </summary>
            <remarks>The default is to use an etched border</remarks>
        </member>
        <member name="P:EWSoftware.ListControls.BaseButtonList.FlatStyle">
            <summary>
            This is used to set or get the flat drawing style to use for the control
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.BaseButtonList.BackColor">
            <summary>
            In order to draw a partial transparency above the border when <see cref="P:EWSoftware.ListControls.BaseButtonList.TitleText"/> is specified,
            this property is replaced by the <see cref="P:EWSoftware.ListControls.BaseButtonList.ListBackColor"/> property.  Use it to set the background
            color instead.
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.BaseButtonList.ListBackColor">
            <summary>
            This property is used to set or get the background color
            </summary>
            In order to draw a partial transparency above the border when <see cref="P:EWSoftware.ListControls.BaseButtonList.TitleText"/> is specified,
            this property is used to take the place of the <see cref="P:EWSoftware.ListControls.BaseButtonList.BackColor"/> property.
        </member>
        <member name="P:EWSoftware.ListControls.BaseButtonList.Appearance">
            <summary>
            This is used to set or get the button appearance
            </summary>
            <value>The default is to show them as normal radio buttons or checkbox buttons</value>
        </member>
        <member name="P:EWSoftware.ListControls.BaseButtonList.ImageList">
            <summary>
            This is used to set or get the image list for the buttons
            </summary>
            <value>If set, the buttons are assigned an image index equal to their position in the data source.
            The index will wrap around if there are more items than there are images thus repeating images for
            those items that are outside the range of the image list.</value>
        </member>
        <member name="P:EWSoftware.ListControls.BaseButtonList.ImageAlign">
            <summary>
            This is used to set or get the alignment on the button images
            </summary>
            <value>The default alignment is <c>MiddleLeft</c>.  Note that right-aligned images with right-aligned
            text will not work as the text will always overlap the image.  Centered text with right-aligned
            images will work but there may be some overlap on the longest item.</value>
        </member>
        <member name="P:EWSoftware.ListControls.BaseButtonList.CheckAlign">
            <summary>
            This is used to set or get the alignment on the button checkmark
            </summary>
            <value>The default alignment is <c>MiddleLeft</c></value>
        </member>
        <member name="P:EWSoftware.ListControls.BaseButtonList.TextAlign">
            <summary>
            This is used to set or get the alignment on the button text
            </summary>
            <value>The default alignment is <c>MiddleLeft</c>.  Note that right-aligned images with right-aligned
            text will not work as the text will always overlap the image.  Centered text with right-aligned
            images will work but there may be some overlap on the longest item.</value>
        </member>
        <member name="P:EWSoftware.ListControls.BaseButtonList.UseMnemonic">
            <summary>
            This property is used to set or get whether or not mnemonics are used in the display text
            </summary>
            <remarks>If true (the default), the first character preceded by an ampersand (&amp;) character in the
            display text will be used as the button's mnemonic key.</remarks>
        </member>
        <member name="P:EWSoftware.ListControls.BaseButtonList.LayoutMethod">
            <summary>
            This is used to set or get the layout method for the buttons
            </summary>
            <value>The default alignment is <c>SingleColumn</c></value>
            <seealso cref="P:EWSoftware.ListControls.BaseButtonList.ListPadding"/>
            <seealso cref="P:EWSoftware.ListControls.BaseButtonList.SizeAllToWidest"/>
        </member>
        <member name="P:EWSoftware.ListControls.BaseButtonList.SizeAllToWidest">
            <summary>
            This is used to set or get whether or not all columns in the button list are sized to the widest
            item.
            </summary>
            <value>This option affects all <see cref="P:EWSoftware.ListControls.BaseButtonList.LayoutMethod"/> options except <c>SingleColumn</c>.  When
            set to false (the default) each column is sized to the widest item in that column.  In
            <c>SingleColumn</c> mode, this is the normal behavior.  When set to true, all columns are sized to
            the widest entry in the list thus making all columns the same width.</value>
            <seealso cref="P:EWSoftware.ListControls.BaseButtonList.LayoutMethod"/>
            <seealso cref="P:EWSoftware.ListControls.BaseButtonList.ListPadding"/>
        </member>
        <member name="P:EWSoftware.ListControls.BaseButtonList.ListPadding">
            <summary>
            Get or set the padding values (in pixels) for the space around the button list and between its
            columns and rows.
            </summary>
            <value><para>The <c>Top</c> and <c>Left</c> values are always applied to the left most column and top
            row.  The <c>Bottom</c> value is used when <see cref="P:EWSoftware.ListControls.BaseButtonList.LayoutMethod"/> is set to <c>DownThenAcross</c>
            to determine how close an item can come to the bottom border before forcing a new column.  The
            <c>Right</c> value is used when <see cref="P:EWSoftware.ListControls.BaseButtonList.LayoutMethod"/> is set to <c>AcrossThenDown</c> to
            determine how close an item can come to the right border before forcing a new row.  The <c>Column</c>
            and <c>Row</c> values are used for the spacing between columns and rows.</para>
            
            <para>The defaults are four pixels for the top and bottom, eight pixels for the left and right
            borders, four pixels between columns and no extra space between rows.</para></value>
            <seealso cref="P:EWSoftware.ListControls.BaseButtonList.LayoutMethod"/>
            <seealso cref="P:EWSoftware.ListControls.BaseButtonList.SizeAllToWidest"/>
        </member>
        <member name="P:EWSoftware.ListControls.BaseButtonList.Padding">
            <summary>
            The stock padding property is not supported.  Use <see cref="P:EWSoftware.ListControls.BaseButtonList.ListPadding"/> instead.
            </summary>
            <exclude/>
        </member>
        <member name="P:EWSoftware.ListControls.BaseButtonList.TitleText">
            <summary>
            This is used to specify the title displayed on the top border
            </summary>
            <value>If set to null or an empty string (the default), no title is displayed</value>
        </member>
        <member name="P:EWSoftware.ListControls.BaseButtonList.TitleBorderColor">
            <summary>
            This property is used to set or get the color of the title's border
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.BaseButtonList.TitleBackColor">
            <summary>
            This property is used to set or get the title's background color
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.BaseButtonList.TitleForeColor">
            <summary>
            This property is used to set or get the title's foreground color
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.BaseButtonList.TitleFont">
            <summary>
            This property is used to set or get the title's font
            </summary>
        </member>
        <member name="E:EWSoftware.ListControls.BaseButtonList.ListBackColorChanged">
            <summary>
            This event is raised when the <see cref="P:EWSoftware.ListControls.BaseButtonList.ListBackColor"/> changes
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.BaseButtonList.OnListBackColorChanged(System.EventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.BaseButtonList.ListBackColorChanged"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="E:EWSoftware.ListControls.BaseButtonList.BorderStyleChanged">
            <summary>
            This event is raised when the <see cref="P:EWSoftware.ListControls.BaseButtonList.BorderStyle"/> changes
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.BaseButtonList.OnBorderStyleChanged(System.EventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.BaseButtonList.BorderStyleChanged"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="E:EWSoftware.ListControls.BaseButtonList.TitleTextChanged">
            <summary>
            This event is raised when the <see cref="P:EWSoftware.ListControls.BaseButtonList.TitleText"/> changes
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.BaseButtonList.OnTitleTextChanged(System.EventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.BaseButtonList.TitleTextChanged"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="E:EWSoftware.ListControls.BaseButtonList.TitleBorderColorChanged">
            <summary>
            This event is raised when the <see cref="P:EWSoftware.ListControls.BaseButtonList.TitleBorderColor"/> changes
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.BaseButtonList.OnTitleBorderColorChanged(System.EventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.BaseButtonList.TitleBorderColorChanged"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="E:EWSoftware.ListControls.BaseButtonList.TitleBackColorChanged">
            <summary>
            This event is raised when the <see cref="P:EWSoftware.ListControls.BaseButtonList.TitleBackColor"/> changes
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.BaseButtonList.OnTitleBackColorChanged(System.EventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.BaseButtonList.TitleBackColorChanged"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="E:EWSoftware.ListControls.BaseButtonList.TitleForeColorChanged">
            <summary>
            This event is raised when the <see cref="P:EWSoftware.ListControls.BaseButtonList.TitleForeColor"/> changes
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.BaseButtonList.OnTitleForeColorChanged(System.EventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.BaseButtonList.TitleForeColorChanged"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="E:EWSoftware.ListControls.BaseButtonList.TitleFontChanged">
            <summary>
            This event is raised when the <see cref="P:EWSoftware.ListControls.BaseButtonList.TitleFont"/> changes
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.BaseButtonList.OnTitleFontChanged(System.EventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.BaseButtonList.TitleFontChanged"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.BaseButtonList.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks>By default, the button list will display all items in the data source in a single column,
            item parts are left aligned and the control will have an etched border.  A default selection (item
            zero) is enforced.</remarks>
        </member>
        <member name="M:EWSoftware.ListControls.BaseButtonList.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify the contents of this method with the code
            editor.
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.BaseButtonList.ShouldSerializeListPadding">
            <summary>
            Determine whether or not to serialize the padding values
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.BaseButtonList.ResetListPadding">
            <summary>
            Reset the padding values
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.BaseButtonList.pnlButtons_MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            This is handled to focus a button when the mouse is clicked in an area outside of one of the buttons
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.BaseButtonList.ImageList_RecreateHandle(System.Object,System.EventArgs)">
            <summary>
            This is called when the associated image list handle is recreated
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.BaseButtonList.ImageList_Disposed(System.Object,System.EventArgs)">
            <summary>
            This is called when the associated image list is destroyed
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.BaseButtonList.LayoutSingleColumn(System.Int32,System.Int32)">
            <summary>
            This is used to lay out the buttons in a single column
            </summary>
            <param name="itemHeight">The height of a button item</param>
            <param name="commonWidth">All items are sized to the same width</param>
        </member>
        <member name="M:EWSoftware.ListControls.BaseButtonList.LayoutSingleRow(System.Int32,System.Int32,System.Int32)">
            <summary>
            This is used to lay out the buttons in a single row
            </summary>
            <param name="itemHeight">The height of a button item.</param>
            <param name="extraWidth">The extra width to apply to each button to account for the checkmark and
            image.</param>
            <param name="commonWidth">If not -1, all items are sized to the same width.  If -1, items are sized
            based on their settings.</param>
        </member>
        <member name="M:EWSoftware.ListControls.BaseButtonList.LayoutDownThenAcross(System.Int32,System.Int32,System.Int32)">
            <summary>
            This is used to lay out the buttons down and then across the client area
            </summary>
            <param name="itemHeight">The height of a button item.</param>
            <param name="extraWidth">The extra width to apply to each button to account for the checkmark and
            image.</param>
            <param name="commonWidth">If not -1, all columns are sized to the same width.  If -1, columns are
            sized to the widest item in that column.</param>
        </member>
        <member name="M:EWSoftware.ListControls.BaseButtonList.LayoutAcrossThenDown(System.Int32,System.Int32,System.Int32)">
            <summary>
            This is used to lay out the buttons across and then down the client area
            </summary>
            <param name="itemHeight">The height of a button item.</param>
            <param name="extraWidth">The extra width to apply to each button to account for the checkmark and
            image.</param>
            <param name="commonWidth">If not -1, all columns are sized to the same width.  If -1, columns are
            sized to the widest item in that column.</param>
        </member>
        <member name="M:EWSoftware.ListControls.BaseButtonList.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources, false to just release
            unmanaged resources.</param>
        </member>
        <member name="M:EWSoftware.ListControls.BaseButtonList.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            This is overridden to adjust the background area painted by the base class when the title text is
            used.
            </summary>
            <param name="pevent">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.BaseButtonList.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            This is overridden to draw the border and title text
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.BaseButtonList.OnLayout(System.Windows.Forms.LayoutEventArgs)">
            <summary>
            This is overridden to handle laying out the control elements
            </summary>
            <param name="levent">The event parameters</param>
        </member>
        <member name="M:EWSoftware.ListControls.BaseButtonList.OnEnter(System.EventArgs)">
            <summary>
            This is overridden to invalidate the control when it gains focus
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.BaseButtonList.OnLeave(System.EventArgs)">
            <summary>
            This is overridden to invalidate the control when it loses focus
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.BaseButtonList.OnFontChanged(System.EventArgs)">
            <summary>
            This is overridden to adjust the layout when the font changes
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="T:EWSoftware.ListControls.BaseComboBox">
            <summary>
            This is an abstract base class for use in creating the <see cref="T:EWSoftware.ListControls.MultiColumnComboBox"/> and
            <see cref="T:EWSoftware.ListControls.UserControlComboBox"/> controls.
            </summary>
        </member>
        <member name="T:EWSoftware.ListControls.BaseComboBox.ComboTextBox">
            <summary>
            This is a custom text box class that is hosted within the user control to act as the text box portion
            of the combo box.
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.BaseComboBox.ComboTextBox.#ctor(EWSoftware.ListControls.BaseComboBox)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.BaseComboBox.ComboTextBox.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            This is overridden to handle certain keys differently for the combo box
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.BaseComboBox.ComboTextBox.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            This is overridden to allow auto-completion to occur
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.BaseComboBox.AllowAutoCompletion">
            <summary>
            This is used to set or get whether auto-completion is enabled
            </summary>
            <remarks>The default is true.  As the user types in the textbox portion of the control, the best
            match is selected from the data source as the selected item.</remarks>
        </member>
        <member name="P:EWSoftware.ListControls.BaseComboBox.BackColor">
            <summary>
            This is used to set or get the background color of the text portion of the combo box control
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.BaseComboBox.ForeColor">
            <summary>
            This is used to set or get the foreground color of the text portion of the combo box control
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.BaseComboBox.Text">
            <summary>
            This is used to set or get the text in the textbox portion of the combo box control
            </summary>
            <remarks>When set to null, the <see cref="P:EWSoftware.ListControls.BaseComboBox.SelectedIndex"/> is set to -1.  If not null, an attempt is
            made to set the selected index to the item matching the specified text.  If no match is found, the
            selected index is set to -1.</remarks>
        </member>
        <member name="P:EWSoftware.ListControls.BaseComboBox.DrawImage">
            <summary>
            Gets or sets whether or not the combo box has an image drawn to the left of the text value
            </summary>
            <value>If true, the combo box raises the <see cref="E:EWSoftware.ListControls.BaseComboBox.DrawItemImage"/> event so that an image can be
            drawn to the left of the text box.</value>
        </member>
        <member name="P:EWSoftware.ListControls.BaseComboBox.DropDownStyle">
            <summary>
            Gets or sets a value specifying the style of the combo box
            </summary>
            <value>The default is the <c>DropDown</c> style with an editable textbox area and a drop down list</value>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">This is thrown if the value is not one of the valid
            combo box styles</exception>
        </member>
        <member name="P:EWSoftware.ListControls.BaseComboBox.DropDownBackColor">
            <summary>
            This is used to set or get the background color of the drop-down portion of the combo box control
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.BaseComboBox.DropDownFont">
            <summary>
            This property is used to set or get the drop-down's font
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.BaseComboBox.DroppedDown">
            <summary>
            Gets or sets a value indicating whether the combo box is displaying its drop-down portion
            </summary>
            <value>Returns true if the drop-down is currently displayed or false if not.  If set to true, the
            drop down portion is displayed if not already visible and the <see cref="E:EWSoftware.ListControls.BaseComboBox.DropDown"/> event is raised.
            If set to false, the drop down is hidden if it is currently visible and the <see cref="E:EWSoftware.ListControls.BaseComboBox.CloseUp"/>
            event is raised.  After closing, the <see cref="E:EWSoftware.ListControls.BaseComboBox.SelectionChangeCommitted"/> or
            <see cref="E:EWSoftware.ListControls.BaseComboBox.SelectionChangeCanceled" /> event is raised depending on whether or not the selected index
            changed while the drop-down was visible.  When using the <c>Simple</c> drop-down style, this always
            returns true and it cannot be set to false.</value>
        </member>
        <member name="P:EWSoftware.ListControls.BaseComboBox.MaxDropDownItems">
            <summary>
            Gets or sets the maximum number of items to be shown in the drop-down portion of the combo box when
            first displayed.  It also controls how many items are skipped when paging up and down.
            </summary>
            <value>The value must be between 1 and 100.  The value is only used the first time the drop-down
            portion is shown.  The drop-down is resizable and it will remember the last used size until it is
            disposed.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">This is thrown if the value is not between 1 and 100</exception>
        </member>
        <member name="P:EWSoftware.ListControls.BaseComboBox.MaxLength">
            <summary>
            Gets or sets the maximum number of characters allowed in the editable portion of a combo box
            </summary>
            <value>The default is 32,767 characters.  Values less than zero are reset to zero.</value>
        </member>
        <member name="P:EWSoftware.ListControls.BaseComboBox.EnforceDefaultSelection">
            <summary>
            This property is used to set or get the default selection behavior
            </summary>
            <value>In <c>DropDownList</c> mode, if this property is true (the default), a <see cref="P:EWSoftware.ListControls.BaseComboBox.SelectedIndex"/>
            of -1 (no selection) is not allowed.  Instead, the index specified by the <see cref="P:EWSoftware.ListControls.BaseComboBox.DefaultSelection"/>
            property is used instead.  For the <c>DropDown</c> and <c>Simple</c> modes, this property is ignored
            as values can be entered that are not in the list of valid items.</value>
        </member>
        <member name="P:EWSoftware.ListControls.BaseComboBox.DefaultSelection">
            <summary>
            This property is used to set or get the default selection's index
            </summary>
            <value>In <c>DropDownList</c> mode, if <see cref="P:EWSoftware.ListControls.BaseComboBox.EnforceDefaultSelection"/> is true, a
            <see cref="P:EWSoftware.ListControls.BaseComboBox.SelectedIndex"/> of -1 (no selection) is not allowed.  Instead, the index specified by
            this property is used instead.  For the <c>DropDown</c> and <c>Simple</c> modes, this property is
            ignored as values can be entered that are not in the list of valid items.</value>
        </member>
        <member name="P:EWSoftware.ListControls.BaseComboBox.SelectedIndex">
            <summary>
            Gets or sets the index specifying the currently selected item
            </summary>
            <value><para>This is a zero-based index into the items collection.  A value of -1 indicates that
            there is no current selection.</para>
            
            <para>Setting a new index value will raise the <see cref="E:System.Windows.Forms.Control.TextChanged"/>,
            <see cref="E:EWSoftware.ListControls.BaseListControl.SelectedItemChanged"/>, and
            <see cref="E:EWSoftware.ListControls.BaseListControl.SelectedIndexChanged"/> events in that order.</para>
            
            <para>In <c>DropDownList</c> mode, if <see cref="P:EWSoftware.ListControls.BaseListControl.EnforceDefaultSelection"/> is
            true, a <see cref="P:EWSoftware.ListControls.BaseComboBox.SelectedIndex"/> of -1 (no selection) is not allowed.  Instead, the index
            specified by the <see cref="P:EWSoftware.ListControls.BaseListControl.DefaultSelection"/> property is used instead.  If the
            default value is outside the range of the data source, the last item is selected.  For the
            <c>DropDown</c> and <c>Simple</c> modes, the <c>EnforceDefaultSelection</c> property is ignored as
            values can be entered that are not in the list of valid items.</para></value>
            <seealso cref="E:EWSoftware.ListControls.BaseListControl.SelectedIndexChanged"/>
            <exception cref="T:System.ArgumentOutOfRangeException">This is thrown if the index is less than -1 or greater
            than the number of items in the collection.</exception>
        </member>
        <member name="P:EWSoftware.ListControls.BaseComboBox.SelectedText">
            <summary>
            Gets or sets the text that is selected in the editable portion of a combo box
            </summary>
            <value><para>If the <see cref="P:EWSoftware.ListControls.BaseComboBox.DropDownStyle"/> is set to <c>DropDownList</c> this always returns the
            full text of the selected item.  Attempts to set the selected text in that mode are ignored.</para>
            
            <para>If there is no selected text, this property returns a zero-length string.</para></value>
        </member>
        <member name="P:EWSoftware.ListControls.BaseComboBox.SelectionLength">
            <summary>
            Gets or sets the number of characters selected in the editable portion of the combo box
            </summary>
            <value>You can use this property to determine whether any characters are currently selected in the
            combo box control before performing operations on the selected text. When the value of the property
            is set to a value that is larger than the number of characters within the text of the control, the
            value of the property is set to the entire length of text within the control minus the value of the
            <see cref="P:EWSoftware.ListControls.BaseComboBox.SelectionStart"/> property (if any value is specified for it).</value>
        </member>
        <member name="P:EWSoftware.ListControls.BaseComboBox.SelectionStart">
            <summary>
            Gets or sets the starting index of text selected in the combo box
            </summary>
            <value>If no text is selected in the control, this property indicates the insertion point for new
            text. If you set this property to a location beyond the length of the text in the control, the
            selection start position is placed after the last character. When text is selected in the text box
            control, changing this property can change the value of the <see cref="P:EWSoftware.ListControls.BaseComboBox.SelectionLength"/> property.
            If the remaining text in the control after the position indicated by this property is less than the
            value of the <see cref="P:EWSoftware.ListControls.BaseComboBox.SelectionLength"/> property, the value of the <see cref="P:EWSoftware.ListControls.BaseComboBox.SelectionLength"/>
            property is automatically decreased. The value of this property never causes an increase in the
            <see cref="P:EWSoftware.ListControls.BaseComboBox.SelectionLength"/> property.</value>
        </member>
        <member name="P:EWSoftware.ListControls.BaseComboBox.DropDownInterface">
            <summary>
            This allows the derived classes access to the drop-down interface
            </summary>
        </member>
        <member name="E:EWSoftware.ListControls.BaseComboBox.DrawImageChanged">
            <summary>
            This event is raised when the <see cref="P:EWSoftware.ListControls.BaseComboBox.DrawImage"/> property changes
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.BaseComboBox.OnDrawImageChanged(System.EventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.BaseComboBox.DrawImageChanged"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="E:EWSoftware.ListControls.BaseComboBox.AllowAutoCompletionChanged">
            <summary>
            This event is raised when the <see cref="P:EWSoftware.ListControls.BaseComboBox.AllowAutoCompletion"/> property changes
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.BaseComboBox.OnAllowAutoCompletionChanged(System.EventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.BaseComboBox.AllowAutoCompletionChanged"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="E:EWSoftware.ListControls.BaseComboBox.DropDownBackColorChanged">
            <summary>
            This event is raised when the <see cref="P:EWSoftware.ListControls.BaseComboBox.DropDownBackColor"/> changes
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.BaseComboBox.OnDropDownBackColorChanged(System.EventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.BaseComboBox.DropDownBackColorChanged"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="E:EWSoftware.ListControls.BaseComboBox.DrawItemImage">
            <summary>
            This event is raised when the control needs to draw the image to the left of the text value
            </summary>
            <remarks><para>The event is passed a <see cref="T:System.Windows.Forms.DrawItemEventArgs"/> object.  The following
            properties in it are set:</para>
            
            <list type="table">
               <listheader>
                  <term>Property</term>
                  <description>Description</description>
               </listheader>
               <item>
                  <term>BackColor</term>
                  <description>The background color for the combo box.</description>
               </item>
               <item>
                  <term>Bounds</term>
                  <description>The bounds of the area for the image.</description>
               </item>
               <item>
                  <term>Font</term>
                  <description>The font being used by the combo box.</description>
               </item>
               <item>
                  <term>ForeColor</term>
                  <description>The foreground color for the combo box.</description>
               </item>
               <item>
                  <term>Graphics</term>
                  <description>The graphics object that can be used to draw
                  the image.</description>
               </item>
               <item>
                  <term>Index</term>
                  <description>The index of the currently selected item.</description>
               </item>
               <item>
                  <term>State</term>
                  <description>The current item state(s) for the combo box.
                  This can be <c>None</c> or one or more of the values
                  <c>Disabled</c>, <c>Focus</c>, and/or <c>Selected</c>.
                  </description>
               </item>
            </list></remarks>
        </member>
        <member name="M:EWSoftware.ListControls.BaseComboBox.OnDrawItemImage(System.Windows.Forms.DrawItemEventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.BaseComboBox.DrawItemImage"/> event
            </summary>
            <param name="e">The event arguments</param>
            <remarks>See <see cref="E:EWSoftware.ListControls.BaseComboBox.DrawItemImage"/> for more information</remarks>
        </member>
        <member name="E:EWSoftware.ListControls.BaseComboBox.DropDownStyleChanged">
            <summary>
            This event is raised when the <see cref="P:EWSoftware.ListControls.BaseComboBox.DropDownStyle"/> changes
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.BaseComboBox.OnDropDownStyleChanged(System.EventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.BaseComboBox.DropDownStyleChanged"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="E:EWSoftware.ListControls.BaseComboBox.SelectionChangeCommitted">
            <summary>
            This event is raised when the selected item has changed in the drop-down list and that change is
            committed when the drop-down closes.
            </summary>
            <remarks>This event always occurs after the <see cref="E:EWSoftware.ListControls.BaseComboBox.CloseUp"/> event</remarks>
        </member>
        <member name="M:EWSoftware.ListControls.BaseComboBox.OnSelectionChangeCommitted(System.EventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.BaseComboBox.SelectionChangeCommitted"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="E:EWSoftware.ListControls.BaseComboBox.SelectionChangeCanceled">
            <summary>
            This event is raised when the selected item has not changed in the drop-down list and the drop-down
            closes.
            </summary>
            <remarks>This event always occurs after the <see cref="E:EWSoftware.ListControls.BaseComboBox.CloseUp"/> event</remarks>
        </member>
        <member name="M:EWSoftware.ListControls.BaseComboBox.OnSelectionChangeCanceled(System.EventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.BaseComboBox.SelectionChangeCanceled"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="E:EWSoftware.ListControls.BaseComboBox.DropDown">
            <summary>
            This event is raised when the drop-down is shown
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.BaseComboBox.OnDropDown(System.EventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.BaseComboBox.DropDown"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="E:EWSoftware.ListControls.BaseComboBox.CloseUp">
            <summary>
            This event is raised when the drop-down is closed
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.BaseComboBox.OnCloseUp(System.EventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.BaseComboBox.CloseUp"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="E:EWSoftware.ListControls.BaseComboBox.DropDownFontChanged">
            <summary>
            This event is raised when the <see cref="P:EWSoftware.ListControls.BaseComboBox.DropDownFont"/> changes
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.BaseComboBox.OnDropDownFontChanged(System.EventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.BaseComboBox.DropDownFontChanged"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="E:EWSoftware.ListControls.BaseComboBox.NotInList">
            <summary>
            This event is raised during the validation phase if the text in the control does not match an item in
            the list.
            </summary>
            <remarks>This event occurs before the <see cref="E:System.Windows.Forms.Control.Validating"/> event so that you have a
            chance to take action on entered text that does not appear in the item list (i.e. add it to the list
            or reject it).  Canceling this event is equivalent to canceling the <c>Validating</c> event.  If not
            canceled, the <c>Validating</c> event is called as usual.</remarks>
        </member>
        <member name="M:EWSoftware.ListControls.BaseComboBox.OnNotInList(System.ComponentModel.CancelEventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.BaseComboBox.NotInList"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.BaseComboBox.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.BaseComboBox.CommitSelection(System.Int32)">
            <summary>
            This is called by the drop-down control to hide the drop-down and select an item by index
            </summary>
            <param name="idx">The index to select</param>
            <remarks>This will guarantee that the drop-down is closed prior to setting the new value so that the
            drop-down doesn't block or hide dialog boxes that may get displayed in a user's event handler.
            </remarks>
            <overloads>There are two overloads for this method</overloads>
        </member>
        <member name="M:EWSoftware.ListControls.BaseComboBox.CommitSelection(System.Object)">
            <summary>
            This is called by the drop-down control to hide the drop-down and select an item by value
            </summary>
            <remarks>This will guarantee that the drop-down is closed prior to setting the new value so that the
            drop-down doesn't block or hide dialog boxes that may get displayed in a user's event handler.</remarks>
            <param name="item">The item to select</param>
        </member>
        <member name="M:EWSoftware.ListControls.BaseComboBox.txtValue_TextChanged(System.Object,System.EventArgs)">
            <summary>
            This is handled to forward Text Changed events to the user control
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.BaseComboBox.txtValue_GotFocus(System.Object,System.EventArgs)">
            <summary>
            This is handled to forward Got Focus events to the user control
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.BaseComboBox.txtValue_LostFocus(System.Object,System.EventArgs)">
            <summary>
            This is handled to forward Lost Focus events to the user control
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.BaseComboBox.txtValue_Click(System.Object,System.EventArgs)">
            <summary>
            This is handled to forward click events to the user control
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.BaseComboBox.txtValue_DoubleClick(System.Object,System.EventArgs)">
            <summary>
            This is handled to forward double-click events to the user control
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.BaseComboBox.txtValue_MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            This is handled to forward mouse down events to the user control
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.BaseComboBox.txtValue_MouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            This is handled to forward mouse up events to the user control
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.BaseComboBox.txtValue_KeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            This is handled to forward key down events to the user control
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.BaseComboBox.txtValue_KeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            This is handled to forward key press events to the user control
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.BaseComboBox.txtValue_KeyUp(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            This is handled to forward key up events to the user control
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.BaseComboBox.txtValue_PreviewKeyDown(System.Object,System.Windows.Forms.PreviewKeyDownEventArgs)">
            <summary>
            This is handled to forward preview key down events to the user control
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.BaseComboBox.AutoCompleteBackspace">
            <summary>
            This handles backspaces in DropDown and Simple mode
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.BaseComboBox.AutoComplete">
            <summary>
            This handles auto-completion when the user types text
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.BaseComboBox.IsThemed">
            <summary>
            This is used to check for Windows XP theme support and to create the theme handle when needed
            </summary>
            <returns>True if themed, false if not</returns>
        </member>
        <member name="M:EWSoftware.ListControls.BaseComboBox.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources, false to just release
            unmanaged resources.</param>
        </member>
        <member name="M:EWSoftware.ListControls.BaseComboBox.CreateDropDown">
            <summary>
            This is used to create the drop-down control when needed
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.BaseComboBox.FocusTextBox">
            <summary>
            This is called by derived classes to give the textbox the focus
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.BaseComboBox.HandleKeys(System.Windows.Forms.Keys)">
            <summary>
            This is used to handle key presses for the textbox and for the combo box control in all drop-down
            styles.
            </summary>
            <param name="key">The key to process</param>
            <returns>True if handled, false if not</returns>
        </member>
        <member name="M:EWSoftware.ListControls.BaseComboBox.UpdateText">
            <summary>
            This is called to update the text in the text box control
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.BaseComboBox.IsInputChar(System.Char)">
            <summary>
            This is overridden so that in <c>DropDownList</c> mode, we get to handle all input characters for
            auto-completion.
            </summary>
            <param name="charCode">The character code to check</param>
            <returns>True if it's an input character, false if not.</returns>
        </member>
        <member name="M:EWSoftware.ListControls.BaseComboBox.ProcessDialogKey(System.Windows.Forms.Keys)">
            <summary>
            This is overridden to handle special keys
            </summary>
            <param name="keyData">The key to process</param>
            <returns>True if the key was processed, false if not</returns>
        </member>
        <member name="M:EWSoftware.ListControls.BaseComboBox.OnDataSourceChanged(System.EventArgs)">
            <summary>
            Invalidate on data source changed to refresh any image item
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.BaseComboBox.OnHandleCreated(System.EventArgs)">
            <summary>
            This is overridden to perform layout at design-time
            </summary>
            <param name="e">The event arguments</param>
            <remarks>Layout doesn't always occur at design-time when the control is initially dropped on the
            form.</remarks>
        </member>
        <member name="M:EWSoftware.ListControls.BaseComboBox.OnLayout(System.Windows.Forms.LayoutEventArgs)">
            <summary>
            This is overridden to handle laying out the control elements
            </summary>
            <param name="levent">The event parameters</param>
        </member>
        <member name="M:EWSoftware.ListControls.BaseComboBox.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            This is overridden to draw the control with the appropriate style
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.BaseComboBox.OnGotFocus(System.EventArgs)">
            <summary>
            This is overridden to invalidate the control when it gains focus
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.BaseComboBox.OnLostFocus(System.EventArgs)">
            <summary>
            This is overridden to invalidate the control when it loses focus
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.BaseComboBox.OnValidating(System.ComponentModel.CancelEventArgs)">
            <summary>
            This is overridden to fire the <see cref="E:EWSoftware.ListControls.BaseComboBox.NotInList"/> event before the normal validation method so
            that you have a chance to take action on entered text that does not appear in the item list.
            </summary>
            <param name="e">The event arguments</param>
            <remarks>If the text is found, the <see cref="P:EWSoftware.ListControls.BaseComboBox.SelectedIndex"/> property is set to match the entry
            containing the text.  If it is not found, the <see cref="E:EWSoftware.ListControls.BaseComboBox.NotInList"/> event is raised so that you
            can control what happens.</remarks>
        </member>
        <member name="M:EWSoftware.ListControls.BaseComboBox.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            This is overridden to handle special keys
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.BaseComboBox.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            This is overridden to handle auto-completion if enabled
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.BaseComboBox.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This is overridden to see if the drop-down button has been clicked
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.BaseComboBox.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This is overridden to highlight the drop-down button when using themed drawing
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.BaseComboBox.OnMouseLeave(System.EventArgs)">
            <summary>
            This is overridden to turn off highlighting when using themed drawing
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.BaseComboBox.OnFontChanged(System.EventArgs)">
            <summary>
            This is overridden to set the font in the contained text box control
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.BaseComboBox.WndProc(System.Windows.Forms.Message@)">
            <summary>
            This is overridden to handle updates to the Windows XP theme
            </summary>
            <param name="m">The message</param>
        </member>
        <member name="M:EWSoftware.ListControls.BaseComboBox.Select(System.Int32,System.Int32)">
            <summary>
            This is used to select a part of the text within the textbox portion of the combo box
            </summary>
            <param name="start">The starting position of the selection</param>
            <param name="len">The length of the selection</param>
            <remarks>In <see cref="F:System.Windows.Forms.ComboBoxStyle.DropDownList"/> mode, all text is selected and the start and
            length parameters are ignored.</remarks>
        </member>
        <member name="M:EWSoftware.ListControls.BaseComboBox.SelectAll">
            <summary>
            This is used to select all text within the textbox portion of the combo box
            </summary>
        </member>
        <member name="T:EWSoftware.ListControls.DataGridViewControls.AutoCompleteTextBoxCell">
            <summary>
            This file contains a data grid view cell object that hosts a textbox with the auto-complete properties
            exposed.
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.AutoCompleteTextBoxCell.AutoCompleteMode">
            <summary>
            Gets or sets a value that determines the auto-complete mode
            </summary>
            <value>The default is <c>None</c>.</value>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.AutoCompleteTextBoxCell.AutoCompleteSource">
            <summary>
            Gets or sets a value that determines the auto-complete source
            </summary>
            <value>The default is <c>None</c>.</value>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.AutoCompleteTextBoxCell.AutoCompleteCustomSource">
            <summary>
            Gets or sets a custom auto-completion source.
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.AutoCompleteTextBoxCell.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.AutoCompleteTextBoxCell.OwnsEditingTextBox(System.Int32)">
            <summary>
            This is used to determine whether or not the given row owns the editing textbox control
            </summary>
            <param name="rowIndex">The index of the row to check</param>
            <returns>True if it owns the control, false if it does not</returns>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.AutoCompleteTextBoxCell.Clone">
            <summary>
            This is used to clone the cell.
            </summary>
            <returns>A clone of the cell</returns>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.AutoCompleteTextBoxCell.DetachEditingControl">
            <summary>
            This removes the cell's editing control from the data grid view.
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.AutoCompleteTextBoxCell.InitializeEditingControl(System.Int32,System.Object,System.Windows.Forms.DataGridViewCellStyle)">
            <summary>
            This initializes the control used to edit the cell
            </summary>
            <param name="rowIndex">The zero-based row index of the cell's location.</param>
            <param name="initialFormattedValue">An object that represents the value displayed by the cell when
            editing is started.</param>
            <param name="dataGridViewCellStyle">The cell style.</param>
        </member>
        <member name="T:EWSoftware.ListControls.DataGridViewControls.AutoCompleteTextBoxColumn">
            <summary>
            This data grid view column hosts a textbox control and exposes its auto-complete features
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.AutoCompleteTextBoxColumn.AutoCompleteTextBoxCellTemplate">
            <summary>
            This is used internally to get a reference to the cell template as the actual type
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.AutoCompleteTextBoxColumn.CellTemplate">
            <summary>
            Gets or sets the template used to create new cells
            </summary>
            <exception cref="T:System.InvalidCastException">This is thrown if the specified cell template is not an
            <see cref="T:EWSoftware.ListControls.DataGridViewControls.AutoCompleteTextBoxCell"/>.</exception>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.AutoCompleteTextBoxColumn.AutoCompleteMode">
            <summary>
            Gets or sets a value that determines the auto-complete mode
            </summary>
            <value>The default is <c>None</c>.</value>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.AutoCompleteTextBoxColumn.AutoCompleteSource">
            <summary>
            Gets or sets a value that determines the auto-complete source
            </summary>
            <value>The default is <c>None</c>.</value>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.AutoCompleteTextBoxColumn.AutoCompleteCustomSource">
            <summary>
            Gets or sets a custom auto-completion source.
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.AutoCompleteTextBoxColumn.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell">
            <summary>
            This data grid view cell type acts as an abstract base class for the combo box cells derived from it
            </summary>
        </member>
        <member name="T:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.ItemComparer">
            <summary>
            This is a custom comparer class for the object collection so that items in the collection can be
            sorted in ascending or descending order.
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.ItemComparer.#ctor(EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell)">
            <summary>
            Constructor
            </summary>
            <param name="cell">The cell to which the comparer belongs.</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.ItemComparer.Compare(System.Object,System.Object)">
            <summary>
            Compare two list control entries
            </summary>
            <param name="x">The first object</param>
            <param name="y">The second object</param>
            <returns>Returns a negative value if x is less than y, zero if they are equal, or a positive
            value if x is greater than y.  The results are inverted if the sort order is descending.  If the
            sort order is set to <c>None</c> all items are treated as equal.</returns>
        </member>
        <member name="T:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.ObjectCollection">
            <summary>
            This object collection is used to hold items for the list controls and is sortable in ascending or
            descending order.
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.ObjectCollection.System#Collections#ICollection#IsSynchronized">
            <summary>
            This is used to get whether or not the collection is synchronized
            </summary>
            <value>Always returns false (not synchronized)</value>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.ObjectCollection.System#Collections#ICollection#SyncRoot">
            <summary>
            Returns an object that can be used to synchronize the collection
            </summary>
            <value>Always returns a reference to itself.</value>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.ObjectCollection.System#Collections#IList#IsFixedSize">
            <summary>
            This is used to get whether or not the collection is of a fixed size
            </summary>
            <value>Always returns false as the collection size varies</value>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.ObjectCollection.Comparer">
            <summary>
            This is used to get an <see cref="T:System.Collections.IComparer"/> instance that can be used to sort the collection
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.ObjectCollection.Count">
            <summary>
            This is used to get a count of the items in the collection
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.ObjectCollection.InnerList">
            <summary>
            This is used to get a reference to the inner list
            </summary>
            <value>The collection uses an <see cref="T:System.Collections.ArrayList"/> to hold the collection objects</value>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.ObjectCollection.IsReadOnly">
            <summary>
            This is used to get whether or not the collection is read-only
            </summary>
            <value>Always returns false as the collection is always
            editable</value>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.ObjectCollection.Item(System.Int32)">
            <summary>
            This is used to set or get items by index position
            </summary>
            <param name="index">The index position of the item to set or get</param>
            <exception cref="T:System.ArgumentOutOfRangeException">This is thrown if the index value is not within
            the bounds of the collection.</exception>
            <exception cref="T:System.ArgumentException">This is thrown if an attempt is made to set an item when a
            data source is in use.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">This is thrown if the index value is not within
            the bounds of the collection.</exception>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.ObjectCollection.CheckNoDataSource">
            <summary>
            This is used to confirm that the owner does not have a data source assigned to it
            </summary>
            <exception cref="T:System.ArgumentException">This is thrown if the owner does have a data source assigned
            to it.</exception>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.ObjectCollection.SortInternal">
            <summary>
            This is used to sort the collection
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.ObjectCollection.#ctor(EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell)">
            <summary>
            Constructor
            </summary>
            <param name="cell">The cell to which the collection belongs</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.ObjectCollection.Add(System.Object)">
            <summary>
            Add an item to the collection
            </summary>
            <param name="item">The item to add</param>
            <exception cref="T:System.ArgumentNullException">This is thrown if the item is null</exception>
            <exception cref="T:System.ArgumentException">This is thrown if an attempt is made to add an item to the
            collection when a data source is in use.</exception>
            <returns>The index of the added item</returns>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.ObjectCollection.System#Collections#IList#Add(System.Object)">
            <summary>
            <see cref="T:System.Collections.IList"/> implementation to add an item to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.ObjectCollection.AddRange(System.Object[])">
            <summary>
            Add a range of items to the collection from an array
            </summary>
            <param name="items">The items to add to the collection</param>
            <exception cref="T:System.ArgumentException">This is thrown if an attempt is made to add an item to the
            collection when a data source is in use.</exception>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.ObjectCollection.AddRange(EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.ObjectCollection)">
            <summary>
            Add a range of items to the collection from another collection
            </summary>
            <param name="value">The items to add to the collection</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.ObjectCollection.AddRangeInternal(System.Collections.IList)">
            <summary>
            Add a range of items to the collection from an <see cref="T:System.Collections.IList"/>
            </summary>
            <exception cref="T:System.ArgumentNullException">This is thrown if the items reference is null or any
            item in the collection is null.</exception>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.ObjectCollection.Clear">
            <summary>
            Clear all items from the collection
            </summary>
            <exception cref="T:System.ArgumentException">This is thrown if an attempt is made to clear items in the
            collection when a data source is in use.</exception>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.ObjectCollection.ClearInternal">
            <summary>
            Clear all items from the collection
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.ObjectCollection.Contains(System.Object)">
            <summary>
            Check to see if a value exists in the collection
            </summary>
            <param name="value">The value for which to look</param>
            <returns>True if it is in the collection, false if not</returns>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.ObjectCollection.CopyTo(System.Object[],System.Int32)">
            <summary>
            Copy the collection items to an array
            </summary>
            <param name="destination">The destination array</param>
            <param name="startIndex">The starting index from which to copy</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.ObjectCollection.GetEnumerator">
            <summary>
            Get an enumerator for the collection
            </summary>
            <returns>An enumerator for the collection</returns>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.ObjectCollection.IndexOf(System.Object)">
            <summary>
            Get the index of the specified value in the collection
            </summary>
            <param name="value">The value for which to get the index</param>
            <returns>The index of the item or -1 if not found</returns>
            <exception cref="T:System.ArgumentNullException">This is thrown if the item is null</exception>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.ObjectCollection.Insert(System.Int32,System.Object)">
            <summary>
            Insert a value into the collection at the specified index
            </summary>
            <param name="index">The index at which to insert the item</param>
            <param name="value">The value to insert</param>
            <remarks>If the collection is sorted, the value is added to the collection and the collection is
            resorted.  The value may or may not end up at the requested index.</remarks>
            <exception cref="T:System.ArgumentNullException">This is thrown if the value is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">This is thrown if the index value is not within the
            bounds of the collection.</exception>
            <exception cref="T:System.ArgumentException">This is thrown if an attempt is made to add a value to the
            collection when a data source is in use.</exception>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.ObjectCollection.Remove(System.Object)">
            <summary>
            Remove the specified value from the collection
            </summary>
            <param name="value">The value to remove</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.ObjectCollection.RemoveAt(System.Int32)">
            <summary>
            Remove the item at the specified index from the collection
            </summary>
            <param name="index">The index of the item to remove</param>
            <exception cref="T:System.ArgumentOutOfRangeException">This is thrown if the index value is not within the
            bounds of the collection.</exception>
            <exception cref="T:System.ArgumentException">This is thrown if an attempt is made to remove an item from
            the collection when a data source is in use.</exception>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.ObjectCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            <see cref="T:System.Collections.ICollection"/> implementation to copy items to an array
            </summary>
            <param name="destination">The destination array</param>
            <param name="index">The index at which to start copying</param>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.DataManager">
            <summary>
            This is used to get a reference to the <see cref="T:System.Windows.Forms.CurrencyManager"/> associated with this control
            </summary>
            <remarks>This property is valid if the <see cref="P:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.DataSource"/> property is set. If this is not a
            data-bound control, the default is a null reference. </remarks>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.EditingComboBox">
            <summary>
            This is used to get or set the editing combo box control.
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.DisplayMember">
            <summary>
            Gets or sets a string that specifies the property of the data source whose contents you want to
            display.
            </summary>
            <value>The default is an empty string.  If not set, the object's <c>ToString()</c> method is used to
            get the display value.</value>
            <exception cref="T:System.ArgumentException">This is thrown if the display member cannot be found in the data
            source.</exception>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.ValueMember">
            <summary>
            Gets or sets a string that specifies the property of the data source from which to draw the value
            </summary>
            <value>The default value is an empty string.  Specify a value to bind the data to a property.  Clear
            it by setting it to an empty string or null.</value>
            <exception cref="T:System.ArgumentException">This is thrown if the value member cannot be found in the data
            source.</exception>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.DataSource">
            <summary>
            This gets or sets the data source for the list control
            </summary>
            <value><para>The data source object must support the <see cref="T:System.Collections.IList"/> interface such as a
            <see cref="T:System.Data.DataSet"/> or an <see cref="T:System.Array"/>.  The default is null and it will use
            whatever is in the <see cref="P:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.Items"/> collection instead.  If using a data source, set the
            <see cref="P:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.DisplayMember"/> and <see cref="P:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.ValueMember"/> properties too.  Setting this property
            to null also clears the <see cref="P:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.DisplayMember"/> property.</para>
            
            <para>A data source cannot be used with the <see cref="P:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.SortOrder"/> property.  If a non-null data
            source is set, the <c>SortOrder</c> property is set to <c>None</c> automatically.</para></value>
            <exception cref="T:System.ArgumentException">This is thrown if the data source does not support the
            <see cref="T:System.Collections.IList"/> interface.</exception>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.HasItemCollection">
            <summary>
            This can be used to determine whether or not the cell has an items collection
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.Items">
            <summary>
            Gets the objects that represent the selection displayed in the drop-down list
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.DisplayStyle">
            <summary>
            Gets or sets a value that determines how the combo box is displayed when it is not in edit mode
            </summary>
            <value>The default is to show a drop-down button</value>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.DisplayStyleForCurrentCellOnly">
            <summary>
            Get or set whether the display style applies only to the current cell
            </summary>
            <value>The default is false and the style applies to all cells.</value>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.FlatStyle">
            <summary>
            Gets or sets the flat style appearance of the cell
            </summary>
            <value>The default is <c>Standard</c></value>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.MaxDropDownItems">
            <summary>
            Gets or sets the maximum number of items to be shown in the drop-down portion of the combo box when
            first displayed.  It also controls how many items are skipped when paging up and down.
            </summary>
            <value>The value must be between 1 and 100.  The value is only used the first time the drop-down
            portion is shown.  The drop-down is resizable and it will remember the last used size until it is
            disposed.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">This is thrown if the value is not between 1 and 100.</exception>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.SortOrder">
            <summary>
            Gets or sets a value indicating whether the items in the list control are sorted and, if so, in what
            order.
            </summary>
            <value>If set to <c>None</c> (the default), the items in the list control are not sorted.  If set to
            <c>Ascending</c> or <c>Descending</c> the list control sorts existing entries and adds new entries to
            the appropriate sorted position in the list. You can use this property to automatically sort items in
            a list control.  As items are added to a sorted list control, the items are moved to the appropriate
            location in the sorted list. When you set the property to <c>None</c>, new items are added to the end
            of the existing list. The sort is case-insensitive.</value>
            <exception cref="T:System.ArgumentException">This is thrown if an attempt is made to set a sort order other
            than <c>None</c> when a data source is in use.</exception>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.FormattedValueType">
            <summary>
            Gets the class type of the formatted value associated with the cell
            </summary>
            <value>This always returns <see cref="T:System.String"/>.</value>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.ValueType">
            <summary>
            Gets or sets the data type of the values in the cell
            </summary>
            <value>This returns a <see cref="T:System.Type"/> representing the data type of the value in the cell</value>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.DisplayMemberInternal">
            <summary>
            This is used to set the display member without raising the change event
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.ValueMemberInternal">
            <summary>
            This is used internally to set the value member without raising the change event
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.DisplayStyleInternal">
            <summary>
            This is used to set the display style member without raising the change event
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.DisplayStyleForCurrentCellOnlyInternal">
            <summary>
            This is used to set the "display style for current cell only" member without raising the change event
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.FlatStyleInternal">
            <summary>
            This is used to set the flat style internally so that it doesn't raise the change event
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.DisplayType">
            <summary>
            This is used to get the display type using the display member or value member based on which is set
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.DisplayTypeConverter">
            <summary>
            This is used to get the display type converter using the display member or value member based on
            which is set.
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.TemplateComboBoxColumn">
            <summary>
            This is used to get or set the column for the cell template
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.CheckDropDownList(System.Int32,System.Int32,System.Int32)">
            <summary>
            This is used to see if the drop-down list should be shown and, if so, it will show it
            </summary>
            <param name="x">The mouse click X coordinate</param>
            <param name="y">The mouse click coordinate</param>
            <param name="rowIndex">The current row index</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.DataSource_Disposed(System.Object,System.EventArgs)">
            <summary>
            This is used to clear the data source when it is disposed
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.DataSource_Initialized(System.Object,System.EventArgs)">
            <summary>
            This is used to set the display and value member property descriptors once the data source is
            initialized.
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.GetDataManager(System.Windows.Forms.DataGridView)">
            <summary>
            This is used to get a currency manager for the currently defined data source
            </summary>
            <param name="dataGridView">The owning data grid view</param>
            <returns>The currency manager if there is one or null</returns>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.GetDropDownButtonHeight(System.Drawing.Graphics,System.Windows.Forms.DataGridViewCellStyle)">
            <summary>
            This is used to get the height of the drop-down button
            </summary>
            <param name="graphics">The graphics object</param>
            <param name="cellStyle">The current cell style</param>
            <returns>The height of the drop-down button in pixels</returns>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.GetItemDisplayText(System.Object)">
            <summary>
            This is used to get the display text for an item
            </summary>
            <param name="item">The item for which to get display text</param>
            <returns>The display text if there is any or an empty string if there is not</returns>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.GetItemDisplayValue(System.Object)">
            <summary>
            This is used to get an item display value based on either the display member property descriptor or
            the value member property descriptor based on what has been specified.
            </summary>
            <param name="item">The item for which to get a display value</param>
            <returns>The object representing the display value</returns>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.GetItemValue(System.Object)">
            <summary>
            This is used to get an item value based on either the value member property descriptor or the display
            member property descriptor based on what has been specified.
            </summary>
            <param name="item">The item for which to get a value</param>
            <returns>The object representing the value</returns>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.GetItems(System.Windows.Forms.DataGridView)">
            <summary>
            Get the items from the data source when needed
            </summary>
            <param name="dataGridView">The owning data grid view</param>
            <returns>an object collection containing the items</returns>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.InitializeComboBoxText">
            <summary>
            This is used to initialize the combo box text
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.InitializeDisplayMemberPropertyDescriptor(System.String)">
            <summary>
            This is used to initialize the display member property descriptor
            </summary>
            <param name="displayMember">The display member field</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.InitializeValueMemberPropertyDescriptor(System.String)">
            <summary>
            This is used to initialize the value member property descriptor
            </summary>
            <param name="valueMember">The value member field</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.ItemFromComboBoxDataSource(System.ComponentModel.PropertyDescriptor,System.Object)">
            <summary>
            This is used to get an item from the combo box's data source
            </summary>
            <param name="property">The property descriptor for the field to retrieve</param>
            <param name="key">The key value to find</param>
            <returns>The item found in the data source using the key or null if it was not found</returns>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.ItemFromComboBoxItems(System.Int32,System.String,System.Object)">
            <summary>
            This is used to get an item from the combo box's item collection
            </summary>
            <param name="rowIndex">The current row index</param>
            <param name="field">The field to search</param>
            <param name="key">The key to find</param>
            <returns>The item found in the collection using the key or null if it was not found</returns>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.LookupDisplayValue(System.Int32,System.Object,System.Object@)">
            <summary>
            This is used to look up the display value in the data source or the items collection using the
            display or value property descriptor based on the current settings.
            </summary>
            <param name="rowIndex">The current row index</param>
            <param name="value">The value to find</param>
            <param name="displayValue">The object that receives the found display value</param>
            <returns>True if found, false if not</returns>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.OnItemsCollectionChanged">
            <summary>
            This is used by the object collection to notify use when it has changed so that we set the combo box
            text and can notify the grid that it may need to resize the column and its rows.
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.PaintPrivate(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Int32,System.Windows.Forms.DataGridViewElementStates,System.Object,System.String,System.Windows.Forms.DataGridViewCellStyle,System.Windows.Forms.DataGridViewAdvancedBorderStyle,System.Drawing.Rectangle@,System.Windows.Forms.DataGridViewPaintParts,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            This is used to paint the combo box cell when it is not in edit mode
            </summary>
            <param name="g">The graphics object.</param>
            <param name="clipBounds">The cell's clipping bounds.</param>
            <param name="cellBounds">The overall cell bounds.</param>
            <param name="rowIndex">The row index.</param>
            <param name="elementState">The current element state.</param>
            <param name="formattedValue">The formatted value.</param>
            <param name="errorText">The error text, if any.</param>
            <param name="cellStyle">The current cell style.</param>
            <param name="advancedBorderStyle">The current border style.</param>
            <param name="dropDownButtonRect">A rectangle object that will receive the bounds of the drop-down
            button rectangle.</param>
            <param name="paintParts">The parts of the cell that should be painted.</param>
            <param name="computeContentBounds">True if this should compute the content bounds, false if not.  If
            true, the content bounds are returned as the result.</param>
            <param name="computeErrorIconBounds">True if this should compute the error icon bounds, false if not.
            If true, the content bounds are returned as the result.  The overrides <c>computeContentBounds</c> if
            both are set to true.</param>
            <param name="paint">True to paint the parts or false if just computing the various part bounds.</param>
            <returns>The bounding rectangle</returns>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.WireDataSource(System.Object)">
            <summary>
            This is used to wire up the data source events
            </summary>
            <param name="dataSource">The data source that is in use</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.UnwireDataSource">
            <summary>
            This is used to unwire the data source events
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.CreateItemsFromDataSource">
            <summary>
            This is used internally to get or set whether or not to create items from the data source
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.Clone">
            <summary>
            Clone the cell
            </summary>
            <returns>A clone of the cell</returns>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.DetachEditingControl">
            <summary>
            This removes the cell's editing control from the data grid view
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.GetContentBounds(System.Drawing.Graphics,System.Windows.Forms.DataGridViewCellStyle,System.Int32)">
            <summary>
            This returns the bounding rectangle that encloses the cell's content area calculated by using the
            specified graphics object and cell style.
            </summary>
            <param name="graphics">The graphics context for the cell</param>
            <param name="cellStyle">The cell style</param>
            <param name="rowIndex">The index of the parent row</param>
            <returns>A rectangle representing the cell content bounds</returns>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.OwnsEditingComboBox(System.Int32)">
            <summary>
            This is used to determine whether or not the given row owns the editing combo box control
            </summary>
            <param name="rowIndex">The index of the row to check</param>
            <returns>True if it owns the control, false if it does not</returns>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.CellStateFromColumnRowStates(System.Windows.Forms.DataGridViewElementStates)">
            <summary>
            Get the cell state based on the column row states
            </summary>
            <param name="rowState">The row state</param>
            <returns>The combination of the cell and row states</returns>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.ComputeBorderStyleCellStateAndCellBounds(System.Int32,System.Windows.Forms.DataGridViewAdvancedBorderStyle@,System.Windows.Forms.DataGridViewElementStates@,System.Drawing.Rectangle@)">
            <summary>
            Compute the border style, cell state, and cell bounds
            </summary>
            <param name="rowIndex">The row state</param>
            <param name="dgvabsEffective">The effective border style</param>
            <param name="cellState">The cell state</param>
            <param name="cellBounds">The cell bounds</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.GetErrorIconBounds(System.Drawing.Graphics,System.Windows.Forms.DataGridViewCellStyle,System.Int32)">
            <summary>
            Returns the bounding rectangle that encloses the cell's error icon, if one is displayed
            </summary>
            <param name="graphics">The graphics context for the cell</param>
            <param name="cellStyle">The cell style</param>
            <param name="rowIndex">The index of the cell's parent row</param>
            <returns>The bounds of the cell's error icon if displayed or <c>Rectangle.Empty</c> if not</returns>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.GetFormattedValue(System.Object,System.Int32,System.Windows.Forms.DataGridViewCellStyle@,System.ComponentModel.TypeConverter,System.ComponentModel.TypeConverter,System.Windows.Forms.DataGridViewDataErrorContexts)">
            <summary>
            Gets the formatted value of the cell's data
            </summary>
            <param name="value">The value to be formatted.</param>
            <param name="rowIndex">The index of the cell's parent row.</param>
            <param name="cellStyle">The cell style.</param>
            <param name="valueTypeConverter">A <see cref="T:System.ComponentModel.TypeConverter"/> associated with the value type that
            provides custom conversion to the formatted value type, or null if no such custom conversion is
            needed.</param>
            <param name="formattedValueTypeConverter">A <see cref="T:System.ComponentModel.TypeConverter"/> associated with the formatted
            value type that provides custom conversion from the value type, or null if no such custom conversion
            is needed.</param>
            <param name="context">A bitwise combination of <see cref="T:System.Windows.Forms.DataGridViewDataErrorContexts"/> values
            describing the context in which the formatted value is needed.</param>
            <returns>The value of the cell's data after formatting has been applied or null if the cell is not
            part of a <see cref="T:System.Windows.Forms.DataGridView"/> control.</returns>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.GetPreferredSize(System.Drawing.Graphics,System.Windows.Forms.DataGridViewCellStyle,System.Int32,System.Drawing.Size)">
            <summary>
            Calculates the preferred size, in pixels, of the cell
            </summary>
            <param name="graphics">The graphics context for the cell</param>
            <param name="cellStyle">The cell style</param>
            <param name="rowIndex">The index of the cell's parent row</param>
            <param name="constraintSize">The cell's maximum allowable size</param>
            <returns>The preferred cell size in pixels</returns>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.KeyEntersEditMode(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Determines if edit mode should be started based on the given key
            </summary>
            <param name="e">The event arguments</param>
            <returns>True to enter edit mode, false to not enter edit mode</returns>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.OnDataGridViewChanged">
            <summary>
            This is used to reinitialize the data source display and value members when the
            <see cref="T:System.Windows.Forms.DataGridView"/> property changes.
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.OnEnter(System.Int32,System.Boolean)">
            <summary>
            This is overridden to set the Ignore Next Click flag based on the data grid's
            <see cref="P:System.Windows.Forms.DataGridView.EditMode"/> setting.
            </summary>
            <param name="rowIndex">The row index</param>
            <param name="throughMouseClick">True if user action moved the focus, false if it was programmatic</param>
            <remarks>If not editing on enter, the next mouse click is ignored as it is the one that will make it
            enter edit mode and we don't want it to drop down the list if the button is clicked.</remarks>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.OnLeave(System.Int32,System.Boolean)">
            <summary>
            This is overridden to clear the Ignore Next Click flag when leaving the cell
            </summary>
            <param name="rowIndex">The row index.</param>
            <param name="throughMouseClick">True if user action moved the focus, false if it was programmatic</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.OnMouseClick(System.Windows.Forms.DataGridViewCellMouseEventArgs)">
            <summary>
            This is used to drop down the list if the button is clicked and we are in edit mode
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.OnMouseEnter(System.Int32)">
            <summary>
            This is overridden to invalidate the cell when the mouse enters it when using the <c>Popup</c> flat
            style and the <c>ComboBox</c> display style.
            </summary>
            <param name="rowIndex">The row index</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.OnMouseLeave(System.Int32)">
            <summary>
            This is overridden to invalidate the cell when the mouse leaves it when themed and the mouse is over
            the drop-down button or when using the pop-up combo box style.
            </summary>
            <param name="rowIndex">The row index</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.OnMouseMove(System.Windows.Forms.DataGridViewCellMouseEventArgs)">
            <summary>
            This is overridden to invalidate the cell as needed when the mouse moves around within it to show the
            drop-down button as hot or cold.
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.Paint(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Int32,System.Windows.Forms.DataGridViewElementStates,System.Object,System.Object,System.String,System.Windows.Forms.DataGridViewCellStyle,System.Windows.Forms.DataGridViewAdvancedBorderStyle,System.Windows.Forms.DataGridViewPaintParts)">
            <summary>
            This is overridden to paint the cell
            </summary>
            <param name="graphics">The graphics object</param>
            <param name="clipBounds">The clip bounds</param>
            <param name="cellBounds">The cell bounds</param>
            <param name="rowIndex">The row index of the cell</param>
            <param name="cellState">The cell state</param>
            <param name="value">The value of the cell</param>
            <param name="formattedValue">The formatted value for the cell</param>
            <param name="errorText">The error text associated with the cell, if any</param>
            <param name="cellStyle">The cell style</param>
            <param name="advancedBorderStyle">The advanced border style</param>
            <param name="paintParts">The parts of the cell to paint</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell.ParseFormattedValue(System.Object,System.Windows.Forms.DataGridViewCellStyle,System.ComponentModel.TypeConverter,System.ComponentModel.TypeConverter)">
            <summary>
            This converts a value formatted for display to an actual cell value
            </summary>
            <param name="formattedValue">The formatted display value of the cell.</param>
            <param name="cellStyle">The cell style.</param>
            <param name="formattedValueTypeConverter">A <see cref="T:System.ComponentModel.TypeConverter"/> for the display value type,
            or null to use the default converter.</param>
            <param name="valueTypeConverter">A <see cref="T:System.ComponentModel.TypeConverter"/> for the cell value type, or null to
            use the default converter.</param>
            <returns>The cell value found based on the formatted value.</returns>
        </member>
        <member name="T:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxColumn">
            <summary>
            This data grid view column acts as an abstract base class for the combo
            box columns derived from it.
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxColumn.ComboBoxCellTemplate">
            <summary>
            This is used internally to get a reference to the cell template as the actual type
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxColumn.CellTemplate">
            <summary>
            Gets or sets the template used to create new cells
            </summary>
            <exception cref="T:System.InvalidCastException">This is thrown if the specified cell template is not a
            <see cref="T:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell"/>.</exception>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxColumn.DisplayStyle">
            <summary>
            Gets or sets a value that determines how the combo box is displayed when not editing
            </summary>
            <value>The default is to show a drop-down button.</value>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxColumn.DisplayStyleForCurrentCellOnly">
            <summary>
            Get or set whether or not the display style applies only to the current cell
            </summary>
            <value>The default is false and the style applies to all cells</value>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxColumn.FlatStyle">
            <summary>
            Get or set the flat style appearance of the cells
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxColumn.MaxDropDownItems">
            <summary>
            Get the maximum number of items to display in the drop-down by default
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxColumn.SortOrder">
            <summary>
            Gets or sets a value indicating whether the items in the list control are sorted and, if so, in what
            order.
            </summary>
            <value>If set to <c>None</c> (the default), the items in the list control are not sorted.  If set to
            <c>Ascending</c> or <c>Descending</c> the list control sorts existing entries and adds new entries to
            the appropriate sorted position in the list. You can use this property to automatically sort items in
            a list control.  As items are added to a sorted list control, the items are moved to the appropriate
            location in the sorted list. When you set the property to <c>None</c>, new items are added to the end
            of the existing list. The sort is case-insensitive.</value>
            <exception cref="T:System.ArgumentException">This is thrown if an attempt is made to set a sort order other
            than <c>None</c> when a data source is in use.</exception>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxColumn.DisplayMember">
            <summary>
            Gets or sets a string that specifies the property or column from which to retrieve strings for
            display in the combo boxes.
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxColumn.ValueMember">
            <summary>
            Gets or sets a string that specifies the property or column from which to get values that correspond
            to the selections in the drop-down list.
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxColumn.DataSource">
            <summary>
            Gets or sets the data source that populates the selections for the combo boxes
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxColumn.EnforceDefaultSelection">
            <summary>
            This is used to get or set whether or not the combo box should enforce a default selection
            </summary>
            <value>In <c>DropDownList</c> mode, if this property is true, a <see cref="P:EWSoftware.ListControls.BaseListControl.SelectedIndex"/>
            of -1 (no selection) is not allowed.  Instead, the index specified by the <see cref="P:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxColumn.DefaultSelection"/>
            property is used instead. For <c>DropDown</c> mode, this property is ignored as values can be entered
            that are not in the list of valid items.  The default is false to mimic the behavior of the normal
            <see cref="T:System.Windows.Forms.DataGridViewComboBoxColumn"/>.</value>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxColumn.DefaultSelection">
            <summary>
            This property is used to set or get the default selection's index
            </summary>
            <value>If <see cref="P:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxColumn.EnforceDefaultSelection"/> is true, a <see cref="P:EWSoftware.ListControls.BaseListControl.SelectedIndex"/>
            of -1 (no selection) is not allowed.  Instead, the index specified by this property is used.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">This is thrown if the index is less than zero</exception>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxColumn.Items">
            <summary>
            Gets the collection of objects used as selections in the combo boxes
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxColumn.OnItemsCollectionChanged">
            <summary>
            This is used to refresh the item collection in each cell when the template column's collection
            changes.
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxColumn.#ctor(EWSoftware.ListControls.DataGridViewControls.BaseComboBoxCell)">
            <summary>
            Constructor
            </summary>
            <param name="cellTemplate">The cell template to use</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseComboBoxColumn.Clone">
            <summary>
            This is used to clone the column.
            </summary>
            <returns>A clone of the column</returns>
        </member>
        <member name="T:EWSoftware.ListControls.DataGridViewControls.BaseDataGridViewCell">
            <summary>
            This is a base <see cref="T:System.Windows.Forms.DataGridViewCell"/> class that contains various common properties and methods
            used by its derived classes.
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.BaseDataGridViewCell.FirstDisplayedColumnIndex">
            <summary>
            This is used to determine the first displayed column in the associated data grid view
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.BaseDataGridViewCell.FirstDisplayedRowIndex">
            <summary>
            This is used to determine the first displayed row in the associated data grid view
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseDataGridViewCell.ComputeTextFormatFlagsForCellStyleAlignment(System.Boolean,System.Windows.Forms.DataGridViewContentAlignment,System.Windows.Forms.DataGridViewTriState)">
            <summary>
            This is used to compute the text formatting flags based on the cell style alignment settings
            </summary>
            <param name="rightToLeft">True if right to left formatting is in effect</param>
            <param name="alignment">The alignment</param>
            <param name="wrapMode">The wrapping mode</param>
            <returns>The text formatting flags to use</returns>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseDataGridViewCell.GetTextBounds(System.Drawing.Rectangle,System.String,System.Windows.Forms.TextFormatFlags,System.Windows.Forms.DataGridViewCellStyle,System.Drawing.Font)">
            <summary>
            This is used to compute the text bounds for the cell based on the cell bounds, cell style, and the
            formatting flags in effect.
            </summary>
            <param name="cellBounds">The cell bounds</param>
            <param name="text">The cell text</param>
            <param name="flags">The text formatting flags</param>
            <param name="cellStyle">The cell style</param>
            <param name="font">The font</param>
            <returns>The bounds of the cell's text</returns>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseDataGridViewCell.GetTextLocation(System.Drawing.Rectangle,System.Drawing.Size,System.Windows.Forms.TextFormatFlags,System.Windows.Forms.DataGridViewCellStyle)">
            <summary>
            This is used to get the text location based on the text size, cell style, and formatting flags in
            effect.
            </summary>
            <param name="cellBounds">The cell bounds</param>
            <param name="sizeText">The text size</param>
            <param name="flags">The text formatting flags</param>
            <param name="cellStyle">The cell style</param>
            <returns>The location at which to draw the text</returns>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseDataGridViewCell.PaintPadding(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.DataGridViewCellStyle,System.Drawing.Brush,System.Boolean)">
            <summary>
            This is used to paint the cell's padding based on the current bounds and cell style
            </summary>
            <param name="g">The graphics object</param>
            <param name="bounds">The cell bounds</param>
            <param name="cellStyle">The cell style</param>
            <param name="br">The background brush</param>
            <param name="rightToLeft">The right-to-left setting currently in effect</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseDataGridViewCell.OnCommonChange">
            <summary>
            This is used to notify the data grid view of a change that may require it to resize the column and
            possibly the row.
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseDataGridViewCell.ComputeErrorIconBounds(System.Drawing.Rectangle)">
            <summary>
            This is used to compute the cell's error icon bounds
            </summary>
            <param name="cellValueBounds">The cell value bounds</param>
            <returns>The bounds of the cell's error icon</returns>
        </member>
        <member name="T:EWSoftware.ListControls.DataGridViewControls.BaseImageCell">
            <summary>
            This abstract base data grid view image cell object supports editing and contains common properties and
            methods used by its derived types.
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.BaseImageCell.FormattedValueType">
            <summary>
            This is overridden to return <see cref="T:System.Object"/> as the formatted value type
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.BaseImageCell.OriginalValue">
            <summary>
            This read-only property returns the original cell value prior to editing
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.BaseImageCell.NewValue">
            <summary>
            This is used to set or get the edited cell value
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.BaseImageCell.EditingCellFormattedValue">
            <summary>
            Gets or sets the formatted value of the cell
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.BaseImageCell.EditingCellValueChanged">
            <summary>
            Gets or sets a value indicating whether the value of the cell has changed
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseImageCell.GetEditingCellFormattedValue(System.Windows.Forms.DataGridViewDataErrorContexts)">
            <summary>
            Retrieves the formatted value of the cell
            </summary>
            <param name="context">A bitwise combination of <see cref="T:System.Windows.Forms.DataGridViewDataErrorContexts"/> values
            that specifies the context in which the data is needed.</param>
            <returns>An <see cref="T:System.Object"/> that represents the formatted version of the cell contents</returns>
            <remarks>If the context contains <c>ClipboardContent</c>, the underlying cell value is returned
            instead of the image.</remarks>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseImageCell.PrepareEditingCellForEdit(System.Boolean)">
            <summary>
            For this cell type, this method does nothing
            </summary>
            <param name="selectAll">Ignored as this method does nothing</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseImageCell.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks>The <see cref="T:System.ValueType"/> and <see cref="P:EWSoftware.ListControls.DataGridViewControls.BaseImageCell.FormattedValueType"/> are both
            <see cref="T:System.Object"/>.  This allows the bound cell value to be edited.</remarks>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseImageCell.Paint(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Int32,System.Windows.Forms.DataGridViewElementStates,System.Object,System.Object,System.String,System.Windows.Forms.DataGridViewCellStyle,System.Windows.Forms.DataGridViewAdvancedBorderStyle,System.Windows.Forms.DataGridViewPaintParts)">
            <summary>
            This is overridden to paint the cell value based on whether or not it is in edit mode
            </summary>
            <param name="graphics">The graphics object</param>
            <param name="clipBounds">The clip bounds</param>
            <param name="cellBounds">The cell bounds</param>
            <param name="rowIndex">The row index of the cell</param>
            <param name="elementState">The cell state</param>
            <param name="value">The value of the cell</param>
            <param name="formattedValue">The formatted value for the cell</param>
            <param name="errorText">The error text associated with the cell, if any</param>
            <param name="cellStyle">The cell style</param>
            <param name="advancedBorderStyle">The advanced border style</param>
            <param name="paintParts">The parts of the cell to paint</param>
            <remarks>This also fixes a bug in the base image cell class by painting the cell background when
            <see cref="T:System.Windows.Forms.ImageLayout"/> is set to <c>Stretch</c>.</remarks>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseImageCell.GetFormattedValue(System.Object,System.Int32,System.Windows.Forms.DataGridViewCellStyle@,System.ComponentModel.TypeConverter,System.ComponentModel.TypeConverter,System.Windows.Forms.DataGridViewDataErrorContexts)">
            <summary>
            Gets the formatted value of the cell's data
            </summary>
            <param name="value">The value to be formatted.</param>
            <param name="rowIndex">The index of the cell's parent row.</param>
            <param name="cellStyle">The cell style.</param>
            <param name="valueTypeConverter">A <see cref="T:System.ComponentModel.TypeConverter"/> associated with the value type that
            provides custom conversion to the formatted value type, or null if no such custom conversion is
            needed.</param>
            <param name="formattedValueTypeConverter">A <see cref="T:System.ComponentModel.TypeConverter"/> associated with the formatted
            value type that provides custom conversion from the value type, or null if no such custom conversion
            is needed.</param>
            <param name="context">A bitwise combination of <see cref="T:System.Windows.Forms.DataGridViewDataErrorContexts"/> values
            describing the context in which the formatted value is needed.</param>
            <returns>The value of the cell's data after formatting has been applied or null if the cell is not
            part of a <see cref="T:System.Windows.Forms.DataGridView"/> control.</returns>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseImageCell.ParseFormattedValue(System.Object,System.Windows.Forms.DataGridViewCellStyle,System.ComponentModel.TypeConverter,System.ComponentModel.TypeConverter)">
            <summary>
            This is overridden to return the appropriate value for the cell when it is being edited
            </summary>
            <param name="formattedValue">The display value of the cell.</param>
            <param name="cellStyle">The cell style in effect.</param>
            <param name="formattedValueTypeConverter">A <see cref="T:System.ComponentModel.TypeConverter"/> for the display value type,
            or null to use the default converter.</param>
            <param name="valueTypeConverter">A <see cref="T:System.ComponentModel.TypeConverter"/> for the cell value type, or null to
            use the default converter.</param>
            <returns>The cell value.</returns>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseImageCell.ContentClickUnsharesRow(System.Windows.Forms.DataGridViewCellEventArgs)">
            <summary>
            Indicates whether the cell's row will be unshared when the cell's content is clicked
            </summary>
            <param name="e">The event arguments</param>
            <returns>True if this is the current cell and it is in edit mode, otherwise false</returns>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseImageCell.ContentDoubleClickUnsharesRow(System.Windows.Forms.DataGridViewCellEventArgs)">
            <summary>
            Indicates whether the cell's row will be unshared when the cell's content is double-clicked
            </summary>
            <param name="e">The event arguments</param>
            <returns>True if this is the current cell and it is in edit mode, otherwise false</returns>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseImageCell.MouseDownUnsharesRow(System.Windows.Forms.DataGridViewCellMouseEventArgs)">
            <summary>
            Indicates whether a row will be unshared when the user holds down a mouse button while the pointer is
            on a cell in the row.
            </summary>
            <param name="e">The event arguments</param>
            <returns>True if the left mouse button is pressed, otherwise false</returns>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseImageCell.MouseUpUnsharesRow(System.Windows.Forms.DataGridViewCellMouseEventArgs)">
            <summary>
            Indicates whether a row will be unshared when the user releases a mouse button while the pointer is
            on a cell in the row.
            </summary>
            <param name="e">The event arguments</param>
            <returns>True if the left mouse button is pressed, otherwise false</returns>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseImageCell.MouseEnterUnsharesRow(System.Int32)">
            <summary>
            Indicates whether a row will be unshared when the mouse pointer moves over a cell in the row
            </summary>
            <param name="rowIndex">The index of the row containing the cell</param>
            <returns>True if the mouse is in the cell in which the mouse button was pressed, otherwise false</returns>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.BaseImageCell.GetCellImage(System.Object,System.Int32)">
            <summary>
            Gets the image to display in the cell
            </summary>
            <param name="value">The value to be use in determining the image</param>
            <param name="rowIndex">The index of the cell's parent row</param>
            <returns>The image that should be displayed in the cell</returns>
        </member>
        <member name="T:EWSoftware.ListControls.DataGridViewControls.DataGridViewHelper">
            <summary>
            This is a static class that contains various helper methods for use with <see cref="T:System.Windows.Forms.DataGridView"/>
            objects.
            </summary>
            <remarks>Many of these methods use reflection to access internal members of the <see cref="T:System.Windows.Forms.DataGridView"/>
            class that are not exposed as public items.</remarks>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.DataGridViewHelper.DataGridViewType(System.Windows.Forms.DataGridView)">
            <summary>
            This is used to get a reference to the DataGridView type on the passed data grid view-derived object
            </summary>
            <param  name="dgv">The data grid view to use</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.DataGridViewHelper.CachedGraphics(System.Windows.Forms.DataGridView)">
            <summary>
            This can be used to get the cached graphics object from the specified <see cref="T:System.Windows.Forms.DataGridView"/>
            control.
            </summary>
            <param name="dgv">The data grid view from which to get the cached graphics object</param>
            <returns>The cached graphics object</returns>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.DataGridViewHelper.GetCachedTypeConverter(System.Windows.Forms.DataGridView,System.Type)">
            <summary>
            This can be used to get a cached type converter from the specified data grid view
            </summary>
            <param name="dgv">The data grid from which to get the cached type converter</param>
            <param name="type">The type for which to get a converter</param>
            <returns>The type converter for the specified type</returns>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.DataGridViewHelper.GetCachedBrush(System.Windows.Forms.DataGridView,System.Drawing.Color)">
            <summary>
            This can be used to get a cached brush from the specified data grid view
            </summary>
            <param name="dgv">The data grid view from which to get the cached brush</param>
            <param name="color">The color of the brush</param>
            <returns>The brush to use</returns>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.DataGridViewHelper.MouseEnteredCellAddress(System.Windows.Forms.DataGridView)">
            <summary>
            This can be used to get the address of the cell that the mouse is currently over
            </summary>
            <param name="dgv">The data grid view from which to get the point</param>
            <returns>The point at which the mouse entered the cell</returns>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.DataGridViewHelper.MouseDownCellAddress(System.Windows.Forms.DataGridView)">
            <summary>
            This can be used to get the address of the cell in which the mouse button was pressed
            </summary>
            <param name="dgv">The data grid view from which to get the point</param>
            <returns>The cell in which the mouse button was pressed</returns>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.DataGridViewHelper.OnColumnCommonChange(System.Windows.Forms.DataGridView,System.Int32)">
            <summary>
            This can be used to notify the data grid view that it may need to resize the specified column
            </summary>
            <param name="dgv">The data grid view to notify</param>
            <param name="column">The column to resize</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.DataGridViewHelper.OnCellCommonChange(System.Windows.Forms.DataGridView,System.Int32,System.Int32)">
            <summary>
            This can be used to notify the data grid view that it may need to resize the specified column and row
            </summary>
            <param name="dgv">The data grid view to notify</param>
            <param name="column">The column to resize</param>
            <param name="row">The row to resize</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.DataGridViewHelper.ShowFocusCues(System.Windows.Forms.DataGridView)">
            <summary>
            This can be used to get whether or not the grid is showing focus cues
            </summary>
            <param name="dgv">The data grid view from which to get the point</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.DataGridViewHelper.ActivateToolTip(System.Windows.Forms.DataGridView,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            This can be used to show or hide the tool tip for the given cell
            </summary>
            <param name="dgv">The data grid view in which to show or hide the tool tip</param>
            <param name="activate">True to activate the tool tip, false to hide it</param>
            <param name="toolTipText">The tool tip text to show</param>
            <param name="columnIndex">The column index of the cell</param>
            <param name="rowIndex">The row index of the cell</param>
        </member>
        <member name="T:EWSoftware.ListControls.DataGridViewControls.ImageListCell">
            <summary>
            This data grid view cell type displays an image from an image list based on the index retrieved from the
            cell value.
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.ImageListCell.DefaultNewRowValue">
            <summary>
            This gets the default value for a cell in the new row placeholder
            </summary>
            <value>Returns the image index from <see cref="P:EWSoftware.ListControls.DataGridViewControls.ImageListCell.NewRowImageIndex"/> to use for the new row cell or
            null if set to -1.</value>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.ImageListCell.NewRowImageIndex">
            <summary>
            This is used to get or set the image index to show for the new row cells
            </summary>
            <value>If set to -1 (the default), new rows will show the <see cref="P:EWSoftware.ListControls.DataGridViewControls.ImageListColumn.NullImage"/> if
            it has been set or a blank cell if not.  If set to a value other than -1, the image at the specified
            index will be shown in the new row.</value>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.ImageListCell.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks>The <see cref="T:System.ValueType"/> and <see cref="P:EWSoftware.ListControls.DataGridViewControls.BaseImageCell.FormattedValueType"/> are both
            <see cref="T:System.Object"/>.  16-bit and 32-bit integer values are assumed to be actual index values unless
            mapped to a different index.  Boolean values are mapped to 0 (false) and 1 (true) unless mapped to a
            different index.  All other types must be mapped to an index using the
            <see cref="E:EWSoftware.ListControls.DataGridViewControls.ImageListColumn.MapValueToIndex"/> event.</remarks>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.ImageListCell.Clone">
            <summary>
            Clone the cell
            </summary>
            <returns>A clone of the cell</returns>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.ImageListCell.GetContentBounds(System.Drawing.Graphics,System.Windows.Forms.DataGridViewCellStyle,System.Int32)">
            <summary>
            Returns the bounding rectangle that encloses the cell's content area, which is calculated using the
            specified graphics context and cell style.
            </summary>
            <param name="graphics">The graphics context</param>
            <param name="cellStyle">The cell style to apply to the cell</param>
            <param name="rowIndex">The index of the cell's parent row</param>
            <returns>The <see cref="T:System.Drawing.Rectangle"/> that bounds the cell's contents</returns>
            <remarks>For null cells, a default rectangle is returned so that mouse clicks near its center will
            initiate editing.</remarks>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.ImageListCell.KeyDownUnsharesRow(System.Windows.Forms.KeyEventArgs,System.Int32)">
            <summary>
            Indicates whether the parent row is unshared if the user presses a key while the focus is on the cell
            </summary>
            <param name="e">The event arguments</param>
            <param name="rowIndex">The index of the row containing the cell</param>
            <returns>True if Space is hit and the Alt, Control, and Shift keys are not held down, otherwise
            false.</returns>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.ImageListCell.KeyUpUnsharesRow(System.Windows.Forms.KeyEventArgs,System.Int32)">
            <summary>
            Indicates whether the parent row is unshared if the user releases a key while the focus is on the
            cell.
            </summary>
            <param name="e">The event arguments</param>
            <param name="rowIndex">The index of the row containing the cell</param>
            <returns>True if Space is released, otherwise false</returns>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.ImageListCell.OnContentClick(System.Windows.Forms.DataGridViewCellEventArgs)">
            <summary>
            This is overridden to cycle through the image index values when the cell is clicked and the cell is
            editable.
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.ImageListCell.OnKeyDown(System.Windows.Forms.KeyEventArgs,System.Int32)">
            <summary>
            This is overridden to handle Space key presses when editable
            </summary>
            <param name="e">The event arguments</param>
            <param name="rowIndex">The index of the row containing the cell</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.ImageListCell.OnKeyUp(System.Windows.Forms.KeyEventArgs,System.Int32)">
            <summary>
            This is handled to raise the <see cref="E:System.Windows.Forms.DataGridView.CellClick"/> and <see cref="E:System.Windows.Forms.DataGridView.CellContentClick"/>
            events when editable and the Space key is released.
            </summary>
            <param name="e">The event arguments</param>
            <param name="rowIndex">The index of the row containing the cell</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.ImageListCell.OnMouseMove(System.Windows.Forms.DataGridViewCellMouseEventArgs)">
            <summary>
            Change the mouse pointer to a hand when the mouse moves over the image
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.ImageListCell.OnMouseLeave(System.Int32)">
            <summary>
            Change the mouse cursor back to the default when leaving the cell
            </summary>
            <param name="rowIndex">The row index of the cell</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.ImageListCell.GetCellImage(System.Object,System.Int32)">
            <summary>
            Gets the image to display in the cell
            </summary>
            <param name="value">The value to be use in determining the image</param>
            <param name="rowIndex">The index of the cell's parent row</param>
            <returns>The image that should be displayed in the cell</returns>
        </member>
        <member name="T:EWSoftware.ListControls.DataGridViewControls.ImageListColumn">
            <summary>
            This data grid view column contains <see cref="T:EWSoftware.ListControls.DataGridViewControls.ImageListCell"/> objects
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.ImageListColumn.Image">
            <summary>
            This property is not used and is hidden in the designer
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.ImageListColumn.ImageList">
            <summary>
            This is used to get or set the image list used for the column's cells
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.ImageListColumn.NullImage">
            <summary>
            This is used to get or set the image to display for null cells
            </summary>
            <value>If not set and <see cref="P:EWSoftware.ListControls.DataGridViewControls.ImageListColumn.NullImageIndex"/> is set to -1, the cell will appear blank.  This
            property is ignored if <c>NullImageIndex</c> is set to a value other than -1.</value>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.ImageListColumn.NullImageIndex">
            <summary>
            This is used to get or set the image index to use for null values
            </summary>
            <value>If set to -1 (the default), the <see cref="P:EWSoftware.ListControls.DataGridViewControls.ImageListColumn.NullImage"/> is used if it has been set.  If it is
            not set, the cell will appear blank.  If this is set to a value other than -1, the indicated image
            from the image list is used for null values.</value>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.ImageListColumn.NewRowImageIndex">
            <summary>
            This is used to get or set the image index to show for the new row cells
            </summary>
            <value>If set to -1 (the default), new rows will show the <see cref="P:EWSoftware.ListControls.DataGridViewControls.ImageListColumn.NullImage"/> if it has been set
            or a blank cell if not.  If set to a value other than -1, the image at the specified index will be
            shown in the new row.</value>
        </member>
        <member name="E:EWSoftware.ListControls.DataGridViewControls.ImageListColumn.MapValueToIndex">
            <summary>
            This event is raised when a cell needs to map a cell value to an image index
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.ImageListColumn.OnMapValueToIndex(EWSoftware.ListControls.DataGridViewControls.MapIndexEventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.DataGridViewControls.ImageListColumn.MapValueToIndex"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="E:EWSoftware.ListControls.DataGridViewControls.ImageListColumn.MapIndexToValue">
            <summary>
            This event is raised when a cell needs to map an image index to a cell value
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.ImageListColumn.OnMapIndexToValue(EWSoftware.ListControls.DataGridViewControls.MapIndexEventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.DataGridViewControls.ImageListColumn.MapIndexToValue"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.ImageListColumn.OriginalCursor">
            <summary>
            This returns the original data grid view cursor
            </summary>
            <remarks>This has to be at the column level as cells don't always get the correct cursor due to the
            way they are managed internally by the grid.</remarks>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.ImageListColumn.ImageList_RecreateHandle(System.Object,System.EventArgs)">
            <summary>
            Invalidate the column when the image list handle is recreated
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.ImageListColumn.ImageList_Disposed(System.Object,System.EventArgs)">
            <summary>
            Detach the image list when it is disposed
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.ImageListColumn.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks>The value type is <see cref="T:System.Object"/>.  16-bit and 32-bit integer values are assumed to be
            actual index values unless mapped to a different index.  Boolean values are mapped to 0 (false) and 1
            (true) unless mapped to a different index.  All other types must be mapped to an index using the
            <see cref="E:EWSoftware.ListControls.DataGridViewControls.ImageListColumn.MapValueToIndex"/> event.</remarks>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.ImageListColumn.Clone">
            <summary>
            This is used to clone the column
            </summary>
            <returns>A clone of the column</returns>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.ImageListColumn.ToString">
            <summary>
            Convert the column to its string description
            </summary>
            <returns>A string description of the column</returns>
        </member>
        <member name="T:EWSoftware.ListControls.DataGridViewControls.IndicatorCell">
            <summary>
            This data grid view cell type displays images from an image list in an on/off state based on the cell
            value.
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.IndicatorCell.IsClickable">
            <summary>
            This is used to get or set whether the images are clickable and will raise the
            <see cref="E:EWSoftware.ListControls.DataGridViewControls.IndicatorColumn.IndicatorClicked"/> event.
            </summary>
            <value>If true, the default, the images will raise the <see cref="E:EWSoftware.ListControls.DataGridViewControls.IndicatorColumn.IndicatorClicked"/>
            event and will display the hand cursor as the mouse moves over each image.  If false, the event is
            not raised when an image is clicked and the mouse cursor is not changed.</value>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.IndicatorCell.MouseImageIndex">
            <summary>
            This read-only property returns the index of the image currently under the mouse
            </summary>
            <value>Returns -1 if the mouse is not over an image or the index of the image</value>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.IndicatorCell.#ctor">
            <summary>
            Constructor.
            </summary>
            <remarks>The <see cref="T:System.ValueType"/> and <see cref="P:EWSoftware.ListControls.DataGridViewControls.BaseImageCell.FormattedValueType"/> are both
            <see cref="T:System.Object"/>.  The bits in a 16-bit or 32-bit integer value can be used as the on/off states
            for each image in the image list.</remarks>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.IndicatorCell.Clone">
            <summary>
            Clone the cell
            </summary>
            <returns>A clone of the cell</returns>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.IndicatorCell.GetPreferredSize(System.Drawing.Graphics,System.Windows.Forms.DataGridViewCellStyle,System.Int32,System.Drawing.Size)">
            <summary>
            Calculates the preferred size, in pixels, of the cell
            </summary>
            <param name="graphics">The graphics context for the cell</param>
            <param name="cellStyle">The cell style</param>
            <param name="rowIndex">The index of the cell's parent row</param>
            <param name="constraintSize">The cell's maximum allowable size</param>
            <returns>The preferred cell size in pixels</returns>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.IndicatorCell.GetContentBounds(System.Drawing.Graphics,System.Windows.Forms.DataGridViewCellStyle,System.Int32)">
            <summary>
            Returns the bounding rectangle that encloses the cell's content area, which is calculated using the
            specified graphics context and cell style.
            </summary>
            <param name="graphics">The graphics context</param>
            <param name="cellStyle">The cell style to apply to the cell</param>
            <param name="rowIndex">The index of the cell's parent row</param>
            <returns>The <see cref="T:System.Drawing.Rectangle"/> that bounds the cell's contents</returns>
            <remarks>For null cells, a default rectangle is returned so that mouse clicks near its center will
            initiate editing.</remarks>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.IndicatorCell.KeyDownUnsharesRow(System.Windows.Forms.KeyEventArgs,System.Int32)">
            <summary>
            Indicates whether the parent row is unshared if the user presses a key while the focus is on the cell
            </summary>
            <param name="e">The event arguments</param>
            <param name="rowIndex">The index of the row containing the cell</param>
            <returns>True if a digit 0 through 9 is hit and the Alt, Control, and Shift keys are not held down,
            otherwise false.</returns>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.IndicatorCell.KeyUpUnsharesRow(System.Windows.Forms.KeyEventArgs,System.Int32)">
            <summary>
            Indicates whether the parent row is unshared if the user releases a key while the focus is on the
            cell.
            </summary>
            <param name="e">The event arguments</param>
            <param name="rowIndex">The index of the row containing the cell</param>
            <returns>True if a digit 0 through 9 is released, otherwise false</returns>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.IndicatorCell.OnContentClick(System.Windows.Forms.DataGridViewCellEventArgs)">
            <summary>
            This is overridden to raise the <see cref="E:EWSoftware.ListControls.DataGridViewControls.IndicatorColumn.IndicatorClicked"/> event when an image
            is clicked.  The event is not raised if <see cref="P:EWSoftware.ListControls.DataGridViewControls.IndicatorCell.IsClickable"/> is set to false.
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.IndicatorCell.OnKeyDown(System.Windows.Forms.KeyEventArgs,System.Int32)">
            <summary>
            This is overridden to handle digit 0 through 9 key presses
            </summary>
            <param name="e">The event arguments</param>
            <param name="rowIndex">The index of the row containing the cell</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.IndicatorCell.OnKeyUp(System.Windows.Forms.KeyEventArgs,System.Int32)">
            <summary>
            This is handled to raise the <see cref="E:System.Windows.Forms.DataGridView.CellClick"/> and
            <see cref="E:System.Windows.Forms.DataGridView.CellContentClick"/> events when one of the digit keys 0 thorough 9 is
            released.
            </summary>
            <param name="e">The event arguments</param>
            <param name="rowIndex">The index of the row containing the cell</param>
            <remarks>To be more intuitive, one through nine equate to the first nine images and zero equates to
            the tenth image.</remarks>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.IndicatorCell.OnMouseMove(System.Windows.Forms.DataGridViewCellMouseEventArgs)">
            <summary>
            Change the mouse pointer to a hand when the mouse moves over one of the images
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.IndicatorCell.OnMouseLeave(System.Int32)">
            <summary>
            Change the mouse cursor back to the default when leaving the cell
            </summary>
            <param name="rowIndex">The row index of the cell</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.IndicatorCell.GetCellImage(System.Object,System.Int32)">
            <summary>
            Gets the image to display in the cell
            </summary>
            <param name="value">The value to be use in determining the image</param>
            <param name="rowIndex">The index of the cell's parent row</param>
            <returns>The image that should be displayed in the cell</returns>
        </member>
        <member name="T:EWSoftware.ListControls.DataGridViewControls.IndicatorClickEventArgs">
            <summary>
            This is used provide information about the image index that was clicked in an <see cref="T:EWSoftware.ListControls.DataGridViewControls.IndicatorColumn"/>
            cell.
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.IndicatorClickEventArgs.Column">
            <summary>
            This read-only property can be used to retrieve the column in which the event occurred.
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.IndicatorClickEventArgs.Row">
            <summary>
            This read-only property can be used to retrieve the row in which the event occurred
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.IndicatorClickEventArgs.ImageIndex">
            <summary>
            This read-only property can be used to retrieve the index of the image that was clicked in the cell
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.IndicatorClickEventArgs.Value">
            <summary>
            This can be used to get the cell value related to the event.  It can also be used to pass back a new
            cell value if the cell is editable.
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.IndicatorClickEventArgs.#ctor(System.Int32,System.Int32,System.Int32,System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="columnIndex">The column in which the event occurred</param>
            <param name="rowIndex">The row in which the event occurred</param>
            <param name="clickedIndex">The image index that was clicked</param>
            <param name="value">The cell value</param>
        </member>
        <member name="T:EWSoftware.ListControls.DataGridViewControls.IndicatorColumn">
            <summary>
            This data grid view column contains <see cref="T:EWSoftware.ListControls.DataGridViewControls.IndicatorCell"/> objects
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.IndicatorColumn.Image">
            <summary>
            This property is not used and is hidden in the designer
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.IndicatorColumn.ImageLayout">
            <summary>
            This property is not used and is hidden in the designer
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.IndicatorColumn.ImageList">
            <summary>
            This is used to get or set the image list used for the column's cells
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.IndicatorColumn.ImageSpacing">
            <summary>
            This is used to specify the horizontal spacing between images
            </summary>
            <value>By default, there is no spacing between images</value>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.IndicatorColumn.IsBitFlags">
            <summary>
            This is used to indicate that the bound field represents a set of bit flags used to indicate the
            on/off states of each image.
            </summary>
            <value>The column must be bound to a 16-bit or 32-bit integer for this to be used.  If set to false,
            the default, the <see cref="E:EWSoftware.ListControls.DataGridViewControls.IndicatorColumn.MapValueToIndicators"/> event must be used to specify the image states.</value>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.IndicatorColumn.IsClickable">
            <summary>
            This is used to get or set whether the images are clickable and will raise the
            <see cref="E:EWSoftware.ListControls.DataGridViewControls.IndicatorColumn.IndicatorClicked"/> event.
            </summary>
            <value>If true, the default, the images will raise the <see cref="E:EWSoftware.ListControls.DataGridViewControls.IndicatorColumn.IndicatorClicked"/> event and will
            display the hand cursor as the mouse moves over each image.  If false, the event is not raised when
            an image is clicked and the mouse cursor is not changed.</value>
        </member>
        <member name="E:EWSoftware.ListControls.DataGridViewControls.IndicatorColumn.MapValueToIndicators">
            <summary>
            This event is raised when a cell needs to map a cell value to a
            set of image states.
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.IndicatorColumn.OnMapValueToIndicators(EWSoftware.ListControls.DataGridViewControls.MapIndicatorEventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.DataGridViewControls.IndicatorColumn.MapValueToIndicators"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="E:EWSoftware.ListControls.DataGridViewControls.IndicatorColumn.IndicatorClicked">
            <summary>
            This event is raised when an image in the cell is clicked
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.IndicatorColumn.OnIndicatorClicked(EWSoftware.ListControls.DataGridViewControls.IndicatorClickEventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.DataGridViewControls.IndicatorColumn.IndicatorClicked"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.IndicatorColumn.OriginalCursor">
            <summary>
            This returns the original data grid view cursor
            </summary>
            <remarks>This has to be at the column level as cells don't always get the correct cursor due to the
            way they are managed internally by the grid.</remarks>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.IndicatorColumn.ImageList_RecreateHandle(System.Object,System.EventArgs)">
            <summary>
            Invalidate the column when the image list handle is recreated
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.IndicatorColumn.ImageList_Disposed(System.Object,System.EventArgs)">
            <summary>
            Detach the image list when it is disposed
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.IndicatorColumn.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks>The value type is <see cref="T:System.Object"/>.  The bits in a 16-bit or 32-bit integer value can be
            used as the on/off states for each image in the image list.</remarks>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.IndicatorColumn.Clone">
            <summary>
            This is used to clone the column
            </summary>
            <returns>A clone of the column</returns>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.IndicatorColumn.ToString">
            <summary>
            Convert the column to its string description
            </summary>
            <returns>A string description of the column</returns>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.IndicatorColumn.DrawImage(System.Object,System.Int32)">
            <summary>
            This is used to draw the cell image on behalf of the cell
            </summary>
            <param name="value">The current cell value</param>
            <param name="rowIndex">The cell's row index</param>
            <returns>The image to display or null if there is no image</returns>
        </member>
        <member name="T:EWSoftware.ListControls.DataGridViewControls.MapIndicatorEventArgs">
            <summary>
            This is used to map a cell value to a set of on/off states for drawing an <see cref="T:EWSoftware.ListControls.DataGridViewControls.IndicatorColumn"/>
            cell value.
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.MapIndicatorEventArgs.Column">
            <summary>
            This read-only property can be used to retrieve the column in which the event occurred
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.MapIndicatorEventArgs.Row">
            <summary>
            This read-only property can be used to retrieve the row in which the event occurred
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.MapIndicatorEventArgs.Value">
            <summary>
            The cell value related to the event
            </summary>
            <value>This represents the current cell value and can be used to determine the image states to return
            in <see cref="P:EWSoftware.ListControls.DataGridViewControls.MapIndicatorEventArgs.ImageStates"/>.
            </value>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.MapIndicatorEventArgs.ImageStates">
            <summary>
            The on/off states of each image index
            </summary>
            <value>This will contain one entry for each image in the image list.  By default, they are all false.
            Set an entry to true to draw the corresponding image index in the on/enable state.</value>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.MapIndicatorEventArgs.#ctor(System.Int32,System.Int32,System.Object,System.Collections.Generic.IList{System.Boolean})">
            <summary>
            Constructor
            </summary>
            <param name="columnIndex">The column in which the event occurred</param>
            <param name="rowIndex">The row in which the event occurred</param>
            <param name="value">The cell value</param>
            <param name="states">An enumerable list of the image index states</param>
        </member>
        <member name="T:EWSoftware.ListControls.DataGridViewControls.MapRatingEventArgs">
            <summary>
            This is used to map a cell value to a rating value and vice versa for the <see cref="T:EWSoftware.ListControls.DataGridViewControls.RatingColumn"/>
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.MapRatingEventArgs.Column">
            <summary>
            This read-only property can be used to retrieve the column in which the event occurred
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.MapRatingEventArgs.Row">
            <summary>
            This read-only property can be used to retrieve the row in which the event occurred
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.MapRatingEventArgs.Value">
            <summary>
            The cell value related to the event
            </summary>
            <value>For the <see cref="E:EWSoftware.ListControls.DataGridViewControls.RatingColumn.MapValueToRating"/> event, this is used to pass the value that
            needs mapping to a rating.  For the <see cref="E:EWSoftware.ListControls.DataGridViewControls.RatingColumn.MapRatingToValue"/> event, it is used to
            return the value that should be stored in the cell for the specified <see cref="P:EWSoftware.ListControls.DataGridViewControls.MapRatingEventArgs.Rating"/>.</value>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.MapRatingEventArgs.Rating">
            <summary>
            The rating related to the event
            </summary>
            <value>For the <see cref="E:EWSoftware.ListControls.DataGridViewControls.RatingColumn.MapRatingToValue"/> event, this is used to pass the rating
            that needs mapping to a cell value.  For the <see cref="E:EWSoftware.ListControls.DataGridViewControls.RatingColumn.MapValueToRating"/> event, it is
            used to return the rating that should be shown in the cell for the specified <see cref="P:EWSoftware.ListControls.DataGridViewControls.MapRatingEventArgs.Value"/>.</value>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.MapRatingEventArgs.#ctor(System.Int32,System.Int32,System.Object,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="columnIndex">The column in which the event occurred</param>
            <param name="rowIndex">The row in which the event occurred</param>
            <param name="cellValue">The cell value</param>
            <param name="ratingValue">The rating value</param>
        </member>
        <member name="T:EWSoftware.ListControls.DataGridViewControls.MapIndexEventArgs">
            <summary>
            This is used to map a cell value to an image list index and vice versa for the <see cref="T:EWSoftware.ListControls.DataGridViewControls.ImageListColumn"/>
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.MapIndexEventArgs.Column">
            <summary>
            This read-only property can be used to retrieve the column in which the event occurred
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.MapIndexEventArgs.Row">
            <summary>
            This read-only property can be used to retrieve the row in which the event occurred
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.MapIndexEventArgs.Value">
            <summary>
            The cell value related to the event
            </summary>
            <value>For the <see cref="E:EWSoftware.ListControls.DataGridViewControls.ImageListColumn.MapValueToIndex"/> event, this is used to pass the value
            that needs mapping to an image index.  For the <see cref="E:EWSoftware.ListControls.DataGridViewControls.ImageListColumn.MapIndexToValue"/> event,
            it is used to return the value that should be stored in the cell for the specified
            <see cref="P:EWSoftware.ListControls.DataGridViewControls.MapIndexEventArgs.Index"/>.</value>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.MapIndexEventArgs.Index">
            <summary>
            The image list index related to the event
            </summary>
            <value>For the <see cref="E:EWSoftware.ListControls.DataGridViewControls.ImageListColumn.MapIndexToValue"/> event, this is used to pass the image
            index that needs mapping to a cell value.  For the <see cref="E:EWSoftware.ListControls.DataGridViewControls.ImageListColumn.MapValueToIndex"/>
            event, it is used to return the image index that should be shown in the cell for the specified
            <see cref="P:EWSoftware.ListControls.DataGridViewControls.MapIndexEventArgs.Value"/>.</value>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.MapIndexEventArgs.#ctor(System.Int32,System.Int32,System.Object,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="columnIndex">The column in which the event occurred</param>
            <param name="rowIndex">The row in which the event occurred</param>
            <param name="value">The cell value</param>
            <param name="imageIndex">The image index</param>
        </member>
        <member name="T:EWSoftware.ListControls.DataGridViewControls.MultiColumnComboBoxCell">
            <summary>
            This data grid view cell type displays a <see cref="T:EWSoftware.ListControls.MultiColumnComboBox"/>
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.MultiColumnComboBoxCell.DropDownWidth">
            <summary>
            Gets or sets the width of the of the drop-down portion of the combo box
            </summary>
            <value>If set to zero, it will default to an appropriate width based on the
            <see cref="P:EWSoftware.ListControls.MultiColumnComboBox.DropDownFormat"/> options.</value>
            <exception cref="T:System.ArgumentException">This is thrown if the width is less than zero.</exception>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.MultiColumnComboBoxCell.EditType">
            <summary>
            Gets the type of the cell's hosted editing control
            </summary>
            <value>This always returns <see cref="T:EWSoftware.ListControls.DataGridViewControls.MultiColumnComboBoxEditingControl"/></value>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.MultiColumnComboBoxCell.Clone">
            <summary>
            Clone the cell
            </summary>
            <returns>A clone of the cell</returns>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.MultiColumnComboBoxCell.InitializeEditingControl(System.Int32,System.Object,System.Windows.Forms.DataGridViewCellStyle)">
            <summary>
            This initializes the control used to edit the cell
            </summary>
            <param name="rowIndex">The zero-based row index of the cell's location.</param>
            <param name="initialFormattedValue">An object that represents the value displayed by the cell when
            editing is started.</param>
            <param name="dataGridViewCellStyle">The cell style.</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.MultiColumnComboBoxCell.ToString">
            <summary>
            Convert the cell to its string form
            </summary>
            <returns>A description of the cell</returns>
        </member>
        <member name="T:EWSoftware.ListControls.DataGridViewControls.MultiColumnComboBoxColumn">
            <summary>
            This data grid view column contains <see cref="T:EWSoftware.ListControls.DataGridViewControls.MultiColumnComboBoxCell"/> objects
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.MultiColumnComboBoxColumn.ColumnHeadersVisible">
            <summary>
            Set or get whether column headers are visible
            </summary>
            <value>They are not visible by default</value>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.MultiColumnComboBoxColumn.RowHeadersVisible">
            <summary>
            Set or get whether row headers are visible
            </summary>
            <value>They are not visible by default</value>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.MultiColumnComboBoxColumn.DefaultNullText">
            <summary>
            Set or get the default null text for all columns
            </summary>
            <value>The default is an empty string.  The value is applied at runtime and its effect is not visible
            on columns during design time.  It replaces the null text for any column with its <c>NullText</c>
            property set to "(null)".</value>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.MultiColumnComboBoxColumn.DropDownWidth">
            <summary>
            Gets or sets the width of the of the drop-down portion of the combo box
            </summary>
            <value>If set to zero, it will default to an appropriate width based on the formatting options</value>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.MultiColumnComboBoxColumn.ColumnFilter">
            <summary>
            This gets the <see cref="T:EWSoftware.ListControls.StringCollection"/> used to filter the columns displayed by the drop-down
            portion of the combo box.
            </summary>
            <value>This is a quick way to filter the drop-down to a specific set of columns without defining
            column definitions using the <see cref="P:EWSoftware.ListControls.MultiColumnComboBox.DropDownFormat">DropDownFormat.GridColumnStyles</see>
            property collection.  If empty, no filtering takes place.</value>
            <example>
            <code language="cs">
            cbocVendor.DisplayMember = "VendorName";
            cbocVendor.ValueMember = "VendorKey";
            cbocVendor.ColumnFilter.AddRange(new string[] { "VendorName", "Contact" });
            cbocVendor.DataSource = GetVendors();
            </code>
            <code language="vbnet">
            cbocVendor.DisplayMember = "VendorName"
            cbocVendor.ValueMember = "VendorKey"
            cbocVendor.ColumnFilter.AddRange(New String() { "VendorName", "Contact" })
            cbocVendor.DataSource = GetVendors()
            </code>
            </example>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.MultiColumnComboBoxColumn.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.MultiColumnComboBoxColumn.Clone">
            <summary>
            This is used to clone the column.
            </summary>
            <returns>A clone of the column</returns>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.MultiColumnComboBoxColumn.ToString">
            <summary>
            Convert the column to its string description
            </summary>
            <returns>A string description of the column</returns>
        </member>
        <member name="T:EWSoftware.ListControls.DataGridViewControls.MultiColumnComboBoxEditingControl">
            <summary>
            This derived version of the multi-column combo box is hosted within the <see cref="T:EWSoftware.ListControls.DataGridViewControls.MultiColumnComboBoxCell"/>
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.MultiColumnComboBoxEditingControl.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.MultiColumnComboBoxEditingControl.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            This is overridden to notify the data grid view of value changes on the first key press
            </summary>
            <param name="e">The event arguments</param>
            <remarks>If the first key auto-completes the default entry, it won't see the change so we must force
            it.</remarks>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.MultiColumnComboBoxEditingControl.OnSelectedIndexChanged(System.EventArgs)">
            <summary>
            This is overridden to notify the data grid view of value changes
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.MultiColumnComboBoxEditingControl.ApplyCellStyleToEditingControl(System.Windows.Forms.DataGridViewCellStyle)">
            <summary>
            This applies the cell style to the editing control so that they are consistent
            </summary>
            <param name="dataGridViewCellStyle">The cell style to apply</param>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.MultiColumnComboBoxEditingControl.EditingControlDataGridView">
            <summary>
            Gets or sets the data grid view that contains the owning cell.
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.MultiColumnComboBoxEditingControl.EditingControlFormattedValue">
            <summary>
            Gets or sets the formatted value of the cell being modified by the editor
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.MultiColumnComboBoxEditingControl.EditingControlRowIndex">
            <summary>
            Gets or sets the index of the hosting cell's parent row
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.MultiColumnComboBoxEditingControl.EditingControlValueChanged">
            <summary>
            Gets or sets a value indicating whether the value of the editing control differs from the value of
            the hosting cell.
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.MultiColumnComboBoxEditingControl.EditingControlWantsInputKey(System.Windows.Forms.Keys,System.Boolean)">
            <summary>
            This determines whether the specified key is a regular input key that the editing control should
            process or a special key that the <see cref="T:System.Windows.Forms.DataGridView"/> should process.
            </summary>
            <param name="keyData">The key that was pressed.</param>
            <param name="dataGridViewWantsInputKey">True when the <see cref="T:System.Windows.Forms.DataGridView"/> wants to process the
            key; otherwise, false.</param>
            <returns>True if the specified key is a regular input key that should be handled by the editing
            control; otherwise, false.</returns>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.MultiColumnComboBoxEditingControl.EditingPanelCursor">
            <summary>
            Gets the cursor used when the mouse pointer is over the <see cref="P:System.Windows.Forms.DataGridView.EditingPanel"/> but
            not over the editing control.
            </summary>
            <value>This always returns the default cursor</value>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.MultiColumnComboBoxEditingControl.GetEditingControlFormattedValue(System.Windows.Forms.DataGridViewDataErrorContexts)">
            <summary>
            Retrieves the formatted value of the cell
            </summary>
            <param name="context">A bitwise combination of <see cref="T:System.Windows.Forms.DataGridViewDataErrorContexts" /> values
            that specifies the context in which the data is needed.</param>
            <returns>An object that represents the formatted version of the cell contents</returns>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.MultiColumnComboBoxEditingControl.PrepareEditingControlForEdit(System.Boolean)">
            <summary>
            Prepares the currently selected cell for editing
            </summary>
            <param name="selectAll">True to select all text in the cell, false to not select all text</param>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.MultiColumnComboBoxEditingControl.RepositionEditingControlOnValueChange">
            <summary>
            Gets or sets a value indicating whether the cell contents need to be repositioned whenever the value
            changes.
            </summary>
            <remarks>This always returns false</remarks>
        </member>
        <member name="T:EWSoftware.ListControls.DataGridViewControls.RatingCell">
            <summary>
            This data grid view cell type shows a set of images (stars by default) that represent a rating similar
            to the one found in Windows Media Player.
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.RatingCell.MouseRating">
            <summary>
            This read-only property returns the rating currently under the mouse
            </summary>
            <value>Returns -1 if the mouse is not over a rating or the rating value</value>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.RatingCell.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks>The <see cref="T:System.ValueType"/> and <see cref="P:EWSoftware.ListControls.DataGridViewControls.BaseImageCell.FormattedValueType"/> are both
            <see cref="T:System.Object"/>.  16-bit and 32-bit integer values are assumed to be actual rating values
            between zero and <see cref="P:EWSoftware.ListControls.DataGridViewControls.RatingColumn.MaximumRating"/> unless mapped to a different rating value.
            All other types must be mapped to a rating using the <see cref="E:EWSoftware.ListControls.DataGridViewControls.RatingColumn.MapValueToRating"/>
            event.</remarks>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.RatingCell.Clone">
            <summary>
            Clone the cell
            </summary>
            <returns>A clone of the cell</returns>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.RatingCell.GetPreferredSize(System.Drawing.Graphics,System.Windows.Forms.DataGridViewCellStyle,System.Int32,System.Drawing.Size)">
            <summary>
            Calculates the preferred size, in pixels, of the cell
            </summary>
            <param name="graphics">The graphics context for the cell</param>
            <param name="cellStyle">The cell style</param>
            <param name="rowIndex">The index of the cell's parent row</param>
            <param name="constraintSize">The cell's maximum allowable size</param>
            <returns>The preferred cell size in pixels</returns>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.RatingCell.GetContentBounds(System.Drawing.Graphics,System.Windows.Forms.DataGridViewCellStyle,System.Int32)">
            <summary>
            Returns the bounding rectangle that encloses the cell's content area, which is calculated using the
            specified graphics context and cell style.
            </summary>
            <param name="graphics">The graphics context</param>
            <param name="cellStyle">The cell style to apply to the cell</param>
            <param name="rowIndex">The index of the cell's parent row</param>
            <returns>The <see cref="T:System.Drawing.Rectangle"/> that bounds the cell's contents</returns>
            <remarks>For null cells, a default rectangle is returned so that mouse clicks near its center will
            initiate editing.</remarks>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.RatingCell.KeyDownUnsharesRow(System.Windows.Forms.KeyEventArgs,System.Int32)">
            <summary>
            Indicates whether the parent row is unshared if the user presses a key while the focus is on the cell
            </summary>
            <param name="e">The event arguments</param>
            <param name="rowIndex">The index of the row containing the cell</param>
            <returns>True if a digit 0 through 9 or + or - is hit and the Alt, Control, and Shift keys are not
            held down, otherwise false.</returns>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.RatingCell.KeyUpUnsharesRow(System.Windows.Forms.KeyEventArgs,System.Int32)">
            <summary>
            Indicates whether the parent row is unshared if the user releases a key while the focus is on the
            cell.
            </summary>
            <param name="e">The event arguments</param>
            <param name="rowIndex">The index of the row containing the cell</param>
            <returns>True if a digit 0 through 9 or + or - is released, otherwise false</returns>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.RatingCell.OnContentClick(System.Windows.Forms.DataGridViewCellEventArgs)">
            <summary>
            This is overridden to update the cell value with a new rating value when it is clicked
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.RatingCell.OnKeyDown(System.Windows.Forms.KeyEventArgs,System.Int32)">
            <summary>
            This is overridden to handle digit 0 through 9 and +/- key presses
            </summary>
            <param name="e">The event arguments</param>
            <param name="rowIndex">The index of the row containing the cell</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.RatingCell.OnKeyUp(System.Windows.Forms.KeyEventArgs,System.Int32)">
            <summary>
            This is handled to raise the <see cref="E:System.Windows.Forms.DataGridView.CellClick"/> and
            <see cref="E:System.Windows.Forms.DataGridView.CellContentClick"/> events when one of the digit keys 0 thorough 9
            or + or - is released.
            </summary>
            <param name="e">The event arguments</param>
            <param name="rowIndex">The index of the row containing the cell</param>
            <remarks>Digits 0 through 9 can be used to set a rating in that range.  The plus (+) and minus (-)
            keys can be used to adjust the current rating up or down by one.</remarks>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.RatingCell.OnMouseMove(System.Windows.Forms.DataGridViewCellMouseEventArgs)">
            <summary>
            Change the mouse pointer to a hand when the mouse moves over one of the images
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.RatingCell.OnMouseLeave(System.Int32)">
            <summary>
            Change the mouse cursor back to the default when leaving the cell
            </summary>
            <param name="rowIndex">The row index of the cell</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.RatingCell.GetCellImage(System.Object,System.Int32)">
            <summary>
            Gets the image to display in the cell
            </summary>
            <param name="value">The value to be use in determining the image</param>
            <param name="rowIndex">The index of the cell's parent row</param>
            <returns>The image that should be displayed in the cell</returns>
        </member>
        <member name="T:EWSoftware.ListControls.DataGridViewControls.RatingColumn">
            <summary>
            This data grid view column contains <see cref="T:EWSoftware.ListControls.DataGridViewControls.RatingCell"/> objects
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.RatingColumn.Image">
            <summary>
            This property is not used and is hidden in the designer
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.RatingColumn.ImageLayout">
            <summary>
            This property is not used and is hidden in the designer
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.RatingColumn.MaximumRating">
            <summary>
            This gets or sets the maximum rating and thus the of images drawn in the cells
            </summary>
            <value>The default is five.</value>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.RatingColumn.ImageList">
            <summary>
            This is used to get or set the image list used for the column's cells
            </summary>
            <value>If not set, a default set of star images is used.  If set, the image list should contain
            three images.  The first is for an empty/unused image, the second is for a filled/used image, and
            the third is for a hot image drawn when the mouse is over the cell images.</value>
        </member>
        <member name="E:EWSoftware.ListControls.DataGridViewControls.RatingColumn.MapValueToRating">
            <summary>
            This event is raised when a cell needs to map a cell value to a rating
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.RatingColumn.OnMapValueToRating(EWSoftware.ListControls.DataGridViewControls.MapRatingEventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.DataGridViewControls.RatingColumn.MapValueToRating"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="E:EWSoftware.ListControls.DataGridViewControls.RatingColumn.MapRatingToValue">
            <summary>
            This event is raised when a cell needs to map a rating to a cell value
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.RatingColumn.OnMapRatingToValue(EWSoftware.ListControls.DataGridViewControls.MapRatingEventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.DataGridViewControls.RatingColumn.MapRatingToValue"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.RatingColumn.#cctor">
            <summary>
            Static constructor.  This loads the default images.
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.RatingColumn.OriginalCursor">
            <summary>
            This returns the original data grid view cursor
            </summary>
            <remarks>This has to be at the column level as cells don't always get the correct cursor due to the
            way they are managed internally by the grid.</remarks>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.RatingColumn.ImageListInternal">
            <summary>
            Return the user-supplied image list if not null or the default image list if it is null
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.RatingColumn.ImageList_RecreateHandle(System.Object,System.EventArgs)">
            <summary>
            Invalidate the column when the image list handle is recreated
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.RatingColumn.ImageList_Disposed(System.Object,System.EventArgs)">
            <summary>
            Detach the image list when it is disposed
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.RatingColumn.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks>The value type is <see cref="T:System.Object"/>.  16-bit and 32-bit integer values are assumed to be
            actual rating values between zero and <see cref="P:EWSoftware.ListControls.DataGridViewControls.RatingColumn.MaximumRating" /> unless mapped to a different
            rating value.  All other types must be mapped to a rating using the <see cref="E:EWSoftware.ListControls.DataGridViewControls.RatingColumn.MapValueToRating"/>
            event.</remarks>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.RatingColumn.Clone">
            <summary>
            This is used to clone the column
            </summary>
            <returns>A clone of the column</returns>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.RatingColumn.ToString">
            <summary>
            Convert the column to its string description
            </summary>
            <returns>A string description of the column</returns>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.RatingColumn.DrawImage(System.Object,System.Int32,System.Int32)">
            <summary>
            This is used to draw the cell image on behalf of the cell
            </summary>
            <param name="value">The current cell value</param>
            <param name="rowIndex">The cell's row index</param>
            <param name="mouseIndex">The index under the mouse or -1 if the mouse isn't over an index</param>
            <returns>The image to display or null if there is no image</returns>
        </member>
        <member name="T:EWSoftware.ListControls.DataGridViewControls.UserControlComboBoxCell">
            <summary>
            This data grid view cell type displays a <see cref="T:EWSoftware.ListControls.UserControlComboBox"/>
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.UserControlComboBoxCell.EditType">
            <summary>
            Gets the type of the cell's hosted editing control
            </summary>
            <value>This always returns <see cref="T:EWSoftware.ListControls.DataGridViewControls.UserControlComboBoxEditingControl"/></value>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.UserControlComboBoxCell.Clone">
            <summary>
            Clone the cell
            </summary>
            <returns>A clone of the cell</returns>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.UserControlComboBoxCell.InitializeEditingControl(System.Int32,System.Object,System.Windows.Forms.DataGridViewCellStyle)">
            <summary>
            This initializes the control used to edit the cell
            </summary>
            <param name="rowIndex">The zero-based row index of the cell's location.</param>
            <param name="initialFormattedValue">An object that represents the value displayed by the cell when
            editing is started.</param>
            <param name="dataGridViewCellStyle">The cell style.</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.UserControlComboBoxCell.ToString">
            <summary>
            Convert the cell to its string form
            </summary>
            <returns>A description of the cell</returns>
        </member>
        <member name="T:EWSoftware.ListControls.DataGridViewControls.UserControlComboBoxColumn">
            <summary>
            This data grid view column contains <see cref="T:EWSoftware.ListControls.DataGridViewControls.UserControlComboBoxCell"/> objects
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.UserControlComboBoxColumn.DropDownControl">
            <summary>
            The user control type to use for the drop-down
            </summary>
            <remarks>This property must be set in order for the drop-down to be of any use</remarks>
            <exception cref="T:System.ArgumentException">This is thrown if the specified type is not derived from
            <see cref="P:EWSoftware.ListControls.DataGridViewControls.UserControlComboBoxColumn.DropDownControl"/>.</exception>
            <example>
            <code language="cs">
            // TreeViewDropDown is a user control derived from DropDownControl
            ucCombo.DropDownControl = typeof(TreeViewDropDown);
            </code>
            <code language="vbnet">
            ' TreeViewDropDown is a user control derived from DropDownControl
            ucCombo.DropDownControl = GetType(TreeViewDropDown)
            </code>
            </example>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.UserControlComboBoxColumn.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.UserControlComboBoxColumn.Clone">
            <summary>
            This is used to clone the column
            </summary>
            <returns>A clone of the column</returns>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.UserControlComboBoxColumn.ToString">
            <summary>
            Convert the column to its string description
            </summary>
            <returns>A string description of the column</returns>
        </member>
        <member name="T:EWSoftware.ListControls.DataGridViewControls.UserControlComboBoxEditingControl">
            <summary>
            This derived version of the user control combo box is hosted within the <see cref="T:EWSoftware.ListControls.DataGridViewControls.UserControlComboBoxCell"/>
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.UserControlComboBoxEditingControl.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.UserControlComboBoxEditingControl.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            This is overridden to notify the data grid view of value changes on the first key press
            </summary>
            <param name="e">The event arguments</param>
            <remarks>If the first key auto-completes the default entry, it won't see the change so we must force
            it.</remarks>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.UserControlComboBoxEditingControl.OnSelectedIndexChanged(System.EventArgs)">
            <summary>
            This is overridden to notify the data grid view of value changes
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.UserControlComboBoxEditingControl.ApplyCellStyleToEditingControl(System.Windows.Forms.DataGridViewCellStyle)">
            <summary>
            This applies the cell style to the editing control so that they are consistent
            </summary>
            <param name="dataGridViewCellStyle">The cell style to apply</param>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.UserControlComboBoxEditingControl.EditingControlDataGridView">
            <summary>
            Gets or sets the data grid view that contains the owning cell.
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.UserControlComboBoxEditingControl.EditingControlFormattedValue">
            <summary>
            Gets or sets the formatted value of the cell being modified by the editor
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.UserControlComboBoxEditingControl.EditingControlRowIndex">
            <summary>
            Gets or sets the index of the hosting cell's parent row
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.UserControlComboBoxEditingControl.EditingControlValueChanged">
            <summary>
            Gets or sets a value indicating whether the value of the editing control differs from the value of
            the hosting cell.
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.UserControlComboBoxEditingControl.EditingControlWantsInputKey(System.Windows.Forms.Keys,System.Boolean)">
            <summary>
            This determines whether the specified key is a regular input key that the editing control should
            process or a special key that the <see cref="T:System.Windows.Forms.DataGridView"/> should process.
            </summary>
            <param name="keyData">The key that was pressed.</param>
            <param name="dataGridViewWantsInputKey">True when the <see cref="T:System.Windows.Forms.DataGridView"/> wants to process the
            key; otherwise, false.</param>
            <returns>True if the specified key is a regular input key that should be handled by the editing
            control; otherwise, false.</returns>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.UserControlComboBoxEditingControl.EditingPanelCursor">
            <summary>
            Gets the cursor used when the mouse pointer is over the <see cref="P:System.Windows.Forms.DataGridView.EditingPanel"/> but
            not over the editing control.
            </summary>
            <value>This always returns the default cursor</value>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.UserControlComboBoxEditingControl.GetEditingControlFormattedValue(System.Windows.Forms.DataGridViewDataErrorContexts)">
            <summary>
            Retrieves the formatted value of the cell
            </summary>
            <param name="context">A bitwise combination of <see cref="T:System.Windows.Forms.DataGridViewDataErrorContexts" /> values
            that specifies the context in which the data is needed.</param>
            <returns>An object that represents the formatted version of the cell contents</returns>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridViewControls.UserControlComboBoxEditingControl.PrepareEditingControlForEdit(System.Boolean)">
            <summary>
            Prepares the currently selected cell for editing
            </summary>
            <param name="selectAll">True to select all text in the cell, false to not select all text</param>
        </member>
        <member name="P:EWSoftware.ListControls.DataGridViewControls.UserControlComboBoxEditingControl.RepositionEditingControlOnValueChange">
            <summary>
            Gets or sets a value indicating whether the cell contents need to be repositioned whenever the value
            changes.
            </summary>
            <remarks>This always returns false.</remarks>
        </member>
        <member name="T:EWSoftware.ListControls.BaseListControl">
            <summary>
            This is the abstract base list control class used to contain the common item collection and data binding
            elements for many of the list controls in this library.
            </summary>
            <remarks>This is a complete reimplementation of the standard .NET <c>System.Windows.Forms.ListControl</c>
            class.  Its main differences are that it is derived from <c>UserControl</c> instead of <c>Control</c>, it
            fixes several bugs present in the Windows Forms base list control class, and it also exposes more
            functionality that is hidden in the Windows Forms base list control class so that it is easier to derive
            new list control types from this one.</remarks>
        </member>
        <member name="T:EWSoftware.ListControls.BaseListControl.ItemComparer">
            <summary>
            This is a custom comparer class for the object collection so that items in the collection can be
            sorted in ascending or descending order.
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.BaseListControl.ItemComparer.#ctor(EWSoftware.ListControls.BaseListControl)">
            <summary>
            Constructor
            </summary>
            <param name="lc">The list control to which the comparer belongs</param>
        </member>
        <member name="M:EWSoftware.ListControls.BaseListControl.ItemComparer.Compare(System.Object,System.Object)">
            <summary>
            Compare two list control entries
            </summary>
            <param name="x">The first object</param>
            <param name="y">The second object</param>
            <returns>Returns a negative value if x is less than y, zero if they are equal, or a positive
            value if x is greater than y.  The results are inverted if the sort order is descending.  If the
            sort order is set to <c>None</c> all items are treated as equal.</returns>
        </member>
        <member name="T:EWSoftware.ListControls.BaseListControl.ObjectCollection">
            <summary>
            This object collection is used to hold items for the list controls and is sortable in ascending or
            descending order.
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.BaseListControl.ObjectCollection.System#Collections#ICollection#IsSynchronized">
            <summary>
            This is used to get whether or not the collection is synchronized
            </summary>
            <value>Always returns false (not synchronized)</value>
        </member>
        <member name="P:EWSoftware.ListControls.BaseListControl.ObjectCollection.System#Collections#ICollection#SyncRoot">
            <summary>
            Returns an object that can be used to synchronize the collection
            </summary>
            <value>Always returns a reference to itself</value>
        </member>
        <member name="P:EWSoftware.ListControls.BaseListControl.ObjectCollection.System#Collections#IList#IsFixedSize">
            <summary>
            This is used to get whether or not the collection is of a fixed size
            </summary>
            <value>Always returns false as the collection size varies</value>
        </member>
        <member name="P:EWSoftware.ListControls.BaseListControl.ObjectCollection.Comparer">
            <summary>
            This is used to get an <see cref="T:System.Collections.IComparer"/> instance that can be used to sort the collection
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.BaseListControl.ObjectCollection.Count">
            <summary>
            This is used to get a count of the items in the collection
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.BaseListControl.ObjectCollection.InnerList">
            <summary>
            This is used to get a reference to the inner list
            </summary>
            <value>The collection uses an <see cref="T:System.Collections.ArrayList"/> to hold the collection objects</value>
        </member>
        <member name="P:EWSoftware.ListControls.BaseListControl.ObjectCollection.IsReadOnly">
            <summary>
            This is used to get whether or not the collection is read-only
            </summary>
            <value>Always returns false as the collection is always editable</value>
        </member>
        <member name="P:EWSoftware.ListControls.BaseListControl.ObjectCollection.Item(System.Int32)">
            <summary>
            This is used to set or get items by index position
            </summary>
            <param name="index">The index position of the item to set or get</param>
            <exception cref="T:System.ArgumentOutOfRangeException">This is thrown if the index value is not within the
            bounds of the collection.</exception>
            <exception cref="T:System.ArgumentException">This is thrown if an attempt is made to set an item when a
            data source is in use.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">This is thrown if the index value is not within the
            bounds of the collection.</exception>
        </member>
        <member name="M:EWSoftware.ListControls.BaseListControl.ObjectCollection.#ctor(EWSoftware.ListControls.BaseListControl)">
            <summary>
            Constructor
            </summary>
            <param name="lc">The list control to which the collection belongs</param>
        </member>
        <member name="M:EWSoftware.ListControls.BaseListControl.ObjectCollection.Add(System.Object)">
            <summary>
            Add an item to the collection
            </summary>
            <param name="item">The item to add</param>
            <exception cref="T:System.ArgumentNullException">This is thrown if the item is null</exception>
            <exception cref="T:System.ArgumentException">This is thrown if an attempt is made to add an item to the
            collection when a data source is in use.</exception>
            <returns>The index of the added item</returns>
        </member>
        <member name="M:EWSoftware.ListControls.BaseListControl.ObjectCollection.System#Collections#IList#Add(System.Object)">
            <summary>
            <see cref="T:System.Collections.IList"/> implementation to add an item to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:EWSoftware.ListControls.BaseListControl.ObjectCollection.AddRange(System.Object[])">
            <summary>
            Add a range of items to the collection from an array
            </summary>
            <param name="items">The items to add to the collection</param>
            <exception cref="T:System.ArgumentException">This is thrown if an attempt is made to add an item to the
            collection when a data source is in use.</exception>
        </member>
        <member name="M:EWSoftware.ListControls.BaseListControl.ObjectCollection.AddRangeInternal(System.Collections.IList)">
            <summary>
            Add a range of items to the collection from an <see cref="T:System.Collections.IList"/>
            </summary>
            <exception cref="T:System.ArgumentNullException">This is thrown if the items reference is null or any item
            in the collection is null.</exception>
        </member>
        <member name="M:EWSoftware.ListControls.BaseListControl.ObjectCollection.Clear">
            <summary>
            Clear all items from the collection
            </summary>
            <exception cref="T:System.ArgumentException">This is thrown if an attempt is made to clear items in the
            collection when a data source is in use.</exception>
        </member>
        <member name="M:EWSoftware.ListControls.BaseListControl.ObjectCollection.ClearInternal(System.Boolean)">
            <summary>
            Clear all items from the collection and reset the selected item
            </summary>
            <param name="resetSelIdx">True to reset the selected index, false to leave it alone</param>
        </member>
        <member name="M:EWSoftware.ListControls.BaseListControl.ObjectCollection.Contains(System.Object)">
            <summary>
            Check to see if a value exists in the collection
            </summary>
            <param name="value">The value for which to look</param>
            <returns>True if it is in the collection, false if not</returns>
        </member>
        <member name="M:EWSoftware.ListControls.BaseListControl.ObjectCollection.CopyTo(System.Object[],System.Int32)">
            <summary>
            Copy the collection items to an array
            </summary>
            <param name="dest">The destination array</param>
            <param name="startIndex">The starting index from which to copy</param>
        </member>
        <member name="M:EWSoftware.ListControls.BaseListControl.ObjectCollection.GetEnumerator">
            <summary>
            Get an enumerator for the collection
            </summary>
            <returns>An enumerator for the collection</returns>
        </member>
        <member name="M:EWSoftware.ListControls.BaseListControl.ObjectCollection.IndexOf(System.Object)">
            <summary>
            Get the index of the specified object in the collection
            </summary>
            <param name="value">The value for which to get the index</param>
            <returns>The index of the item or -1 if not found</returns>
            <exception cref="T:System.ArgumentNullException">This is thrown if the item is null</exception>
        </member>
        <member name="M:EWSoftware.ListControls.BaseListControl.ObjectCollection.Insert(System.Int32,System.Object)">
            <summary>
            Insert a value into the collection at the specified index
            </summary>
            <param name="index">The index at which to insert the item</param>
            <param name="value">The value to insert</param>
            <remarks>If the collection is sorted, the value is added to the collection and the collection is
            resorted.  The value may or may not end up at the requested index.</remarks>
            <exception cref="T:System.ArgumentNullException">This is thrown if the value is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">This is thrown if the index value is not within the
            bounds of the collection.</exception>
            <exception cref="T:System.ArgumentException">This is thrown if an attempt is made to add a value to the
            collection when a data source is in use.</exception>
        </member>
        <member name="M:EWSoftware.ListControls.BaseListControl.ObjectCollection.Remove(System.Object)">
            <summary>
            Remove the specified value from the collection
            </summary>
            <param name="value">The value to remove</param>
        </member>
        <member name="M:EWSoftware.ListControls.BaseListControl.ObjectCollection.RemoveAt(System.Int32)">
            <summary>
            Remove the item at the specified index from the collection
            </summary>
            <param name="index">The index of the item to remove</param>
            <exception cref="T:System.ArgumentOutOfRangeException">This is thrown if the index value is not within the
            bounds of the collection.</exception>
            <exception cref="T:System.ArgumentException">This is thrown if an attempt is made to remove an item from
            the collection when a data source is in use.</exception>
        </member>
        <member name="M:EWSoftware.ListControls.BaseListControl.ObjectCollection.SetItemInternal(System.Int32,System.Object)">
            <summary>
            Store an item in the collection at the specified index
            </summary>
            <param name="index">The index at which to insert the item</param>
            <param name="item">The item to insert</param>
            <exception cref="T:System.ArgumentNullException">This is thrown if the item is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">This is thrown if the index value is not within the
            bounds of the collection.</exception>
        </member>
        <member name="M:EWSoftware.ListControls.BaseListControl.ObjectCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            <see cref="T:System.Collections.ICollection"/> implementation to copy items to an array
            </summary>
            <param name="dest">The destination array</param>
            <param name="index">The index at which to start copying</param>
        </member>
        <member name="P:EWSoftware.ListControls.BaseListControl.BindingFieldEmpty">
            <summary>
            This helper property is used to see whether or not the display member property value is valid for the
            data source.
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.BaseListControl.DataManager">
            <summary>
            This is used to get a reference to the <see cref="T:System.Windows.Forms.CurrencyManager"/> associated with this control
            </summary>
            <remarks>This property is valid if the <see cref="P:EWSoftware.ListControls.BaseListControl.DataSource"/> property is set. If this is not a
            data-bound control, the default is a null reference. </remarks>
        </member>
        <member name="P:EWSoftware.ListControls.BaseListControl.Text">
            <summary>
            This is used to set or get the text for the list control
            </summary>
            <remarks>When set to null, the <see cref="P:EWSoftware.ListControls.BaseListControl.SelectedIndex"/> is set to -1.  If not null, an attempt is
            made to set the selected index to the item matching the specified text.  If no match is found, the
            selected index is set to -1.</remarks>
        </member>
        <member name="P:EWSoftware.ListControls.BaseListControl.FlatStyle">
            <summary>
            This is used to set or get the flat drawing style to use for the control
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.BaseListControl.DataSource">
            <summary>
            This gets or sets the data source for the list control
            </summary>
            <value><para>The data source object must support the <see cref="T:System.Collections.IList"/> interface such as a
            <see cref="T:System.Data.DataSet"/> or an <see cref="T:System.Array"/>.  The default is null and it will use
            whatever is in the <see cref="P:EWSoftware.ListControls.BaseListControl.Items"/> collection instead.  If using a data source, set the
            <see cref="P:EWSoftware.ListControls.BaseListControl.DisplayMember"/> and <see cref="P:EWSoftware.ListControls.BaseListControl.ValueMember"/> properties too.  Setting this property to
            null also clears the <see cref="P:EWSoftware.ListControls.BaseListControl.DisplayMember"/> property.</para>
            
            <para>A data source cannot be used with the <see cref="P:EWSoftware.ListControls.BaseListControl.SortOrder"/> property.  If a non-null data
            source is set, the <c>SortOrder</c> property is set to <c>None</c> automatically.</para></value>
            <exception cref="T:System.ArgumentException">This is thrown if the data source does not support the
            <see cref="T:System.Collections.IList"/> interface.</exception>
        </member>
        <member name="P:EWSoftware.ListControls.BaseListControl.DisplayMember">
            <summary>
            Gets or sets a string that specifies the property of the data source whose contents you want to
            display.
            </summary>
            <value>The default is an empty string.  If not set, the object's <c>ToString()</c> method is used to
            get the display value.  If the new display member cannot be set, the old display member is retained.</value>
        </member>
        <member name="P:EWSoftware.ListControls.BaseListControl.ValueMember">
            <summary>
            Gets or sets a string that specifies the property of the data source from which to draw the value
            </summary>
            <value><para>The default value is an empty string.  Specify a value to bind the data to a property.
            Clear it by setting it to an empty string or null.</para>
            
            <para>Setting a new value member will raise the <see cref="E:EWSoftware.ListControls.BaseListControl.ValueMemberChanged"/> and
            <see cref="E:EWSoftware.ListControls.BaseListControl.SelectedValueChanged"/> events.</para></value>
            <exception cref="T:System.ArgumentException">This is thrown if the value member cannot be found in the data
            source.</exception>
        </member>
        <member name="P:EWSoftware.ListControls.BaseListControl.Items">
            <summary>
            Gets an object representing the collection of the items contained in this list control
            </summary>
            <remarks>When the list control does not have a <see cref="P:EWSoftware.ListControls.BaseListControl.DataSource"/>, this property allows you to
            add and remove items.  If there is a data source, the collection is read-only.</remarks>
        </member>
        <member name="P:EWSoftware.ListControls.BaseListControl.SelectedIndex">
            <summary>
            Gets or sets the index specifying the currently selected item
            </summary>
            <value>This is a zero-based index into the items collection.  A value of -1 indicates that there is
            no current selection.</value>
        </member>
        <member name="P:EWSoftware.ListControls.BaseListControl.SelectedItem">
            <summary>
            Gets or sets the currently selected item in the list control
            </summary>
            <value><para>If there is no current selection, this property returns null.</para>
            
            <para>When you set this property to an object, the list control attempts to make that object the
            currently selected one in the list. If the object is found in the list, it is displayed as the
            selected item and the <see cref="P:EWSoftware.ListControls.BaseListControl.SelectedIndex"/> property is set to the corresponding index. If the
            object does not exist in the list the <see cref="P:EWSoftware.ListControls.BaseListControl.SelectedIndex"/> property is left at its current
            value.</para></value>
        </member>
        <member name="P:EWSoftware.ListControls.BaseListControl.SelectedValue">
            <summary>
            Gets or sets the value of the member property specified by the <see cref="P:EWSoftware.ListControls.BaseListControl.ValueMember"/> property in
            the currently selected item.
            </summary>
            <value><para>This returns an object containing the value of the member of the data source specified
            by the <see cref="P:EWSoftware.ListControls.BaseListControl.ValueMember"/> property.</para>
            
            <para>If a property is not specified in <see cref="P:EWSoftware.ListControls.BaseListControl.ValueMember"/>, this property returns the results
            of the <c>ToString</c> method of the object.</para></value>
        </member>
        <member name="P:EWSoftware.ListControls.BaseListControl.SortOrder">
            <summary>
            Gets or sets a value indicating whether the items in the list control are sorted and, if so, in what
            order.
            </summary>
            <value>If set to <c>None</c> (the default), the items in the list control are not sorted.  If set to
            <c>Ascending</c> or <c>Descending</c> the list control sorts existing entries and adds new entries to
            the appropriate sorted position in the list. You can use this property to automatically sort items in
            a list control.  As items are added to a sorted list control, the items are moved to the appropriate
            location in the sorted list. When you set the property to <c>None</c>, new items are added to the end
            of the existing list. The sort is case-insensitive.</value>
            <exception cref="T:System.ArgumentException">This is thrown if an attempt is made to set a sort order other
            than <c>None</c> when a data source is in use.</exception>
        </member>
        <member name="P:EWSoftware.ListControls.BaseListControl.EnforceDefaultSelection">
            <summary>
            This property is used to set or get the default selection behavior
            </summary>
            <value>If true (the default), a <see cref="P:EWSoftware.ListControls.BaseListControl.SelectedIndex"/> of -1 (no selection) is not allowed.
            Instead, the index specified by the <see cref="P:EWSoftware.ListControls.BaseListControl.DefaultSelection"/> property is used instead.</value>
        </member>
        <member name="P:EWSoftware.ListControls.BaseListControl.DefaultSelection">
            <summary>
            This property is used to set or get the default selection's index
            </summary>
            <value>If <see cref="P:EWSoftware.ListControls.BaseListControl.EnforceDefaultSelection"/> is true, a <see cref="P:EWSoftware.ListControls.BaseListControl.SelectedIndex"/> of -1 (no
            selection) is not allowed.  Instead, the index specified by this property is used.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">This is thrown if the index is less than zero</exception>
        </member>
        <member name="P:EWSoftware.ListControls.BaseListControl.MappingName">
            <summary>
            This property returns the mapping name used for the item list
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.BaseListControl.BindingPath">
            <summary>
            This property returns the binding path used for the item list
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.BaseListControl.Item(System.String)">
            <summary>
            This can be used to get the value of the specified column in the currently selected item
            </summary>
            <param name="colName">The column name of the item to get.  This can be any column in the data source,
            not just those displayed by the control.</param>
            <value>Returns the entry at the specified column in the currently selected item.  If
            <see cref="P:EWSoftware.ListControls.BaseListControl.SelectedIndex"/> equals -1 (no selection) or the column cannot be found, this returns
            null.</value>
            <overloads>There are two overloads for this property</overloads>
        </member>
        <member name="P:EWSoftware.ListControls.BaseListControl.Item(System.Int32,System.String)">
            <summary>
            This can be used to get the value of the specified column in the specified row of the list control's
            data source.
            </summary>
            <param name="rowIdx">The row index of the item.</param>
            <param name="colName">The column name of the item to get.  This can be any column in the data source,
            not just those displayed by the control.</param>
            <value>Returns the entry at the specified column in the specified row.  If the row is out of bounds
            or if the column cannot be found, this will return null.</value>
        </member>
        <member name="P:EWSoftware.ListControls.BaseListControl.BackgroundImage">
            <summary>
            List controls do not use this property so it is hidden.  It always returns null
            </summary>
            <exclude/>
        </member>
        <member name="P:EWSoftware.ListControls.BaseListControl.AutoScroll">
            <summary>
            List controls do not use this property so it is hidden.  It always returns the base class's value.
            </summary>
            <exclude/>
        </member>
        <member name="P:EWSoftware.ListControls.BaseListControl.AutoScrollMargin">
            <summary>
            List controls do not use this property so it is hidden.  It always returns the base margin.
            </summary>
            <exclude/>
        </member>
        <member name="P:EWSoftware.ListControls.BaseListControl.AutoScrollMinSize">
            <summary>
            List controls do not use this property so it is hidden.  It always returns the base size.
            </summary>
            <exclude/>
        </member>
        <member name="E:EWSoftware.ListControls.BaseListControl.BackgroundImageChanged">
            <summary>
            List controls do not use the background image so this event is hidden
            </summary>
            <exclude/>
        </member>
        <member name="E:EWSoftware.ListControls.BaseListControl.Load">
            <summary>
            List controls do not use the load event so it is hidden
            </summary>
            <exclude/>
        </member>
        <member name="E:EWSoftware.ListControls.BaseListControl.DataSourceChanged">
            <summary>
            This event is raised when the <see cref="P:EWSoftware.ListControls.BaseListControl.DataSource"/> is changed
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.BaseListControl.OnDataSourceChanged(System.EventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.BaseListControl.DataSourceChanged"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="E:EWSoftware.ListControls.BaseListControl.DisplayMemberChanged">
            <summary>
            This event is raised when the <see cref="P:EWSoftware.ListControls.BaseListControl.DisplayMember"/> changes
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.BaseListControl.OnDisplayMemberChanged(System.EventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.BaseListControl.DisplayMemberChanged"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="E:EWSoftware.ListControls.BaseListControl.ValueMemberChanged">
            <summary>
            This event is raised when the <see cref="P:EWSoftware.ListControls.BaseListControl.ValueMember"/> changes
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.BaseListControl.OnValueMemberChanged(System.EventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.BaseListControl.ValueMemberChanged"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="E:EWSoftware.ListControls.BaseListControl.SelectedIndexChanged">
            <summary>
            This event is raised when the <see cref="P:EWSoftware.ListControls.BaseListControl.SelectedIndex"/> changes
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.BaseListControl.OnSelectedIndexChanged(System.EventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.BaseListControl.SelectedIndexChanged"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="E:EWSoftware.ListControls.BaseListControl.SelectedValueChanged">
            <summary>
            This event is raised when the <see cref="P:EWSoftware.ListControls.BaseListControl.SelectedValue"/> changes
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.BaseListControl.OnSelectedValueChanged(System.EventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.BaseListControl.SelectedValueChanged"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="E:EWSoftware.ListControls.BaseListControl.SelectedItemChanged">
            <summary>
            This event is raised when the <see cref="P:EWSoftware.ListControls.BaseListControl.SelectedItem"/> changes
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.BaseListControl.OnSelectedItemChanged(System.EventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.BaseListControl.SelectedItemChanged"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="E:EWSoftware.ListControls.BaseListControl.SubControlsRefreshed">
            <summary>
            This event is raised when the sub-controls of the list control are refreshed after it has changed in
            some way that affects them.
            </summary>
            <remarks>This event can be handled to do such things as reload the column collection with your
            preferred defaults, adjust the radio button controls, etc.  See the <see cref="M:EWSoftware.ListControls.BaseListControl.RefreshSubControls"/>
            method in the derived classes for more information.
            </remarks>
        </member>
        <member name="M:EWSoftware.ListControls.BaseListControl.OnSubControlsRefreshed(System.EventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.BaseListControl.SubControlsRefreshed"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="E:EWSoftware.ListControls.BaseListControl.EnforceDefaultSelectionChanged">
            <summary>
            This event is raised when the <see cref="P:EWSoftware.ListControls.BaseListControl.EnforceDefaultSelection"/> property changes
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.BaseListControl.OnEnforceDefaultSelectionChanged(System.EventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.BaseListControl.EnforceDefaultSelectionChanged"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="E:EWSoftware.ListControls.BaseListControl.DefaultSelectionChanged">
            <summary>
            This event is raised when the <see cref="P:EWSoftware.ListControls.BaseListControl.DefaultSelection"/> changes
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.BaseListControl.OnDefaultSelectionChanged(System.EventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.BaseListControl.DefaultSelectionChanged"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="P:EWSoftware.ListControls.BaseListControl.IsInitializing">
            <summary>
            This is not part of the <c>ISupportInitialize</c> interface but can be used to find out if
            initialization is in progress.
            </summary>
            <value>It returns true if initializing, false if not</value>
            <seealso cref="M:EWSoftware.ListControls.BaseListControl.BeginInit"/>
            <seealso cref="M:EWSoftware.ListControls.BaseListControl.EndInit"/>
        </member>
        <member name="M:EWSoftware.ListControls.BaseListControl.BeginInit">
            <summary>
            Begin initialization
            </summary>
            <remarks>Call this before performing an update on the control that will affect many items in it.
            This prevents unnecessary layout updates.  Calls to this method must be balanced with a corresponding
            call to the <see cref="M:EWSoftware.ListControls.BaseListControl.EndInit"/> method.</remarks>
            <seealso cref="P:EWSoftware.ListControls.BaseListControl.IsInitializing"/>
            <seealso cref="M:EWSoftware.ListControls.BaseListControl.EndInit"/>
        </member>
        <member name="M:EWSoftware.ListControls.BaseListControl.EndInit">
            <summary>
            End initialization
            </summary>
            <remarks>Call this to resume layout changes that have been suspended by a call to
            <see cref="M:EWSoftware.ListControls.BaseListControl.BeginInit"/>.</remarks>
            <seealso cref="M:EWSoftware.ListControls.BaseListControl.BeginInit"/>
            <seealso cref="P:EWSoftware.ListControls.BaseListControl.IsInitializing"/>
        </member>
        <member name="M:EWSoftware.ListControls.BaseListControl.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.BaseListControl.DataManager_ItemChanged(System.Object,System.Windows.Forms.ItemChangedEventArgs)">
            <summary>
            This is called when the selected item in the data source changes
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.BaseListControl.DataManager_ItemChanged(System.Object,System.Int32)">
            <summary>
            Same as above but passed an integer because <c>ItemChangedEventArgs</c> is brain dead and declares
            its constructor "internal" so we can't create it the one time we need to in here.
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="index">The index of the item being changed in the list</param>
        </member>
        <member name="M:EWSoftware.ListControls.BaseListControl.DataManager_PositionChanged(System.Object,System.EventArgs)">
            <summary>
            This is called when the position in the data source changes
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.BaseListControl.DataSource_Disposed(System.Object,System.EventArgs)">
            <summary>
            This is called when the data source is disposed
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.BaseListControl.BindingMemberInfoInDataManager(System.Windows.Forms.BindingMemberInfo)">
            <summary>
            This is called to check whether or not the binding member info can be found in the data source and is
            bindable.
            </summary>
            <param name="bmi">The binding member info</param>
            <returns>True if found, false if not found</returns>
            <remarks>A case-sensitive search is tried first.  If that fails, a case-insensitive search is tried.</remarks>
        </member>
        <member name="M:EWSoftware.ListControls.BaseListControl.SetDataConnection(System.Object,System.Windows.Forms.BindingMemberInfo,System.Boolean)">
            <summary>
            This is called to get information about the data source and the display member and to hook up the
            necessary event handlers.
            </summary>
            <param name="newDataSource">The new data source.</param>
            <param name="newDisplayMember">The new display member in the data source.</param>
            <param name="force">True to force the information to be updated, false to only update the info if
            something really changed.</param>
            <exception cref="T:System.ArgumentException">This is thrown if the display member cannot be found in the data
            source.</exception>
        </member>
        <member name="M:EWSoftware.ListControls.BaseListControl.FindStringInternal(System.String,System.Collections.IList,System.Int32,System.Boolean)">
            <summary>
            This is used to perform item searches
            </summary>
            <param name="searchString">The string for which to search</param>
            <param name="items">The item collection to search</param>
            <param name="startIndex">The item after which to start the search</param>
            <param name="exact">True for an exact match search, false to find the first item that starts with the
            specified text.</param>
        </member>
        <member name="M:EWSoftware.ListControls.BaseListControl.OnBindingContextChanged(System.EventArgs)">
            <summary>
            This is overridden to refresh the data source information when the binding context is changed
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.BaseListControl.FilterItemOnProperty(System.Object)">
            <summary>
            This is used to return the property value for the display member
            </summary>
            <param name="item">The item from which to get the info</param>
            <returns>The found property value or the item itself if not found</returns>
            <overloads>There are two overloads for this method</overloads>
        </member>
        <member name="M:EWSoftware.ListControls.BaseListControl.FilterItemOnProperty(System.Object,System.String)">
            <summary>
            This is used to return the property value for the specified property name
            </summary>
            <param name="item">The item from which to get the info</param>
            <param name="field">The field on which to get the info</param>
            <returns>The found property value or the item itself if not found</returns>
        </member>
        <member name="M:EWSoftware.ListControls.BaseListControl.RefreshItem(System.Int32)">
            <summary>
            This is used to refresh an item in the collection from the data source
            </summary>
            <param name="index">The index of the item to refresh</param>
        </member>
        <member name="M:EWSoftware.ListControls.BaseListControl.RefreshItems">
            <summary>
            This is called to refresh the items in the collection
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.BaseListControl.SetItemCore(System.Int32,System.Object)">
            <summary>
            This is used to store an item in the collection from the data source
            </summary>
            <param name="index">The index of the item to store</param>
            <param name="item">The item to store</param>
        </member>
        <member name="M:EWSoftware.ListControls.BaseListControl.SetItemsCore(System.Collections.IList)">
            <summary>
            This is used to store items in the collection from the data source
            </summary>
            <param name="items">The items to store</param>
        </member>
        <member name="M:EWSoftware.ListControls.BaseListControl.UpdateText">
            <summary>
            This is called to update the text in the list control
            </summary>
            <remarks>By default, it does nothing.</remarks>
        </member>
        <member name="M:EWSoftware.ListControls.BaseListControl.RefreshSubControls">
            <summary>
            This can be called to force the control to refresh any related sub-controls when the data source,
            items within it, or other properties change that may affect them.
            </summary>
            <remarks>The base class implementation does nothing except raise the <see cref="E:EWSoftware.ListControls.BaseListControl.SubControlsRefreshed"/>
            event.</remarks>
        </member>
        <member name="M:EWSoftware.ListControls.BaseListControl.Find(System.Object)">
            <summary>
            This is called to find an item in the data source
            </summary>
            <param name="key">The item to find in the data source.  The <see cref="P:EWSoftware.ListControls.BaseListControl.ValueMember"/> is searched for
            this value if one is specified.  If not, the item text is searched for the value.</param>
            <returns>The index of the found item or -1 if not found</returns>
            <exception cref="T:System.ArgumentNullException">This is thrown if the item to find is null</exception>
        </member>
        <member name="M:EWSoftware.ListControls.BaseListControl.FindString(System.String)">
            <summary>
            Finds the first item in the list control that starts with the specified string.  The search is not
            case-sensitive.
            </summary>
            <param name="searchText">The string for which to search</param>
            <returns>The zero-based index of the first item found.  Returns -1 if no match is found.</returns>
            <overloads>There are two overloads for this method</overloads>
        </member>
        <member name="M:EWSoftware.ListControls.BaseListControl.FindString(System.String,System.Int32)">
            <summary>
            Finds the first item after the given index which starts with the given string. The search is not
            case-sensitive.
            </summary>
            <param name="searchText">The string for which to search.</param>
            <param name="startIndex">The zero-based index of the item before the first item to be searched.  Set
            to -1 to search from the beginning of the control.</param>
            <returns>The zero-based index of the first item found.  Returns -1 if no match is found.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">This is thrown if the index value is not within the
            bounds of the item collection and it is not -1.</exception>
        </member>
        <member name="M:EWSoftware.ListControls.BaseListControl.FindStringExact(System.String)">
            <summary>
            Finds the first item in the list control that matches the specified string. The search is not
            case-sensitive.
            </summary>
            <param name="searchText">The string for which to search</param>
            <returns>The zero-based index of the first item found.  Returns -1 if no match is found.</returns>
            <overloads>There are two overloads for this method</overloads>
        </member>
        <member name="M:EWSoftware.ListControls.BaseListControl.FindStringExact(System.String,System.Int32)">
            <summary>
            Finds the first item after the given index that matches the given string. The search is not
            case-sensitive.
            </summary>
            <param name="searchText">The string for which to search.</param>
            <param name="startIndex">The zero-based index of the item before the first item to be searched.  Set
            to -1 to search from the beginning of the control.</param>
            <returns>The zero-based index of the first item found.  Returns -1 if no match is found.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">This is thrown if the index value is not within the
            bounds of the item collection and it is not -1.</exception>
        </member>
        <member name="M:EWSoftware.ListControls.BaseListControl.GetItemText(System.Object)">
            <summary>
            This is used to get the display member value for the specified item
            </summary>
            <param name="item">The item for which to get the display value</param>
            <returns>The display text for the specified item</returns>
        </member>
        <member name="T:EWSoftware.ListControls.ChangePolicy">
            <summary>
            This class is used to contain the change policy for the data source in the <see cref="T:EWSoftware.ListControls.DataList"/> and
            <see cref="T:EWSoftware.ListControls.DataNavigator"/> controls.
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.ChangePolicy.AllowAdditions">
            <summary>
            This is used to determine whether or not additions are allowed to be made to the data source
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.ChangePolicy.AllowEdits">
            <summary>
            This is used to determine whether or not edits are allowed to be made to the data source
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.ChangePolicy.AllowDeletes">
            <summary>
            This is used to determine whether or not deletes are allowed to be made to the data source
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.ChangePolicy.#ctor(System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="owner">The control that owns this policy object</param>
            <remarks>Additions, edits, and deletes are allowed by default</remarks>
        </member>
        <member name="M:EWSoftware.ListControls.ChangePolicy.UpdatePolicy(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            This is used to update the change policy based on the owning data list or data navigator
            </summary>
            <param name="canAdd">If true and the data source permits it, allow additions</param>
            <param name="canEdit">If true and the data source permits it, allow edits</param>
            <param name="canDelete">If true and the data source permits it, allow deletes</param>
        </member>
        <member name="T:EWSoftware.ListControls.CheckBoxList">
            <summary>
            This control is a multi-selection checkbox list that supports data binding, layout options, and data
            source indexers.
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.CheckBoxList.SelectedIndex">
            <summary>
            Gets or sets the index specifying the currently selected item.  Unlike the
            <see cref="T:EWSoftware.ListControls.RadioButtonList"/>, this only selects the item.  It will not change it to a checked state.
            </summary>
            <value><para>This is a zero-based index into the items collection.  A value of -1 indicates that
            there is no current selection.</para>
            
            <para>Setting a new index value will raise the <see cref="E:EWSoftware.ListControls.BaseListControl.SelectedIndexChanged"/>
            event.</para>
            
            <para>If <see cref="P:EWSoftware.ListControls.BaseListControl.EnforceDefaultSelection"/> is true, a <see cref="P:EWSoftware.ListControls.CheckBoxList.SelectedIndex"/>
            of -1 (no selection) is not allowed.  Instead, the index specified by the
            <see cref="P:EWSoftware.ListControls.BaseListControl.DefaultSelection"/> property is used instead.  If the default value is
            outside the range of the data source, the last item is selected.</para></value>
            <exception cref="T:System.ArgumentOutOfRangeException">This is thrown if the index is less than -1 or greater
            than the number of items in the collection.</exception>
        </member>
        <member name="P:EWSoftware.ListControls.CheckBoxList.Appearance">
            <summary>
            This is used to set or get the checkbox appearance
            </summary>
            <value>The default is to show them as normal checkboxes</value>
        </member>
        <member name="P:EWSoftware.ListControls.CheckBoxList.CheckAlign">
            <summary>
            This is used to set or get the alignment on the checkbox checkmark
            </summary>
            <value>The default alignment is <c>MiddleLeft</c></value>
        </member>
        <member name="P:EWSoftware.ListControls.CheckBoxList.ThreeState">
            <summary>
            This is used to set or get whether or not the checkboxes support three states rather than two
            </summary>
            <value>The default is to use only two states (checked and unchecked).  Setting this to true enables
            the third state (indeterminate).</value>
        </member>
        <member name="P:EWSoftware.ListControls.CheckBoxList.BindingMembersBindingContext">
            <summary>
            This is used to specify the binding context for use with the <see cref="P:EWSoftware.ListControls.CheckBoxList.BindingMembersDataSource"/>
            property.
            </summary>
            <value>This binding context will be used when binding each checkbox in the list to a member specified
            in the <see cref="P:EWSoftware.ListControls.CheckBoxList.BindingMembers"/> property.  This allows you to update the data source members as
            the checked state changes on each of the checkboxes in the list.</value>
        </member>
        <member name="P:EWSoftware.ListControls.CheckBoxList.BindingMembersDataSource">
            <summary>
            This is used to specify the data source for use with the <see cref="P:EWSoftware.ListControls.CheckBoxList.BindingMembers"/> property
            </summary>
            <value>This data source will be used to bind each checkbox in the list to a member specified in the
            <see cref="P:EWSoftware.ListControls.CheckBoxList.BindingMembers"/> property.  This allows you to update the data source members as the
            checked state changes on each of the checkboxes in the list.</value>
        </member>
        <member name="P:EWSoftware.ListControls.CheckBoxList.BindingMembers">
            <summary>
            This is used to specify the members in the <see cref="P:EWSoftware.ListControls.CheckBoxList.BindingMembersDataSource"/> that should be
            bound to the <see cref="P:System.Windows.Forms.CheckBox.CheckState"/> property of each checkbox in the list.
            </summary>
            <value>This allows you to update the data source members as the checked state changes on each of the
            checkboxes in the list.  One checkbox will be bound to each member in the list.  If there are more
            members in the list than checkboxes, the excess members are ignored and will not be bound.</value>
        </member>
        <member name="P:EWSoftware.ListControls.CheckBoxList.CheckedItems">
            <summary>
            This property will return a collection containing the currently selected items in the checkbox list
            </summary>
            <remarks>The collection is read-only but the items in it are not</remarks>
        </member>
        <member name="P:EWSoftware.ListControls.CheckBoxList.CheckedIndices">
            <summary>
            This property will return a collection containing the currently selected indices in the checkbox list
            </summary>
            <remarks>The collection is read-only.</remarks>
        </member>
        <member name="E:EWSoftware.ListControls.CheckBoxList.ItemCheckStateChanged">
            <summary>
            This event is raised when the check state of a list item changes
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.CheckBoxList.OnItemCheckStateChanged(EWSoftware.ListControls.ItemCheckStateEventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.CheckBoxList.ItemCheckStateChanged"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="E:EWSoftware.ListControls.CheckBoxList.ThreeStateChanged">
            <summary>
            This event is raised when the <see cref="P:EWSoftware.ListControls.CheckBoxList.ThreeState"/> property changes
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.CheckBoxList.OnThreeStateChanged(System.EventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.CheckBoxList.ThreeStateChanged"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.CheckBoxList.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks>By default, the checkbox list will display all items in the data source in a single column,
            item parts are left aligned and the control will have an etched border.  A default selection (item
            zero) is enforced.</remarks>
        </member>
        <member name="M:EWSoftware.ListControls.CheckBoxList.BindingMember_Format(System.Object,System.Windows.Forms.ConvertEventArgs)">
            <summary>
            This is used to translate a binding member value to a true, false, or indeterminate state
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.CheckBoxList.BindingMember_Parse(System.Object,System.Windows.Forms.ConvertEventArgs)">
            <summary>
            This is used to convert a checked state value to a boolean or null value to store in the data source
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.CheckBoxList.BindingMembers_ListChanged(System.Object,System.ComponentModel.ListChangedEventArgs)">
            <summary>
            This is used to refresh the controls when the binding members list is changed
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.CheckBoxList.CheckBox_Enter(System.Object,System.EventArgs)">
            <summary>
            This is handled to update the selected index whenever a checkbox gains the focus
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.CheckBoxList.CheckBox_CheckStateChanged(System.Object,System.EventArgs)">
            <summary>
            This is handled to raise the ItemCheckStateChanged event when a checkbox's check state changes
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.CheckBoxList.RefreshSubControls">
            <summary>
            This is called to force the control to refresh the checkboxes with information from the data source
            </summary>
            <exception cref="T:System.InvalidOperationException">This is thrown if a <see cref="P:EWSoftware.ListControls.CheckBoxList.BindingMembersDataSource"/>
            has been specified and there are more checkbox list items that members specified in
            <see cref="P:EWSoftware.ListControls.CheckBoxList.BindingMembers"/>.</exception>
        </member>
        <member name="M:EWSoftware.ListControls.CheckBoxList.GetItemChecked(System.Int32)">
            <summary>
            Returns a value indicating whether the specified item is checked
            </summary>
            <param name="index">The index of the item to examine</param>
            <returns>True if the item is checked, false if it is not</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">This is thrown if the index value is not within the
            bounds of the item collection.</exception>
            <overloads>There are two overloads for this method</overloads>
        </member>
        <member name="M:EWSoftware.ListControls.CheckBoxList.GetItemChecked(System.Object)">
            <summary>
            Returns a value indicating whether the item with the specified value is checked
            </summary>
            <param name="key">The item to examine in the data source.  The <see cref="P:EWSoftware.ListControls.BaseListControl.ValueMember"/>
            is searched for this value.</param>
            <returns>True if the item is checked, false if it is not</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">This is thrown if the value is not found in the
            collection.</exception>
        </member>
        <member name="M:EWSoftware.ListControls.CheckBoxList.GetItemCheckState(System.Int32)">
            <summary>
            Returns a value indicating the current check state of the item
            </summary>
            <param name="index">The index of the item to examine</param>
            <returns>The current check state of the specified item</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">This is thrown if the index value is not within the
            bounds of the item collection.</exception>
            <overloads>There are two overloads for this method</overloads>
        </member>
        <member name="M:EWSoftware.ListControls.CheckBoxList.GetItemCheckState(System.Object)">
            <summary>
            Returns a value indicating the current check state of the item with the specified value
            </summary>
            <param name="key">The item in the data source to examine.  The <see cref="P:EWSoftware.ListControls.BaseListControl.ValueMember"/>
            is searched for this value.</param>
            <returns>The current check state of the specified item</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">This is thrown if the value is not found in the
            collection.</exception>
        </member>
        <member name="M:EWSoftware.ListControls.CheckBoxList.SetItemChecked(System.Int32,System.Boolean)">
            <summary>
            Sets the check state of the item at the specified index to <c>Checked</c> or <c>Unchecked</c>
            </summary>
            <param name="index">The index of the item to check or uncheck</param>
            <param name="check">True to check the item, false to uncheck it</param>
            <exception cref="T:System.ArgumentOutOfRangeException">This is thrown if the index value is not within the
            bounds of the item collection.</exception>
            <overloads>There are two overloads for this method</overloads>
        </member>
        <member name="M:EWSoftware.ListControls.CheckBoxList.SetItemChecked(System.Object,System.Boolean)">
            <summary>
            Sets the check state of the item with the specified key to <c>Checked</c> or <c>Unchecked</c>
            </summary>
            <param name="key">The item to check or uncheck in the data source.  The
            <see cref="P:EWSoftware.ListControls.BaseListControl.ValueMember"/> is searched for this value.</param>
            <param name="check">True to check the item, false to uncheck it.</param>
            <returns>The index of the item with the specified key or -1 if the item could not be found</returns>
        </member>
        <member name="M:EWSoftware.ListControls.CheckBoxList.SetItemCheckState(System.Int32,System.Windows.Forms.CheckState)">
            <summary>
            Sets the check state of the item at the specified index to the specified value
            </summary>
            <param name="index">The index of the item to change</param>
            <param name="state">The new check state of the item</param>
            <exception cref="T:System.ArgumentOutOfRangeException">This is thrown if the index value is not within the
            bounds of the item collection.</exception>
            <overloads>There are two overloads for this method</overloads>
        </member>
        <member name="M:EWSoftware.ListControls.CheckBoxList.SetItemCheckState(System.Object,System.Windows.Forms.CheckState)">
            <summary>
            Sets the check state of the item with the specified key to the specified value
            </summary>
            <param name="key">The item to change in the data source.  The <see cref="P:EWSoftware.ListControls.BaseListControl.ValueMember"/>
            is searched for this value.</param>
            <param name="state">The new check state of the item</param>
            <returns>The index of the item with the specified key or -1 if the item could not be found</returns>
        </member>
        <member name="M:EWSoftware.ListControls.CheckBoxList.ClearSelections">
            <summary>
            Clear all currently checked items by setting them to an unchecked state
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.CheckBoxList.SelectAll">
            <summary>
            Select all items by setting their state to checked
            </summary>
        </member>
        <member name="T:EWSoftware.ListControls.CheckedIndicesCollection">
            <summary>
            This is a derived <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> class that contains a set of indices from a
            <see cref="T:EWSoftware.ListControls.CheckBoxList"/> control.  Each entry represents the index of an item that has a check state of
            <c>Checked</c> or <c>Indeterminate</c>.
            </summary>
            <remarks>The collection itself cannot be modified</remarks>
        </member>
        <member name="M:EWSoftware.ListControls.CheckedIndicesCollection.#ctor(System.Collections.Generic.IList{System.Int32})">
            <summary>
            Constructor
            </summary>
            <param name="list">The list to wrap.</param>
        </member>
        <member name="M:EWSoftware.ListControls.CheckedIndicesCollection.ToString">
            <summary>
            Convert the checked indices to a comma-separated list
            </summary>
            <returns>Returns a string containing the indices separated by commas</returns>
        </member>
        <member name="T:EWSoftware.ListControls.CheckedItemsCollection">
            <summary>
            This is a derived <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> class that contains a set of items from a
            <see cref="T:EWSoftware.ListControls.CheckBoxList"/> control.  Each entry represents an item that has a check state of
            <c>Checked</c> or <c>Indeterminate</c>.
            </summary>
            <remarks>The collection itself cannot be modified, but the items in it can</remarks>
        </member>
        <member name="M:EWSoftware.ListControls.CheckedItemsCollection.#ctor(EWSoftware.ListControls.CheckBoxList,System.Collections.Generic.IList{System.Object})">
            <summary>
            Constructor
            </summary>
            <param name="control">The checkbox list control</param>
            <param name="list">The list to wrap</param>
        </member>
        <member name="M:EWSoftware.ListControls.CheckedItemsCollection.ValueOf(System.Int32)">
            <summary>
            Get the value of the specified item from the checkbox list
            </summary>
            <param name="index">The index of the item in this collection</param>
            <returns>The value of the checked item from the checkbox list.  The value will be extracted from the
            data source based on the <see cref="P:EWSoftware.ListControls.BaseListControl.ValueMember">CheckBoxList.ValueMember</see>
            setting.</returns>
        </member>
        <member name="M:EWSoftware.ListControls.CheckedItemsCollection.DisplayTextOf(System.Int32)">
            <summary>
            Get the display text of the specified item from the checkbox list
            </summary>
            <param name="index">The index of the item in this collection</param>
            <returns>The display text value of the checked item from the checkbox list.  The value will be
            extracted from the data source based on the
            <see cref="P:EWSoftware.ListControls.BaseListControl.DisplayMember">CheckBoxList.DisplayMember</see> setting.</returns>
        </member>
        <member name="M:EWSoftware.ListControls.CheckedItemsCollection.CheckStateOf(System.Int32)">
            <summary>
            Get the check state of the specified item from the checkbox list
            </summary>
            <param name="index">The index of the item in this collection</param>
            <returns>The check state of the checked item from the checkbox list</returns>
        </member>
        <member name="M:EWSoftware.ListControls.CheckedItemsCollection.ToString">
            <summary>
            Convert the checked item values to a comma-separated list
            </summary>
            <returns>Returns a string containing the values separated by commas.  The values will be those
            extracted from the data source based on the
            <see cref="P:EWSoftware.ListControls.BaseListControl.ValueMember">CheckBoxList.ValueMember</see> setting.</returns>
        </member>
        <member name="M:EWSoftware.ListControls.CheckedItemsCollection.ToDisplayTextString">
            <summary>
            Convert the checked item display text values to a comma-separated list
            </summary>
            <returns>Returns a string containing the display values separated by commas.  The values will be
            those extracted from the data source based on the
            <see cref="P:EWSoftware.ListControls.BaseListControl.DisplayMember">CheckBoxList.DisplayMember</see> setting.</returns>
        </member>
        <member name="T:EWSoftware.ListControls.CheckedNodesCollection">
            <summary>
            This is a derived <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> class that contains a set of nodes from a
            <see cref="T:EWSoftware.ListControls.ExtendedTreeView"/> control.  Each entry represents a node that has a check state of
            <c>Checked</c> or <c>Mixed</c>.
            </summary>
            <remarks>The collection itself cannot be modified, but the items in it can</remarks>
        </member>
        <member name="M:EWSoftware.ListControls.CheckedNodesCollection.#ctor(System.Collections.Generic.IList{System.Windows.Forms.TreeNode})">
            <summary>
            Constructor
            </summary>
            <param name="list">The list to wrap</param>
        </member>
        <member name="M:EWSoftware.ListControls.CheckedNodesCollection.CheckStateOf(System.Int32)">
            <summary>
            Get the check state of the specified item from the tree view
            </summary>
            <param name="index">The index of the item in this collection</param>
            <returns>The check state of the checked item from the checkbox list</returns>
        </member>
        <member name="M:EWSoftware.ListControls.CheckedNodesCollection.ContainsName(System.String)">
            <summary>
            This can be used to determine whether or not the collection contains a node with the specified name
            </summary>
            <param name="name">The node name to find</param>
            <returns>True if the collection contains a node with the given name or false if it does not</returns>
        </member>
        <member name="M:EWSoftware.ListControls.CheckedNodesCollection.ToNameString">
            <summary>
            Convert the checked nodes' names to a comma-separated list
            </summary>
            <returns>Returns a string containing the node names separated by commas</returns>
        </member>
        <member name="M:EWSoftware.ListControls.CheckedNodesCollection.ToTextValueString">
            <summary>
            Convert the checked nodes' text values to a comma-separated list
            </summary>
            <returns>Returns a string containing the node text values separated by commas</returns>
        </member>
        <member name="T:EWSoftware.ListControls.ClickableLabel">
            <summary>
            A standard label control with the ability to focus the first selectable control following it when clicked
            (by tab order) or the parent if not.
            </summary>
            <remarks><para>When clicked, this label control will attempt to find the first selectable control
            following it (by tab order) and give it the focus.  If no controls are found or the first control found
            is disabled, the label gives the focus to the parent control.</para>
            
            <para>This label is useful in <see cref="T:EWSoftware.ListControls.TemplateControl"/> controls.  Clicking a standard label control
            in the template fails to focus the row because it ignores all mouse clicks.  Clicking this label control
            will cause the row to gain the focus even when there are no selectable controls in the row.</para></remarks>
        </member>
        <member name="M:EWSoftware.ListControls.ClickableLabel.OnClick(System.EventArgs)">
            <summary>
            This is overridden to focus the control following the label or the parent if one cannot be found
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="T:EWSoftware.ListControls.DataGridHelper">
            <summary>
            This is a static class that contains various helper methods for use with
            <see cref="T:System.Windows.Forms.DataGrid"/> objects.
            </summary>
            <remarks>Many of these methods use reflection to access internal members of the
            <see cref="T:System.Windows.Forms.DataGrid"/> class that aren't exposed as public items.</remarks>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridHelper.DataGridType(System.Windows.Forms.DataGrid)">
            <summary>
            This is used to get a reference to the DataGrid type on the passed data grid-derived object
            </summary>
            <param  name="dg">The data grid to use</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridHelper.DoubleBuffer(System.Windows.Forms.DataGrid)">
            <summary>
            This can be used to turn on double-buffering in the specified <see cref="T:System.Windows.Forms.DataGrid"/>
            control to help reduce flickering during redraws.
            </summary>
            <param name="dg">The data grid in which to enable double-buffering</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridHelper.CurrentTableStyle(System.Windows.Forms.DataGrid)">
            <summary>
            Get the current table style in use for the specified <see cref="T:System.Windows.Forms.DataGrid"/>
            control.
            </summary>
            <param  name="dg">The data grid to use</param>
            <returns>The current table style object in use by the data grid</returns>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridHelper.AutoSizeColumn(System.Windows.Forms.DataGrid,System.Int32)">
            <summary>
            This can be used to auto-size the specified column in the specified
            <see cref="T:System.Windows.Forms.DataGrid"/> control.
            </summary>
            <param name="dg">The data grid in which to size the column</param>
            <param name="col">The column to resize</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridHelper.AutoSizeColumns(System.Windows.Forms.DataGrid)">
            <summary>
            This can be used to auto-size all columns in the specified <see cref="T:System.Windows.Forms.DataGrid"/>
            control.
            </summary>
            <param name="dg">The data grid in which to size the columns</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridHelper.RowCount(System.Windows.Forms.DataGrid)">
            <summary>
            This can be used to get the number of rows in the specified <see cref="T:System.Windows.Forms.DataGrid"/>
            control.
            </summary>
            <param name="dg">The data grid from which to get the row count</param>
            <returns>The number of rows in the data grid</returns>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridHelper.ConcedeFocus(System.Windows.Forms.DataGrid)">
            <summary>
            This can be used to force the current edit column in the data grid to concede the focus.  Changes
            will be saved if possible.
            </summary>
            <param name="dg">The data grid to use</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataGridHelper.ScrollDown(System.Windows.Forms.DataGrid,System.Int32)">
            <summary>
            This can be used to scroll the data grid up or down
            </summary>
            <param name="dg">The data grid to scroll</param>
            <param name="rows">The number of rows to scroll (negative to scroll up, positive to scroll down)</param>
        </member>
        <member name="T:EWSoftware.ListControls.DataList">
            <summary>
            This control allows you to specify a user control template to display and edit information from a data
            source similar in nature to the <c>DataList</c> web server control, the sub-form control or continuous
            forms detail section in a Microsoft Access form, or the <c>DataRepeater</c> control from Visual Basic 6.
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataList.BorderStyle">
            <summary>
            This property is used to set or get the border style.
            </summary>
            <remarks>The default is to use a fixed 3D border.</remarks>
        </member>
        <member name="P:EWSoftware.ListControls.DataList.ListManager">
            <summary>
            This returns the <see cref="T:System.Windows.Forms.CurrencyManager"/> that the data list is currently using to get data from
            the <see cref="P:EWSoftware.ListControls.DataList.DataSource"/>/<see cref="P:EWSoftware.ListControls.DataList.DataMember"/> pair.
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataList.CaptionVisible">
            <summary>
            This property is used to set or get whether or not the caption is displayed
            </summary>
            <value>The caption is not visible by default</value>
        </member>
        <member name="P:EWSoftware.ListControls.DataList.CaptionText">
            <summary>
            This property is used to set or get the caption text
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataList.CaptionBackColor">
            <summary>
            This property is used to set or get the caption background color
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataList.CaptionForeColor">
            <summary>
            This property is used to set or get the caption foreground color
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataList.CaptionFont">
            <summary>
            This property is used to set or get the caption font
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataList.NavigationControlsVisible">
            <summary>
            This property is used to set or get whether or not the navigation controls are displayed
            </summary>
            <value>The controls are shown by default</value>
        </member>
        <member name="P:EWSoftware.ListControls.DataList.AddDeleteButtonsVisible">
            <summary>
            This property is used to set or get whether or not the add and delete buttons are displayed
            </summary>
            <value>The buttons are shown by default.  They can be hidden if you would prefer to handle add and
            delete operations via some other means such as other buttons on your form or template.</value>
        </member>
        <member name="P:EWSoftware.ListControls.DataList.SeparatorsVisible">
            <summary>
            This property is used to set or get whether or not separators are displayed between rows
            </summary>
            <value>Separators are drawn by default</value>
        </member>
        <member name="P:EWSoftware.ListControls.DataList.SeparatorColor">
            <summary>
            This property is used to set or get the color of the separators when the <see cref="P:EWSoftware.ListControls.DataList.SeparatorsVisible"/>
            property is true.
            </summary>
            <value>The default color is black</value>
        </member>
        <member name="P:EWSoftware.ListControls.DataList.SeparatorHeight">
            <summary>
            This property is used to set or get the height of the separators when the <see cref="P:EWSoftware.ListControls.DataList.SeparatorsVisible"/>
            property is true.
            </summary>
            <value>The default height is 1 pixel</value>
            <exception cref="T:System.ArgumentOutOfRangeException">This is thrown if the value is not between 1 and 20</exception>
        </member>
        <member name="P:EWSoftware.ListControls.DataList.RowHeight">
            <summary>
            This read-only property can be used to get the row height
            including the separator.
            </summary>
            <remarks>The return value is undefined if no template and/or data source has been specified</remarks>
        </member>
        <member name="P:EWSoftware.ListControls.DataList.RowHeadersVisible">
            <summary>
            This property is used to set or get whether or not row headers are displayed in front of each row
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataList.RowHeadersFlat">
            <summary>
            This property is used to set or get whether to draw the row headers using a flat style
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataList.RowHeaderWidth">
            <summary>
            This property is used to set or get the width of the row headers when the <see cref="P:EWSoftware.ListControls.DataList.RowHeadersVisible"/>
            property is true.
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataList.RowHeaderBackColor">
            <summary>
            This property is used to set or get the row header's background color
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataList.RowHeaderForeColor">
            <summary>
            This property is used to set or get the row header's foreground color
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataList.SelectionBackColor">
            <summary>
            This property is used to set or get the background color for selected row headers
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataList.SelectionForeColor">
            <summary>
            This property is used to set or get the foreground color for selected row headers
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataList.AllowAdditions">
            <summary>
            This is used to determine whether or not additions are allowed to be made to the data source
            </summary>
            <value>If set to true, the data source may override it if it does not allow additions</value>
        </member>
        <member name="P:EWSoftware.ListControls.DataList.AllowEdits">
            <summary>
            This is used to determine whether or not edits are allowed to be made to the data source
            </summary>
            <value>If set to true, the data source may override it if it does not allow edits.  Note that it is
            up to the row template to check this property and disable editing in its controls if this is set to
            false.</value>
        </member>
        <member name="P:EWSoftware.ListControls.DataList.AllowDeletes">
            <summary>
            This is used to determine whether or not deletes are allowed to be made to the data source
            </summary>
            <value>If set to true, the data source may override it if it does not allow deletions</value>
        </member>
        <member name="P:EWSoftware.ListControls.DataList.AddRowShortcut">
            <summary>
            This is used to set or get the shortcut key to use for jumping to the "new row" template
            </summary>
            <remarks>The default is <c>Ctrl+Shift+A</c>.  It is ignored if additions are not allowed</remarks>
        </member>
        <member name="P:EWSoftware.ListControls.DataList.DeleteRowShortcut">
            <summary>
            This is used to set or get the shortcut key to use for deleting a row
            </summary>
            <remarks>The default is <c>Ctrl+Shift+D</c>.  It is ignored if deletes are not allowed</remarks>
        </member>
        <member name="P:EWSoftware.ListControls.DataList.RowNumberNavShortcut">
            <summary>
            This is used to set or get the shortcut key to use for jumping to the row number navigation text box
            </summary>
            <remarks>The default is <c>F5</c>.  It is ignored if the navigation controls are not visible</remarks>
        </member>
        <member name="P:EWSoftware.ListControls.DataList.SwitchSectionShortcut">
            <summary>
            This is used to set or get the shortcut key to use for jumping between the header, detail, and footer
            sections of the control.
            </summary>
            <remarks>The default is <c>F6</c>.  It is ignored if no header and footer are specified.  A section
            will still be given the focus even if there are no controls within it that will accept the focus.</remarks>
        </member>
        <member name="P:EWSoftware.ListControls.DataList.RepeatWait">
            <summary>
            This property is used to set or get the initial wait in milliseconds before the <c>Next</c> and
            <c>Previous</c> buttons auto-repeat when clicked and held to navigate through the data source.
            </summary>
            <value>The default is 500 milliseconds.  The delay cannot be set to less than 100 milliseconds</value>
            <exception cref="T:System.ArgumentOutOfRangeException">This is thrown if the value is less than 100</exception>
        </member>
        <member name="P:EWSoftware.ListControls.DataList.RepeatInterval">
            <summary>
            This property is used to set or get the repeat delay in milliseconds for the <c>Next</c> and
            <c>Previous</c> buttons when they are clicked and held down to navigate through the data source.
            </summary>
            <value>The default is 50 milliseconds.  The delay cannot be set to less than 20 milliseconds</value>
            <exception cref="T:System.ArgumentOutOfRangeException">This is thrown if the value is less than 20</exception>
        </member>
        <member name="P:EWSoftware.ListControls.DataList.SelectionStart">
            <summary>
            This property is used to set or get the zero-based starting row number of the currently selected
            range of rows.
            </summary>
            <value>This returns the zero-based starting row number of the selection range. If there is no
            selected row range, it returns -1.  If <see cref="P:EWSoftware.ListControls.DataList.SelectionEnd"/> has not been set when this property
            is set, the ending selection is set to the same value.  If the value is not within the bounds of the
            current row count, it is adjusted to be valid.  If the new value is greater than the current ending
            value, the values are swapped so that the range always starts at the lowest row number and goes to
            the highest row number.  Setting it to -1 clears the selection.</value>
        </member>
        <member name="P:EWSoftware.ListControls.DataList.SelectionEnd">
            <summary>
            This property is used to set or get the zero-based ending row number of the currently selected range
            of rows.
            </summary>
            <value>This returns the zero-based ending row number of the selection range. If there is no selected
            row range, it returns -1.  If <see cref="P:EWSoftware.ListControls.DataList.SelectionStart"/> has not been set when this property is
            set, the starting selection is set to the same value.  If the value is not within the bounds of the
            current row count, it is adjusted to be valid.  If the new value is less than the current starting
            value, the values are swapped so that the range always starts at the lowest row number and goes to
            the highest row number.  Setting it to -1 clears the selection.</value>
        </member>
        <member name="P:EWSoftware.ListControls.DataList.DataSource">
            <summary>
            This gets or sets the data source for the data list
            </summary>
            <value>The data source object must support the <see cref="T:System.Collections.IList"/> interface such as a
            <see cref="T:System.Data.DataSet"/> or an <see cref="T:System.Array"/>.  This property must be set in order for
            the control to display information.  If the data source contains multiple items to which the control
            can bind, use the <see cref="P:EWSoftware.ListControls.DataList.DataMember"/> property to specify the sub-list to use.</value>
            <exception cref="T:System.ArgumentException">This is thrown if the data source does not support the
            <see cref="T:System.Collections.IList"/> interface.</exception>
        </member>
        <member name="P:EWSoftware.ListControls.DataList.DataMember">
            <summary>
            This indicates the sub-list (if any) of the <see cref="P:EWSoftware.ListControls.DataList.DataSource"/> to show in the data list
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataList.RowTemplate">
            <summary>
            The template control type to use for rows in the data source
            </summary>
            <remarks>One row template will be created for each row in the data source.  Rows are initialized and
            bound as they are scrolled into view to improve performance.  This property must be set in order to
            edit information in the data source.</remarks>
            <exception cref="T:System.ArgumentException">This is thrown if the specified type is not derived from
            <see cref="T:EWSoftware.ListControls.TemplateControl"/>.</exception>
            <example>
            <code language="cs">
            // AddressTemplate is a user control derived from TemplateControl
            dataList.RowTemplate = typeof(AddressTemplate);
            </code>
            <code language="vbnet">
            ' AddressTemplate is a user control derived from TemplateControl
            dataList.RowTemplate = GetType(AddressTemplate)
            </code>
            </example>
        </member>
        <member name="P:EWSoftware.ListControls.DataList.HeaderTemplate">
            <summary>
            The template control type to use for the header
            </summary>
            <remarks>The header template is bound to the data source as a whole rather than an individual row.
            If not set, a header section will not be shown.</remarks>
            <exception cref="T:System.ArgumentException">This is thrown if the specified type is not derived from
            <see cref="T:EWSoftware.ListControls.TemplateControl"/>.</exception>
            <example>
            <code language="cs">
            // AddressHeader is a user control derived from TemplateControl
            dataList.HeaderTemplate = typeof(AddressHeader);
            </code>
            <code language="vbnet">
            ' AddressHeader is a user control derived from TemplateControl
            dataList.HeaderTemplate = GetType(AddressHeader)
            </code>
            </example>
        </member>
        <member name="P:EWSoftware.ListControls.DataList.FooterTemplate">
            <summary>
            The template control type to use for the footer
            </summary>
            <remarks>The footer template is bound to the data source as a whole rather than an individual row.
            If not set, a footer section will not be shown.</remarks>
            <exception cref="T:System.ArgumentException">This is thrown if the specified type is not derived from
            <see cref="T:EWSoftware.ListControls.TemplateControl"/>.</exception>
            <example>
            <code language="cs">
            // AddressFooter is a user control derived from TemplateControl
            dataList.FooterTemplate = typeof(AddressFooter);
            </code>
            <code language="vbnet">
            ' AddressFooter is a user control derived from TemplateControl
            dataList.FooterTemplate = GetType(AddressFooter)
            </code>
            </example>
        </member>
        <member name="P:EWSoftware.ListControls.DataList.RowCount">
            <summary>
            This read-only property can be used to get the current row count from the data source
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataList.CurrentRow">
            <summary>
            This read-only property is used to get the zero-based row number of the currently selected row item
            </summary>
            <value>If there is no data source or there are no rows in the data source, it returns -1</value>
            <remarks>To set the current row, use the <see cref="M:EWSoftware.ListControls.DataList.MoveTo(System.Int32)"/> method</remarks>
        </member>
        <member name="P:EWSoftware.ListControls.DataList.CurrentItem">
            <summary>
            This is used to get a reference to the current item's row template
            </summary>
            <value>This will return null if there is no data source or if there are no rows in the data source</value>
        </member>
        <member name="P:EWSoftware.ListControls.DataList.HeaderControl">
            <summary>
            This is used to get a reference to the current header template control if one has been specified
            </summary>
            <value>This will return null if there is no header template</value>
        </member>
        <member name="P:EWSoftware.ListControls.DataList.FooterControl">
            <summary>
            This is used to get a reference to the current footer template control if one has been specified
            </summary>
            <value>This will return null if there is no footer template</value>
        </member>
        <member name="P:EWSoftware.ListControls.DataList.SharedDataSources">
            <summary>
            This can be used to store data sources that are shared amongst all instances of the row, header, and
            footer templates.
            </summary>
            <returns>The hash table used to store the shared data sources</returns>
            <remarks>To conserve resources and speed the loading of the row templates, they can share common data
            sources for the controls that they contain such as combo boxes.  This property can be used to store
            the shared data sources for easy access and so that you do not have to manage them in the templates.</remarks>
        </member>
        <member name="P:EWSoftware.ListControls.DataList.IsValid">
            <summary>
            This property can be used to query the current row template to see if it is valid
            </summary>
            <value>Returns true if it is valid or there are no items, false if it is not</value>
            <remarks>This is useful in situations where the normal validating events are fired after certain
            other events (i.e. tree view and data grid item selection events).</remarks>
            <example>
            <code language="cs">
            // Prevent a change of the tree view node if the current row
            // template in the data list is not valid.
            private void tree_BeforeSelect(object sender, TreeViewCancelEventArgs e)
            {
                e.Cancel = !dataList.IsValid;
            }
            </code>
            <code language="vbnet">
            ' Prevent a change of the tree view node if the current row
            ' template in the data list is not valid.
            Private Sub tree_BeforeSelect(sender As Object, e As TreeViewCancelEventArgs) _
              Handles tree.BeforeSelect
                e.Cancel = Not dataList.IsValid
            End Sub
            </code>
            </example>
        </member>
        <member name="P:EWSoftware.ListControls.DataList.HasChanges">
            <summary>
            This read-only property can be used to see if the data source has been modified
            </summary>
            <value>The <see cref="M:EWSoftware.ListControls.DataList.CommitChanges"/> method is called first to commit any pending changes to the
            data source.  The data list can detect changes only if the data source is a <c>DataSet</c>,
            <c>DataView</c>, or a <c>DataTable</c>.  In those cases, it returns true if the data source has been
            modified or false if it has not.  For all other data source types, it will always return false.  You
            may override this property in order to extend the types that it knows about and detect changes in
            them.</value>
            <example>
            <code language="cs">
            // Assume daItems is a data adapter, dsItems is a DataSet and
            // dsItems is the data source for dlList (a data list control).
            // If the data list has changes, save them.
            if(dlList.HasChanges)
                daItems.Update(dsItems);
            </code>
            <code language="vbnet">
            ' Assume daItems is a data adapter, dsItems is a DataSet and
            ' dsItems is the data source for dlList (a data list control).
            ' If the data list has changes, save them.
            If dlList.HasChanges Then
                daItems.Update(dsItems)
            End If
            </code>
            </example>
        </member>
        <member name="P:EWSoftware.ListControls.DataList.IsBinding">
            <summary>
            This read-only property can be used to see if the data list is in the process of binding to its data
            source.
            </summary>
            <value>This will return true if binding is taking place.  This is useful for suppressing event
            handlers that may cause undesirable results if executed while binding to the data source.</value>
        </member>
        <member name="P:EWSoftware.ListControls.DataList.IsUndoing">
            <summary>
            This read-only property can be used to see if changes are being undone
            </summary>
            <value>This will return true if changes are being canceled.  This is useful for suppressing event
            handlers that may cause undesirable results if executed while undoing or canceling changes to a row.
            </value>
        </member>
        <member name="P:EWSoftware.ListControls.DataList.Item(System.String)">
            <summary>
            This can be used to get the value of the specified column in the currently selected item
            </summary>
            <param name="colName">The column name of the item to get.  This can be any column in the data source,
            not just those displayed by the control.</param>
            <value>Returns the entry at the specified column in the currently selected item.  If there is no data
            source or the column cannot be found, this returns null.</value>
            <overloads>There are two overloads for this property</overloads>
        </member>
        <member name="P:EWSoftware.ListControls.DataList.Item(System.Int32,System.String)">
            <summary>
            This can be used to get the value of the specified column in the specified row of the data list's
            data source.
            </summary>
            <param name="rowIdx">The row index of the item.</param>
            <param name="colName">The column name of the item to get.  This can be any column in the data source,
            not just those displayed by the control.</param>
            <value>Returns the entry at the specified column in the specified row.  If the row is out of bounds
            or if the column cannot be found, this will return null.</value>
        </member>
        <member name="P:EWSoftware.ListControls.DataList.BackgroundImage">
            <summary>
            The data list does not use this property so it is hidden.  It always returns null.
            </summary>
            <exclude/>
        </member>
        <member name="P:EWSoftware.ListControls.DataList.AutoScroll">
            <summary>
            The data list does not use this property so it is hidden.  It always returns false.
            </summary>
            <exclude/>
        </member>
        <member name="P:EWSoftware.ListControls.DataList.AutoScrollMargin">
            <summary>
            The data list does not use this property so it is hidden.  It always returns the base margin.
            </summary>
            <exclude/>
        </member>
        <member name="P:EWSoftware.ListControls.DataList.AutoScrollMinSize">
            <summary>
            The data list does not use this property so it is hidden.  It always returns the base size.
            </summary>
            <exclude/>
        </member>
        <member name="E:EWSoftware.ListControls.DataList.BackgroundImageChanged">
            <summary>
            The data list does not use the background image so this event is hidden.
            </summary>
            <exclude/>
        </member>
        <member name="E:EWSoftware.ListControls.DataList.ItemDataBound">
            <summary>
            This event is raised when a row item is data bound
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.OnItemDataBound(EWSoftware.ListControls.DataListEventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.DataList.ItemDataBound"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="E:EWSoftware.ListControls.DataList.HeaderDataBound">
            <summary>
            This event is raised when the header is data bound
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.OnHeaderDataBound(EWSoftware.ListControls.DataListEventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.DataList.HeaderDataBound"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="E:EWSoftware.ListControls.DataList.FooterDataBound">
            <summary>
            This event is raised when the footer is data bound
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.OnFooterDataBound(EWSoftware.ListControls.DataListEventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.DataList.FooterDataBound"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="E:EWSoftware.ListControls.DataList.AddingRow">
            <summary>
            This event is raised just prior to adding an item to the data source
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.OnAddingRow(EWSoftware.ListControls.DataListCancelEventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.DataList.AddingRow"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="E:EWSoftware.ListControls.DataList.AddedRow">
            <summary>
            This event is raised after adding an item to the data source
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.OnAddedRow(EWSoftware.ListControls.DataListEventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.DataList.AddedRow"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="E:EWSoftware.ListControls.DataList.DeletingRow">
            <summary>
            This event is raised just prior to deleting an item from the data source
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.OnDeletingRow(EWSoftware.ListControls.DataListCancelEventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.DataList.DeletingRow"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="E:EWSoftware.ListControls.DataList.DeletedRow">
            <summary>
            This event is raised after deleting an item from the data source
            </summary>
            <remarks>If there are no more rows after the deletion, the <see cref="E:EWSoftware.ListControls.DataList.NoRows"/> event is also raised</remarks>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.OnDeletedRow(EWSoftware.ListControls.DataListEventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.DataList.DeletedRow"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="E:EWSoftware.ListControls.DataList.CancelingEdits">
            <summary>
            This event is raised just prior to canceling edits to a row via the Escape key
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.OnCancelingEdits(EWSoftware.ListControls.DataListCancelEventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.DataList.CancelingEdits"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="E:EWSoftware.ListControls.DataList.CanceledEdits">
            <summary>
            This event is raised after canceling edits via the Escape key
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.OnCanceledEdits(EWSoftware.ListControls.DataListEventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.DataList.CanceledEdits"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="E:EWSoftware.ListControls.DataList.Current">
            <summary>
            This event is raised when a row is made the current row
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.OnCurrent(EWSoftware.ListControls.DataListEventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.DataList.Current"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="E:EWSoftware.ListControls.DataList.NoRows">
            <summary>
            This event is raised after refreshing the data source or after deleting a row and there are no more
            rows in the data source.
            </summary>
            <remarks>This event can be used to disable bound controls and/or display a message asking the user to
            add a new row.</remarks>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.OnNoRows(System.EventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.DataList.NoRows"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="E:EWSoftware.ListControls.DataList.BeginDrag">
            <summary>
            This event is raised when a drag and drop operation is initiated
            </summary>
            <remarks>A drag and drop operation is initiated whenever the mouse button is clicked and held within
            an existing selection in the row headers and is then dragged.</remarks>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.OnBeginDrag(EWSoftware.ListControls.DataListBeginDragEventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.DataList.BeginDrag"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="E:EWSoftware.ListControls.DataList.DataSourceChanged">
            <summary>
            This event is raised when the <see cref="P:EWSoftware.ListControls.DataList.DataSource"/> is changed
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.OnDataSourceChanged(System.EventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.DataList.DataSourceChanged"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="E:EWSoftware.ListControls.DataList.ChangePolicyModified">
            <summary>
            This event is raised when the change policy for the data source is modified (i.e. changes to indicate
            whether or not adds, edits, or deletes are allowed).
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.OnChangePolicyModified(EWSoftware.ListControls.ChangePolicyEventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.DataList.ChangePolicyModified"/> event for the control and calls the
            <see cref="M:EWSoftware.ListControls.TemplateControl.ChangePolicyModified"> TemplateControl.ChangePolicyModified</see> method
            in all initialized rows in the control including any header and footer templates.
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="E:EWSoftware.ListControls.DataList.AddDeleteButtonsVisibleChanged">
            <summary>
            This event is raised when the <see cref="P:EWSoftware.ListControls.DataList.AddDeleteButtonsVisible"/> property changes
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.OnAddDeleteButtonsVisibleChanged(System.EventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.DataList.AddDeleteButtonsVisibleChanged"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="E:EWSoftware.ListControls.DataList.NavigationControlsVisibleChanged">
            <summary>
            This event is raised when the <see cref="P:EWSoftware.ListControls.DataList.NavigationControlsVisible"/> property changes
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.OnNavigationControlsVisibleChanged(System.EventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.DataList.NavigationControlsVisibleChanged"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="E:EWSoftware.ListControls.DataList.SeparatorsVisibleChanged">
            <summary>
            This event is raised when the <see cref="P:EWSoftware.ListControls.DataList.SeparatorsVisible"/> property changes
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.OnSeparatorsVisibleChanged(System.EventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.DataList.SeparatorsVisibleChanged"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="E:EWSoftware.ListControls.DataList.SeparatorColorChanged">
            <summary>
            This event is raised when the <see cref="P:EWSoftware.ListControls.DataList.SeparatorColor"/> changes
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.OnSeparatorColorChanged(System.EventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.DataList.SeparatorColorChanged"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="E:EWSoftware.ListControls.DataList.SeparatorHeightChanged">
            <summary>
            This event is raised when the <see cref="P:EWSoftware.ListControls.DataList.SeparatorHeight"/> changes
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.OnSeparatorHeightChanged(System.EventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.DataList.SeparatorHeightChanged"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="E:EWSoftware.ListControls.DataList.RowHeadersVisibleChanged">
            <summary>
            This event is raised when the <see cref="P:EWSoftware.ListControls.DataList.RowHeadersVisible"/> property changes
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.OnRowHeadersVisibleChanged(System.EventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.DataList.RowHeadersVisibleChanged"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="E:EWSoftware.ListControls.DataList.RowHeadersFlatChanged">
            <summary>
            This event is raised when the <see cref="P:EWSoftware.ListControls.DataList.RowHeadersFlat"/> property changes
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.OnRowHeadersFlatChanged(System.EventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.DataList.RowHeadersFlatChanged"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="E:EWSoftware.ListControls.DataList.RowHeaderWidthChanged">
            <summary>
            This event is raised when the <see cref="P:EWSoftware.ListControls.DataList.RowHeaderWidth"/> changes
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.OnRowHeaderWidthChanged(System.EventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.DataList.RowHeaderWidthChanged"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="E:EWSoftware.ListControls.DataList.RowHeaderBackColorChanged">
            <summary>
            This event is raised when the <see cref="P:EWSoftware.ListControls.DataList.RowHeaderBackColor"/> changes
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.OnRowHeaderBackColorChanged(System.EventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.DataList.RowHeaderBackColorChanged"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="E:EWSoftware.ListControls.DataList.RowHeaderForeColorChanged">
            <summary>
            This event is raised when the <see cref="P:EWSoftware.ListControls.DataList.RowHeaderForeColor"/> changes
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.OnRowHeaderForeColorChanged(System.EventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.DataList.RowHeaderForeColorChanged"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="E:EWSoftware.ListControls.DataList.SelectionBackColorChanged">
            <summary>
            This event is raised when the <see cref="P:EWSoftware.ListControls.DataList.SelectionBackColor"/> changes
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.OnSelectionBackColorChanged(System.EventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.DataList.SelectionBackColorChanged"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="E:EWSoftware.ListControls.DataList.SelectionForeColorChanged">
            <summary>
            This event is raised when the <see cref="P:EWSoftware.ListControls.DataList.SelectionForeColor"/> changes
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.OnSelectionForeColorChanged(System.EventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.DataList.SelectionForeColorChanged"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="E:EWSoftware.ListControls.DataList.RepeatWaitChanged">
            <summary>
            This event is raised when the <see cref="P:EWSoftware.ListControls.DataList.RepeatWait"/> value changes
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.OnRepeatWaitChanged(System.EventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.DataList.RepeatWaitChanged"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="E:EWSoftware.ListControls.DataList.RepeatIntervalChanged">
            <summary>
            This event is raised when the <see cref="P:EWSoftware.ListControls.DataList.RepeatInterval"/> changes
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.OnRepeatIntervalChanged(System.EventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.DataList.RepeatIntervalChanged"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.ShouldSerializeAllowAdditions">
            <summary>
            The designer uses this to determine whether or not to serialize changes to the AllowAdditions
            property.
            </summary>
            <returns>True to serialize the property, false if not</returns>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.ResetAllowAdditions">
            <summary>
            Reset the AllowAdditions property
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.ShouldSerializeAllowEdits">
            <summary>
            The designer uses this to determine whether or not to serialize changes to the AllowEdits property
            </summary>
            <returns>True to serialize the property, false if not</returns>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.ResetAllowEdits">
            <summary>
            Reset the AllowEdits property
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.ShouldSerializeAllowDeletes">
            <summary>
            The designer uses this to determine whether or not to serialize changes to the AllowDeletes property
            </summary>
            <returns>True to serialize the property, false if not</returns>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.ResetAllowDeletes">
            <summary>
            Reset the AllowAdditions property
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.ShouldSerializeCaptionFont">
            <summary>
            The designer uses this to determine whether or not to serialize changes to the CaptionFont property
            </summary>
            <returns>True to serialize the property, false if not</returns>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.ResetCaptionFont">
            <summary>
            Reset the CaptionFont property
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.AdjustHeaderFooterPosition(System.Int32)">
            <summary>
            This is called to scroll the header and footer controls with the row panel when necessary
            </summary>
            <param name="left">The new left position</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.CalculateGlyphPoints">
            <summary>
            This is used to calculate the points for the current row and new row glyphs
            </summary>
            <remarks>We could use icons or bitmaps, but by drawing them we can have user-defined colors for the
            row headers.</remarks>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.InitializeAndBindVisibleRows">
            <summary>
            This is used to initialize and bind all visible rows when needed
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.WireUpRelatedDataSourceEvents(System.Boolean)">
            <summary>
            This is used to connect or disconnect events on the related data source when this control's data
            source refers to a relationship.  This ensures that this control is refreshed whenever the position
            changes or information is updated in the related data source.
            </summary>
            <param name="connect">True to connect, false to disconnect</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.RelatedPosition_Changed(System.Object,System.EventArgs)">
            <summary>
            This is used to rebind the list when the related data source position changes
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.RelatedList_Changed(System.Object,System.ComponentModel.ListChangedEventArgs)">
            <summary>
            This is used to rebind rows when a related data source item changes
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.RelatedItem_Changed(System.Object,System.Windows.Forms.ItemChangedEventArgs)">
            <summary>
            This is used to rebind rows when a related data source item changes
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.DataSource_MetaDataChanged(System.Object,System.EventArgs)">
            <summary>
            This is called when the data source's meta data changes in some way
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.DataSource_ListChanged(System.Object,System.ComponentModel.ListChangedEventArgs)">
            <summary>
            This is called when the data source is changed in some way
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.DataSource_ItemChanged(System.Object,System.Windows.Forms.ItemChangedEventArgs)">
            <summary>
            This is called when an item in the data source changes
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="ea">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.DataSource_PositionChanged(System.Object,System.EventArgs)">
            <summary>
            This is called when the position in the data source changes
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.txtRowNum_Leave(System.Object,System.EventArgs)">
            <summary>
            Set the focus to the specified row when the row text box loses focus
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.RowTemplate_Enter(System.Object,System.EventArgs)">
            <summary>
            This updates the row number text box when a row template gains the focus.  It also physically adds a
            new row to the data source if the new row template is focused.
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.RowTemplate_Leave(System.Object,System.EventArgs)">
            <summary>
            This is used to remove the new row added for the new row template when it loses focus and nothing was
            changed.
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.btnFirst_Click(System.Object,System.EventArgs)">
            <summary>
            Go to the first row unless validation failed somewhere
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.btnPrev_Click(System.Object,System.EventArgs)">
            <summary>
            Go to the previous row unless validation failed somewhere
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.btnPrev_MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Set the timer for auto-repeat unless validation fails and the button doesn't have the focus
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event parameters</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.btnPrev_MouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Clear the timer for auto-repeat
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event parameters</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.btnNext_Click(System.Object,System.EventArgs)">
            <summary>
            Go to the next row unless validation failed somewhere
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.btnNext_MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Set the timer for auto-repeat unless validation fails and the button doesn't have the focus
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event parameters</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.btnNext_MouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Clear the timer for auto-repeat
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event parameters</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.btnLast_Click(System.Object,System.EventArgs)">
            <summary>
            Go to the last row unless validation failed somewhere
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.btnAdd_Click(System.Object,System.EventArgs)">
            <summary>
            Handle the Add button click unless validation failed somewhere
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event parameters</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.btnDelete_Click(System.Object,System.EventArgs)">
            <summary>
            Handle the Delete button click
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event parameters</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.tmrRepeat_Tick(System.Object,System.EventArgs)">
            <summary>
            Fire the appropriate event for next/previous button auto-repeat
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event parameters</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.EnforceValidDataMember(System.Object,System.String)">
            <summary>
            This is called to ensure that the specified data member is valid for the given data source.  If not
            valid, it is cleared.
            </summary>
            <param name="ds">The data source to check</param>
            <param name="member">The data member to check</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.SetListManager(System.Object,System.String,System.Boolean)">
            <summary>
            This is called to get information about the data source and the data member and to hook up the
            necessary event handlers.
            </summary>
            <param name="newDataSource">The new data source.</param>
            <param name="newDataMember">The new data member in the data source.</param>
            <param name="force">True to force the information to be updated, false to only update the info if
            something really changed.</param>
            <exception cref="T:System.ArgumentException">This is thrown if the data member cannot be found in the data
            source.</exception>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.BindData">
            <summary>
            This is used to create the rows and bind each one to a row in the data source
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.AddNewRowTemplate">
            <summary>
            The DataList supports having a blank new row template like MS-Access does.  This row isn't bound
            until it is actually focused.  See RowTemplate_Enter for details.
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.AddRowInternal">
            <summary>
            This is called when a row is added to the data source externally
            </summary>
            <remarks>If additions are allowed, the new row template is bound to the new row and the new row
            template is recreated.  If additions are not allowed, it creates a new template and bind it to the
            new row.</remarks>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.DeleteRowInternal(System.Int32,System.Boolean)">
            <summary>
            This is called to handle the actual deletion of rows when requested by the user and also when a row
            is deleted externally from the data source other than by us.
            </summary>
            <param name="delRow">The row to delete</param>
            <param name="externalRequest">True if the request didn't come from us, false if it was requested by
            us.</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.RemoveRows">
            <summary>
            This is used to clear out and disposed of the row controls
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.HandleEscapeKey">
            <summary>
            Handle the escape key press to cancel changes
            </summary>
            <returns>Always returns true</returns>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.HandlePageUpPageDownKeys(System.Windows.Forms.Keys,System.Boolean)">
            <summary>
            Handle the page up and page down keys to scroll through the list
            </summary>
            <param name="key">The key that was pressed</param>
            <param name="ctrlPressed">True if Control is pressed, false if not</param>
            <returns>True if handled, false if not</returns>
            <remarks>If the active control is a multi-line textbox without all of its text selected, the data
            list lets it handle the key instead so that you can page up/down through its text.</remarks>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.HandleSwitchSectionKey">
            <summary>
            Handle the Switch Section shortcut key
            </summary>
            <returns>Always returns true</returns>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources, false to just release
            unmanaged resources.</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
            <summary>
            This is overridden to handle the various extra keys recognized by this control
            </summary>
            <param name="msg">The command key message</param>
            <param name="keyData">The key to process</param>
            <returns>True if the key was handled, false if not</returns>
            <remarks>This handles the various extra shortcut keys, Ctrl+Tab and Ctrl+Shift+Tab to shift the focus
            out of the data list, Escape to cancel changes, and Page Up/Down and Ctrl+Page Up/Down to scroll
            through the list.</remarks>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.ProcessMnemonic(System.Char)">
            <summary>
            This is overridden so that the current row gets a chance to process the mnemonic first
            </summary>
            <param name="charCode">The character code to process as a mnemonic</param>
            <returns>True if the character code was processed as a mnemonic or false if it was not</returns>
            <remarks>The current row is given a chance to handle it first.  If not handled, then the header and
            footer controls (if any) are given a chance to process it.</remarks>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.Select(System.Boolean,System.Boolean)">
            <summary>
            This is overridden to ensure that the current row regains the focus when tabbing into the control
            </summary>
            <param name="directed">True to specify the direction of the control to select, false if not.</param>
            <param name="forward">The direction of the selection.  True for forward, false for backwards.</param>
            <overloads>There are two extra overloads for this method</overloads>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.OnBindingContextChanged(System.EventArgs)">
            <summary>
            This is overridden to refresh the data source when the binding context changes
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.OnDragOver(System.Windows.Forms.DragEventArgs)">
            <summary>
            This is overridden to scroll the data list as needed during drag and drop operations
            </summary>
            <param name="drgevent">The event arguments</param>
            <remarks>The list will scroll up if within 20 pixels of the top of the row panel.  It will scroll
            down if within 20 pixels of the bottom of the row panel.</remarks>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.OnValidating(System.ComponentModel.CancelEventArgs)">
            <summary>
            This is overridden to provide validation support
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.OnSizeChanged(System.EventArgs)">
            <summary>
            This is overridden to initialize and bind any newly visible rows after the size changes
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.OnLayout(System.Windows.Forms.LayoutEventArgs)">
            <summary>
            This is used to reposition the controls when the control attributes change
            </summary>
            <param name="levent">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This is overridden to handle selecting rows by clicking and/or dragging the mouse on the row headers
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This is overridden to handle selecting rows by dragging the mouse on the row headers
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This is overridden to handle selecting rows by clicking and/or dragging the mouse on the row headers
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            This is overridden to ignore the row header area to help prevent flickering
            </summary>
            <param name="pevent">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            This is overridden to draw row headers, a separator between the row panel and the header and
            footer/navigation button section, and to bind the rows as they scroll into view.
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.WndProc(System.Windows.Forms.Message@)">
            <summary>
            This is overridden to handle gaining the focus correctly
            </summary>
            <param name="m">The message</param>
            <remarks>Normal focusing behavior returns the focus to the first row or last row.  This is overridden
            to keep the focus on the last selected row.</remarks>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.SetDataBinding(System.Object,System.String,System.Type)">
            <summary>
            Calling this method is the equivalent of setting the <see cref="P:EWSoftware.ListControls.DataList.DataSource"/>, <see cref="P:EWSoftware.ListControls.DataList.DataMember"/>,
            and <see cref="P:EWSoftware.ListControls.DataList.RowTemplate"/> properties individually.
            </summary>
            <param name="dataSource">The data source to use</param>
            <param name="member">The data member in the data source to use, if any</param>
            <param name="rowTemplateType">The template control type to use for creating the rows</param>
            <overloads>There are two overloads for this method</overloads>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.SetDataBinding(System.Object,System.String,System.Type,System.Type,System.Type)">
            <summary>
            Calling this method is the equivalent of setting the <see cref="P:EWSoftware.ListControls.DataList.DataSource"/>, <see cref="P:EWSoftware.ListControls.DataList.DataMember"/>,
            <see cref="P:EWSoftware.ListControls.DataList.RowTemplate"/>, <see cref="P:EWSoftware.ListControls.DataList.HeaderTemplate"/>, and <see cref="P:EWSoftware.ListControls.DataList.FooterTemplate"/> properties
            individually.
            </summary>
            <param name="dataSource">The data source to use</param>
            <param name="member">The data member in the data source to use, if any</param>
            <param name="rowTemplateType">The template control type to use for creating the rows</param>
            <param name="headerTemplateType">The template control type to use for creating the header, if any</param>
            <param name="footerTemplateType">The template control type to use for creating the footer, if any</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.MoveTo(System.Int32)">
            <summary>
            This method is used to move the focus to the specified row in the data source
            </summary>
            <param name="newRow">The zero-based row number to which the focus is moved</param>
            <returns>True if the specified row now has the focus or false if the focus could not be set due to
            validation failure on the current row.</returns>
            <remarks>Before moving to the specified row, the <see cref="P:EWSoftware.ListControls.TemplateControl.IsValid"/> property is
            checked on the current row template to ensure that it is safe to move.  If it returns false, the
            focus will stay on the current row.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">This is thrown if the value is outside the bounds of
            the list or if there is no data source.</exception>
            <overloads>There are two overloads for this method</overloads>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.MoveTo(EWSoftware.ListControls.RowPosition)">
            <summary>
            This method is used to move the focus to the specified fixed row position in the data source
            </summary>
            <param name="position">The position to which the focus is moved</param>
            <returns>True if the specified position now has the focus or false if the focus could not be set due
            to validation failure on the current row.</returns>
            <remarks>Before moving to the specified position, the <see cref="P:EWSoftware.ListControls.TemplateControl.IsValid"/> property
            is checked on the current row template to ensure that it is safe to move.  If it returns false, the
            focus will stay on the current row.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">This is thrown if there is no data source or there are
            no rows.</exception>
            <exception cref="T:System.NotSupportedException">This is thrown if additions are not currently allowed as
            defined by the current <see cref="P:EWSoftware.ListControls.DataList.AllowAdditions"/> property setting and an attempt is made to move
            to the <c>NewRow</c> position.</exception>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.DeleteRow(System.Int32)">
            <summary>
            This can be used as an alternative to the <c>Delete</c> button to delete a row from the list
            </summary>
            <param name="delRow">The row to delete</param>
            <returns>True if the row was deleted, false if not deleted due to cancellation</returns>
            <remarks>This is equivalent to clicking the <c>Delete</c> button but it allows you to put a button on
            each row's template, or in the header or footer template, or handle the delete operation in some
            other fashion.  The specified row's <see cref="P:EWSoftware.ListControls.TemplateControl.CanDelete"/> method is called and, if
            it allows the delete to continue, the <see cref="E:EWSoftware.ListControls.DataList.DeletingRow"/> event is fired prior to deleting the
            specified row.  If the template will allow the deletion and the <c>DeletingRow</c> event is not
            canceled, the specified row is deleted and the <see cref="E:EWSoftware.ListControls.DataList.DeletedRow"/> event is fired.</remarks>
            <exception cref="T:System.NotSupportedException">This is thrown if there is no row template defined or if
            deletions are not currently allowed as defined by the current <see cref="P:EWSoftware.ListControls.DataList.AllowDeletes"/> property
            setting.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">This is thrown if the specified row is outside the
            bounds of the list or if there is no data source.</exception>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.CommitChanges">
             <summary>
             This is used to manually commit pending changes to the current row in the data source
             </summary>
             <remarks><para>This will call the <see cref="M:EWSoftware.ListControls.TemplateControl.CommitChanges"/> method on the current
             row template.  It will also call the <c>EndCurrentEdit</c> method for the data source on the current
             binding context.</para>
             
             <para>Due to the way data binding works in .NET, pending changes to the current row may not have been
             committed to the data source when you are ready to save changes to the underlying data source.  As
             such, you should always call the <c>CommitChanges</c> or <see cref="M:EWSoftware.ListControls.DataList.CancelChanges"/> method on the
             data list control prior to checking for or saving changes in its underlying data source.</para>
             </remarks>
             <example>
             Assume <c>dataSet</c> has been assigned to <c>dataList</c> as its data source.
             <code language="cs">
             // Commit any pending edits in the data list
             dataList.CommitChanges();
            
             // If changes were made to the data source, save them
             if(dataSet.HasChanges())
                 dataAdapter.Update(dataSet);
             </code>
             <code language="vbnet">
             ' Commit any pending edits in the data list
             dataList.CommitChanges()
            
             ' If changes were made to the data source, save them
             If dataSet.HasChanges() Then
                 dataAdapter.Update(dataSet)
             End If
             </code>
             </example>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.CancelChanges">
            <summary>
            This is used to manually cancel pending changes to the current row in the data source
            </summary>
            <remarks><para>This will call the <see cref="M:EWSoftware.ListControls.TemplateControl.CancelChanges"/> method on the current
            row template.  It will also call the <c>CancelCurrentEdit</c> method for the data source in the
            current binding context.</para>
            
            <para>Due to the way data binding works in .NET, pending changes to the current row may not have been
            committed to the data source when you are ready to save changes to the underlying data source.  As
            such, you should always call the <see cref="M:EWSoftware.ListControls.DataList.CommitChanges"/> or <c>CancelChanges</c> method on the
            data list control prior to checking for or saving changes in its underlying data source.</para>
            </remarks>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.Select(System.Int32,System.Int32,System.Int32)">
            <summary>
            This is used to set the selected range of rows
            </summary>
            <param name="start">The zero-based starting row number</param>
            <param name="end">The zero-based ending row number</param>
            <param name="ensureVisible">The row to ensure is visible after setting the selection.  Specify -1 to
            not change the visible row.</param>
            <remarks>If either value is outside the current row count, it will be forced to a valid value.  The
            range will also be swapped if necessary to start from the lowest value and end at the highest
            value.</remarks>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.EnsureVisible(System.Int32)">
            <summary>
            This is used to ensure that the specified row is visible in the data list
            </summary>
            <param name="row">The zero-based row number to ensure is visible</param>
            <remarks>If not visible, the specified row is scrolled into view.  If the row number is outside the
            bounds of the current rows, it is forced to a valid value.</remarks>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.HitTest(System.Drawing.Point)">
            <summary>
            Test a point within the data list control to see within which part it falls
            </summary>
            <param name="p">The point to test</param>
            <returns>Information about the location</returns>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.Find(System.String,System.Object)">
            <summary>
            Find an item value in the specified member of the data source
            </summary>
            <param name="member">The member in the data source to search for the key value</param>
            <param name="key">The item to find in the data source</param>
            <returns>The zero-based index of the found item or -1 if not found</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">This is thrown if specified member could not be found
            in the data source.</exception>
            <exception cref="T:System.ArgumentNullException">This is thrown if the member name or the item to find is
            null.</exception>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.FindStringExact(System.String,System.String)">
            <summary>
            Finds the first item whose given member matches the specified string. The search is not
            case-sensitive.
            </summary>
            <param name="member">The member in the data source to search for the string value</param>
            <param name="key">The string for which to search</param>
            <returns>The zero-based index of the found item or -1 if not found</returns>
            <overloads>There are two overloads for this method</overloads>
            <exception cref="T:System.ArgumentNullException">This is thrown if the member name or the item to find is
            null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">This is thrown if specified member could not be found
            in the data source.</exception>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.FindStringExact(System.String,System.String,System.Int32)">
            <summary>
            Finds the first item after the given index whose given data member matches the given string. The
            search is not case-sensitive.
            </summary>
            <param name="member">The member in the data source to search for the string value.</param>
            <param name="key">The string for which to search.</param>
            <param name="startIndex">The zero-based index of the item before the first item to be searched.  Set
            to -1 to search from the beginning of the list.</param>
            <returns>The zero-based index of the first item found.  Returns -1 if no match is found.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">This is thrown if the start index value is not within
            the bounds of the list and it is not -1 or if the specified member could not be found in the data
            source.</exception>
            <exception cref="T:System.ArgumentNullException">This is thrown if the member name or the item to find is
            null.</exception>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.FindString(System.String,System.String)">
            <summary>
            Finds the first item whose given member starts with the given string. The search is not
            case-sensitive.
            </summary>
            <param name="member">The member in the data source to search for the string value</param>
            <param name="key">The string for which to search</param>
            <returns>The zero-based index of the found item or -1 if not found</returns>
            <overloads>There are three overloads for this method</overloads>
            <exception cref="T:System.ArgumentNullException">This is thrown if the member name or the item to find is
            null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">This is thrown if specified member could not be found
            in the data source.</exception>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.FindString(System.String,System.String,System.Int32)">
            <summary>
            Finds the first item after the given index whose given data member starts with the given string.  The
            search is not case-sensitive.
            </summary>
            <param name="member">The member in the data source to search for the string value.</param>
            <param name="key">The string for which to search.</param>
            <param name="startIndex">The zero-based index of the item before the first item to be searched.  Set
            to -1 to search from the beginning of the list.</param>
            <returns>The zero-based index of the first item found.  Returns -1 if no match is found.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">This is thrown if the start index value is not within
            the bounds of the list and it is not -1 or if the specified member could not be found in the data
            source.</exception>
            <exception cref="T:System.ArgumentNullException">This is thrown if the member name or the item to find is
            null.</exception>
        </member>
        <member name="M:EWSoftware.ListControls.DataList.FindString(System.String,System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Finds the first item after the given index whose given data member matches the given string.  Partial
            matches and case-sensitivity are optional.
            </summary>
            <param name="member">The member in the data source to search for the string value.</param>
            <param name="key">The string for which to search.</param>
            <param name="startIndex">The zero-based index of the item before the first item to be searched.  Set
            to -1 to search from the beginning of the list.</param>
            <param name="exactMatch">Specify true to find an exact match or false to find the first item starting
            with the specified string.</param>
            <param name="ignoreCase">Specify true for a case-insensitive search or false for a case-sensitive
            search.</param>
            <returns>The zero-based index of the first item found.  Returns -1 if no match is found.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">This is thrown if the start index value is not within
            the bounds of the list and it is not -1 or if the specified member could not be found in the data
            source.</exception>
            <exception cref="T:System.ArgumentNullException">This is thrown if the member name or the item to find is
            null.</exception>
        </member>
        <member name="T:EWSoftware.ListControls.DataListHitTestInfo">
            <summary>
            This is used to contain information about a location within a <see cref="T:EWSoftware.ListControls.DataList"/> control such as the
            row and/or area at a specified location.
            </summary>
        </member>
        <member name="F:EWSoftware.ListControls.DataListHitTestInfo.Nowhere">
            <summary>
            This can be used to compare a hit test result to see if it was in an undefined location
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataListHitTestInfo.Type">
            <summary>
            This read-only property returns the area of the data list at the location or <c>None</c> if there is
            nothing at the location.
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataListHitTestInfo.Row">
            <summary>
            This read-only property returns the zero-based row number at the location or -1 if there is no row at
            the location.
            </summary>
            <remarks>This will only be valid if <see cref="P:EWSoftware.ListControls.DataListHitTestInfo.Type"/> is set to <c>Row</c> or <c>RowHeader</c></remarks>
        </member>
        <member name="M:EWSoftware.ListControls.DataListHitTestInfo.#ctor(EWSoftware.ListControls.DataListHitType)">
            <summary>
            Constructor
            </summary>
            <param name="hitType">The area type at the location</param>
            <overloads>There are two overloads for the constructor</overloads>
        </member>
        <member name="M:EWSoftware.ListControls.DataListHitTestInfo.#ctor(EWSoftware.ListControls.DataListHitType,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="hitType">The area type at the location</param>
            <param name="hitRow">The row at the location</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataListHitTestInfo.Equals(System.Object)">
            <summary>
            This is overridden to compare hit test objects correctly
            </summary>
            <param name="obj">The object to which this instance is compared</param>
            <returns>Returns true if the object equals this instance, false if it does not</returns>
        </member>
        <member name="M:EWSoftware.ListControls.DataListHitTestInfo.GetHashCode">
            <summary>
            This is overridden to get a hash code for a hit test object
            </summary>
            <returns>Returns a hash code for the object</returns>
        </member>
        <member name="M:EWSoftware.ListControls.DataListHitTestInfo.ToString">
            <summary>
            This is overridden to convert a hit test object to a string
            </summary>
            <returns>Returns a string representation of the object.</returns>
        </member>
        <member name="T:EWSoftware.ListControls.DataNavigator">
            <summary>
            This control is used to navigate through a specified data source and perform operations on it such as
            editing, inserting, or deleting records, etc. along with other controls on the form that are bound to
            the same data source.
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataNavigator.ListManager">
            <summary>
            This returns the <see cref="T:System.Windows.Forms.CurrencyManager"/> that the data navigator is currently using to get data
            from the <see cref="P:EWSoftware.ListControls.DataNavigator.DataSource"/>/<see cref="P:EWSoftware.ListControls.DataNavigator.DataMember"/> pair.
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataNavigator.AddDeleteButtonsVisible">
            <summary>
            This property is used to set or get whether or not the add and delete buttons are displayed
            </summary>
            <value>The buttons are shown by default.  They can be hidden if you would prefer to handle add and
            delete operations via some other means such as other buttons on the parent form.</value>
        </member>
        <member name="P:EWSoftware.ListControls.DataNavigator.AllowAdditions">
            <summary>
            This is used to determine whether or not additions are allowed to be made to the data source
            </summary>
            <value>If set to true, the data source may override it if it does not allow additions</value>
        </member>
        <member name="P:EWSoftware.ListControls.DataNavigator.AllowEdits">
            <summary>
            This is used to determine whether or not edits are allowed to be made to the data source
            </summary>
            <value>If set to true, the data source may override it if it does not allow edits.  Note that it is
            up to the parent control or form to check this property and disable editing in its controls if this
            is set to false.</value>
        </member>
        <member name="P:EWSoftware.ListControls.DataNavigator.AllowDeletes">
            <summary>
            This is used to determine whether or not deletes are allowed to be made to the data source
            </summary>
            <value>If set to true, the data source may override it if it does not allow deletions</value>
        </member>
        <member name="P:EWSoftware.ListControls.DataNavigator.AddRowShortcut">
            <summary>
            This is used to set or get the shortcut key to use for adding a row
            </summary>
            <remarks>The default is <c>Ctrl+Shift+A</c>.  It is ignored if additions are not allowed</remarks>
        </member>
        <member name="P:EWSoftware.ListControls.DataNavigator.DeleteRowShortcut">
            <summary>
            This is used to set or get the shortcut key to use for deleting a row
            </summary>
            <remarks>The default is <c>Ctrl+Shift+D</c>.  It is ignored if deletes are not allowed</remarks>
        </member>
        <member name="P:EWSoftware.ListControls.DataNavigator.RowNumberNavShortcut">
            <summary>
            This is used to set or get the shortcut key to use for jumping to the row number navigation text box
            </summary>
            <remarks>The default is <c>F5</c>.</remarks>
        </member>
        <member name="P:EWSoftware.ListControls.DataNavigator.RepeatWait">
            <summary>
            This property is used to set or get the initial wait in milliseconds before the <c>Next</c> and
            <c>Previous</c> buttons auto-repeat to navigate through the data source.
            </summary>
            <value>The default is 500 milliseconds.  The delay cannot be set to less than 100 milliseconds</value>
            <exception cref="T:System.ArgumentOutOfRangeException">This is thrown if the value is less than 100</exception>
        </member>
        <member name="P:EWSoftware.ListControls.DataNavigator.RepeatInterval">
            <summary>
            This property is used to set or get the repeat delay in milliseconds for the <c>Next</c> and
            <c>Previous</c> buttons when they auto-repeat to navigate through the data source.
            </summary>
            <value>The default is 50 milliseconds.  The delay cannot be set to less than 20 milliseconds</value>
            <exception cref="T:System.ArgumentOutOfRangeException">This is thrown if the value is less than 20</exception>
        </member>
        <member name="P:EWSoftware.ListControls.DataNavigator.DataSource">
            <summary>
            This gets or sets the data source for the data navigator
            </summary>
            <value>The data source object must support the <see cref="T:System.Collections.IList"/> interface such as a
            <see cref="T:System.Data.DataSet"/> or an <see cref="T:System.Array"/>.  This property must be set in order for
            the control to display information.  If the data source contains multiple items to which the control
            can bind, use the <see cref="P:EWSoftware.ListControls.DataNavigator.DataMember"/> property to specify the sub-list to use.
            </value>
            <exception cref="T:System.ArgumentException">This is thrown if the data source does not support the
            <see cref="T:System.Collections.IList"/> interface.</exception>
        </member>
        <member name="P:EWSoftware.ListControls.DataNavigator.DataMember">
            <summary>
            This indicates the sub-list (if any) of the <see cref="P:EWSoftware.ListControls.DataNavigator.DataSource"/> to show in the data navigator
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataNavigator.RowCount">
            <summary>
            This read-only property can be used to get the current row count from the data source
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataNavigator.CurrentRow">
            <summary>
            This read-only property is used to get the zero-based row number of the currently selected row
            </summary>
            <value>If there is no data source or there are no rows in the data source, it returns -1</value>
            <remarks>To set the current row, use the <see cref="M:EWSoftware.ListControls.DataNavigator.MoveTo(System.Int32)"/> method</remarks>
        </member>
        <member name="P:EWSoftware.ListControls.DataNavigator.IsValid">
            <summary>
            This property can be used to query the current row to see if it is valid
            </summary>
            <value>Returns true if it is valid or there are no items, false if it is not</value>
            <remarks>This is useful in situations where the validating events are fired after certain other
            events (i.e. tree view and data grid item selection events).  This raises the
            <see cref="M:System.Windows.Forms.Control.OnValidating(System.ComponentModel.CancelEventArgs)"/> and <see cref="M:System.Windows.Forms.Control.OnValidated(System.EventArgs)"/> events on itself.</remarks>
            <example>
            <code language="cs">
            // Prevent a change of the tree view node if the current row in the
            // data navigator is not valid.
            private void tree_BeforeSelect(object sender, TreeViewCancelEventArgs e)
            {
                e.Cancel = !dataNav.IsValid;
            }
            </code>
            <code language="vbnet">
            ' Prevent a change of the tree view node if the current row in the
            ' data navigator is not valid.
            Private Sub tree_BeforeSelect(sender As Object, e As TreeViewCancelEventArgs) _
              Handles tree.BeforeSelect
                e.Cancel = Not dataNav.IsValid
            End Sub
            </code>
            </example>
        </member>
        <member name="P:EWSoftware.ListControls.DataNavigator.HasChanges">
            <summary>
            This read-only property can be used to see if the data source has been modified
            </summary>
            <value>The <see cref="M:EWSoftware.ListControls.DataNavigator.CommitChanges"/> method is called first to commit any pending changes to the
            data source.  The data navigator can detect changes only if the data source is a <c>DataSet</c>,
            <c>DataView</c>, or a <c>DataTable</c>.  In those cases, it returns true if the data source has been
            modified or false if it has not.  For all other data source types, it will always returns false.
            You may override this property in order to extend the types that it knows about and detect changes
            in them.</value>
            <example>
            <code language="cs">
            // Assume daItems is a data adapter, dsItems is a DataSet and
            // dsItems is the data source for dnNav (a data navigator control).
            // If the data navigator has changes, save them.
            if(dnNav.HasChanges)
                daItems.Update(dsItems);
            </code>
            <code language="vbnet">
            ' Assume daItems is a data adapter, dsItems is a DataSet and
            ' dsItems is the data source for dnNav (a data navigator control).
            ' If the data navigator has changes, save them.
            If dnNav.HasChanges Then
                daItems.Update(dsItems)
            End If
            </code>
            </example>
        </member>
        <member name="P:EWSoftware.ListControls.DataNavigator.Item(System.String)">
            <summary>
            This can be used to get the value of the specified column in the currently selected item
            </summary>
            <param name="colName">The column name of the item to get.  This can be any column in the data source,
            not just those displayed by the bound controls in the parent.</param>
            <value>This returns the entry at the specified column in the currently selected item.  If there is no
            data source or the column cannot be found, this returns null.</value>
            <overloads>There are two overloads for this property</overloads>
        </member>
        <member name="P:EWSoftware.ListControls.DataNavigator.Item(System.Int32,System.String)">
            <summary>
            This can be used to get the value of the specified column in the specified row of the data
            navigator's data source.
            </summary>
            <param name="rowIdx">The row index of the item.</param>
            <param name="colName">The column name of the item to get.  This can be any column in the data source,
            not just those displayed by the bound controls in the parent.</param>
            <value>This returns the entry at the specified column in the specified row.  If the row is out of
            bounds or if the column cannot be found, this will return null.</value>
        </member>
        <member name="P:EWSoftware.ListControls.DataNavigator.BackgroundImage">
            <summary>
            The data navigator does not use this property so it is hidden.  It always returns null.
            </summary>
            <exclude/>
        </member>
        <member name="P:EWSoftware.ListControls.DataNavigator.AutoScroll">
            <summary>
            The data navigator does not use this property so it is hidden.  It always returns false.
            </summary>
            <exclude/>
        </member>
        <member name="P:EWSoftware.ListControls.DataNavigator.AutoScrollMargin">
            <summary>
            The data navigator does not use this property so it is hidden.  It always returns the base margin.
            </summary>
            <exclude/>
        </member>
        <member name="P:EWSoftware.ListControls.DataNavigator.AutoScrollMinSize">
            <summary>
            The data navigator does not use this property so it is hidden.  It always returns the base size.
            </summary>
            <exclude/>
        </member>
        <member name="E:EWSoftware.ListControls.DataNavigator.BackgroundImageChanged">
            <summary>
            The data navigator does not use the background image so this event is hidden
            </summary>
            <exclude/>
        </member>
        <member name="E:EWSoftware.ListControls.DataNavigator.AddDeleteButtonsVisibleChanged">
            <summary>
            This event is raised when the <see cref="P:EWSoftware.ListControls.DataNavigator.AddDeleteButtonsVisible"/> property changes
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataNavigator.OnAddDeleteButtonsVisibleChanged(System.EventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.DataNavigator.AddDeleteButtonsVisibleChanged"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="E:EWSoftware.ListControls.DataNavigator.RepeatWaitChanged">
            <summary>
            This event is raised when the <see cref="P:EWSoftware.ListControls.DataNavigator.RepeatWait"/> value changes
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataNavigator.OnRepeatWaitChanged(System.EventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.DataNavigator.RepeatWaitChanged"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="E:EWSoftware.ListControls.DataNavigator.RepeatIntervalChanged">
            <summary>
            This event is raised when the <see cref="P:EWSoftware.ListControls.DataNavigator.RepeatInterval"/> changes
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataNavigator.OnRepeatIntervalChanged(System.EventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.DataNavigator.RepeatIntervalChanged"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="E:EWSoftware.ListControls.DataNavigator.AddingRow">
            <summary>
            This event is raised just prior to adding an item to the data source
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataNavigator.OnAddingRow(EWSoftware.ListControls.DataNavigatorCancelEventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.DataNavigator.AddingRow"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="E:EWSoftware.ListControls.DataNavigator.AddedRow">
            <summary>
            This event is raised after adding an item to the data source.
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataNavigator.OnAddedRow(EWSoftware.ListControls.DataNavigatorEventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.DataNavigator.AddedRow"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="E:EWSoftware.ListControls.DataNavigator.DeletingRow">
            <summary>
            This event is raised just prior to deleting an item from the data source
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataNavigator.OnDeletingRow(EWSoftware.ListControls.DataNavigatorCancelEventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.DataNavigator.DeletingRow"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="E:EWSoftware.ListControls.DataNavigator.DeletedRow">
            <summary>
            This event is raised after deleting an item from the data source
            </summary>
            <remarks>If there are no more rows after the deletion, the <see cref="E:EWSoftware.ListControls.DataNavigator.NoRows"/> event is also raised</remarks>
        </member>
        <member name="M:EWSoftware.ListControls.DataNavigator.OnDeletedRow(EWSoftware.ListControls.DataNavigatorEventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.DataNavigator.DeletedRow"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="E:EWSoftware.ListControls.DataNavigator.CancelingEdits">
            <summary>
            This event is raised just prior to canceling edits to a row via the Escape key
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataNavigator.OnCancelingEdits(EWSoftware.ListControls.DataNavigatorCancelEventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.DataNavigator.CancelingEdits"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="E:EWSoftware.ListControls.DataNavigator.CanceledEdits">
            <summary>
            This event is raised after canceling edits via the Escape key
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataNavigator.OnCanceledEdits(EWSoftware.ListControls.DataNavigatorEventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.DataNavigator.CanceledEdits"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="E:EWSoftware.ListControls.DataNavigator.Current">
            <summary>
            This event is raised when a row is made the current row
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataNavigator.OnCurrent(EWSoftware.ListControls.DataNavigatorEventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.DataNavigator.Current"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="E:EWSoftware.ListControls.DataNavigator.NoRows">
            <summary>
            This event is raised after refreshing the data source or after deleting a row and there are no more
            rows in the data source.
            </summary>
            <remarks>This event can be used to disable bound controls and/or display a message asking the user to
            add a new row.</remarks>
        </member>
        <member name="M:EWSoftware.ListControls.DataNavigator.OnNoRows(System.EventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.DataNavigator.NoRows"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="E:EWSoftware.ListControls.DataNavigator.DataSourceChanged">
            <summary>
            This event is raised when the <see cref="P:EWSoftware.ListControls.DataNavigator.DataSource"/> is changed
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataNavigator.OnDataSourceChanged(System.EventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.DataNavigator.DataSourceChanged"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="E:EWSoftware.ListControls.DataNavigator.ChangePolicyModified">
            <summary>
            This event is raised when the change policy for the data source is modified (i.e. changes to indicate
            whether or not adds, edits, or deletes are allowed).
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataNavigator.OnChangePolicyModified(EWSoftware.ListControls.ChangePolicyEventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.DataNavigator.ChangePolicyModified"/> event for the control
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataNavigator.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataNavigator.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataNavigator.ShouldSerializeAllowAdditions">
            <summary>
            The designer uses this to determine whether or not to serialize changes to the AllowAdditions property
            </summary>
            <returns>True to serialize it, false if not</returns>
        </member>
        <member name="M:EWSoftware.ListControls.DataNavigator.ResetAllowAdditions">
            <summary>
            Reset the AllowAdditions property
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataNavigator.ShouldSerializeAllowEdits">
            <summary>
            The designer uses this to determine whether or not to serialize changes to the AllowEdits property
            </summary>
            <returns>True to serialize it, false if not</returns>
        </member>
        <member name="M:EWSoftware.ListControls.DataNavigator.ResetAllowEdits">
            <summary>
            Reset the AllowEdits property
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataNavigator.ShouldSerializeAllowDeletes">
            <summary>
            The designer uses this to determine whether or not to serialize changes to the AllowDeletes property
            </summary>
            <returns>True to serialize it, false if not</returns>
        </member>
        <member name="M:EWSoftware.ListControls.DataNavigator.ResetAllowDeletes">
            <summary>
            Reset the AllowAdditions property
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataNavigator.DataSource_MetaDataChanged(System.Object,System.EventArgs)">
            <summary>
            This is called when the data source's meta data changes in some way
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataNavigator.DataSource_ListChanged(System.Object,System.ComponentModel.ListChangedEventArgs)">
            <summary>
            This is called when the data source is changed in some way
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataNavigator.DataSource_ItemChanged(System.Object,System.Windows.Forms.ItemChangedEventArgs)">
            <summary>
            This is called when an item in the data source changes
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="ea">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataNavigator.DataSource_PositionChanged(System.Object,System.EventArgs)">
            <summary>
            This is called when the position in the data source changes
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataNavigator.Parent_KeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            This handles the <c>KeyDown</c> event in the parent form and processes our shortcut keys
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataNavigator.txtRowNum_Leave(System.Object,System.EventArgs)">
            <summary>
            Set the focus to the specified row when the row text box loses focus
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataNavigator.btnFirst_Click(System.Object,System.EventArgs)">
            <summary>
            Go to the first row unless validation failed somewhere
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataNavigator.btnPrev_Click(System.Object,System.EventArgs)">
            <summary>
            Go to the previous row unless validation failed somewhere
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataNavigator.btnPrev_MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Set the timer for auto-repeat unless validation fails and the button doesn't have the focus
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event parameters</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataNavigator.btnPrev_MouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Clear the timer for auto-repeat
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event parameters</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataNavigator.btnNext_Click(System.Object,System.EventArgs)">
            <summary>
            Go to the next row unless validation failed somewhere
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataNavigator.btnNext_MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Set the timer for auto-repeat unless validation fails and the button doesn't have the focus
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event parameters</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataNavigator.btnNext_MouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Clear the timer for auto-repeat
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event parameters</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataNavigator.btnLast_Click(System.Object,System.EventArgs)">
            <summary>
            Go to the last row unless validation failed somewhere
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataNavigator.btnAdd_Click(System.Object,System.EventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.DataNavigator.AddingRow"/> event and, if not canceled, adds a row to the data source,
            makes it the current row, and raises the <see cref="E:EWSoftware.ListControls.DataNavigator.AddedRow"/> event.
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event parameters</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataNavigator.btnDelete_Click(System.Object,System.EventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.DataNavigator.DeletingRow"/> event and, if not canceled, deletes the current row from
            the data source, and raises the <see cref="E:EWSoftware.ListControls.DataNavigator.DeletedRow"/> event.
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event parameters</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataNavigator.tmrRepeat_Tick(System.Object,System.EventArgs)">
            <summary>
            Fire the appropriate event for next/previous button auto-repeat
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event parameters</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataNavigator.EnforceValidDataMember(System.Object,System.String)">
            <summary>
            This is called to ensure that the specified data member is valid for the given data source.  If not
            valid, it is cleared.
            </summary>
            <param name="ds">The data source to check</param>
            <param name="member">The data member to check</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataNavigator.SetListManager(System.Object,System.String,System.Boolean)">
            <summary>
            This is called to get information about the data source and the data member and to hook up the
            necessary event handlers.
            </summary>
            <param name="newDataSource">The new data source</param>
            <param name="newDataMember">The new data member in the data source</param>
            <param name="force">True to force the information to be updated, false to only update the info if
            something really changed.</param>
            <exception cref="T:System.ArgumentException">This is thrown if the data member cannot be found in the data
            source.</exception>
        </member>
        <member name="M:EWSoftware.ListControls.DataNavigator.BindData">
            <summary>
            This is used to update the current position when bound to a data source
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataNavigator.AddRowInternal">
            <summary>
            This is used to add a row to the data source
            </summary>
            <returns>True if the row was added, false if it was not due to validation failure or cancellation</returns>
        </member>
        <member name="M:EWSoftware.ListControls.DataNavigator.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources, false to just release
            unmanaged resources.</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataNavigator.OnBindingContextChanged(System.EventArgs)">
            <summary>
            This is overridden to refresh the data source when the binding context changes
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataNavigator.OnCreateControl">
            <summary>
            This is overridden to hook up an event for the hot key processing
            </summary>
            <remarks>In order to find out when the hot keys are pressed, this control needs to handle the
            <see cref="E:System.Windows.Forms.Control.KeyDown"/> event in the parent form.  This is overridden to hook that event and
            turn on <see cref="P:System.Windows.Forms.Form.KeyPreview"/> in the parent form the first time this control is created.  It
            cannot use <c>OnParentChanged</c> as the immediate parent may not be the form and it may not have a
            parent itself when this control is added to it.  This works around that problem.</remarks>
        </member>
        <member name="M:EWSoftware.ListControls.DataNavigator.OnLayout(System.Windows.Forms.LayoutEventArgs)">
            <summary>
            This is used to reposition the controls when the control attributes change
            </summary>
            <param name="levent">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataNavigator.OnValidating(System.ComponentModel.CancelEventArgs)">
            <summary>
            This is overridden to suppress the normal validation method
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataNavigator.OnValidated(System.EventArgs)">
            <summary>
            This is overridden to suppress the normal validation method
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataNavigator.SetDataBinding(System.Object,System.String)">
            <summary>
            Calling this method is the equivalent of setting the <see cref="P:EWSoftware.ListControls.DataNavigator.DataSource"/> and <see cref="P:EWSoftware.ListControls.DataNavigator.DataMember"/>
            properties individually.
            </summary>
            <param name="dataSource">The data source to use</param>
            <param name="member">The data member in the data source to use, if any</param>
        </member>
        <member name="M:EWSoftware.ListControls.DataNavigator.MoveTo(System.Int32)">
            <summary>
            This method is used to move the focus to the specified row in the data source
            </summary>
            <param name="newRow">The row to which the focus is moved</param>
            <returns>True if the specified row now has the focus or false if the focus could not be set due to
            validation failure on the current row.</returns>
            <remarks>Before moving to the specified row, the <see cref="P:EWSoftware.ListControls.DataNavigator.IsValid"/> property is checked to ensure
            that it is safe to move.  If it returns false, the focus will stay on the current row.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">This is thrown if the value is outside the bounds of
            the list or if there is no data source.</exception>
            <overloads>There are two overloads for this method</overloads>
        </member>
        <member name="M:EWSoftware.ListControls.DataNavigator.MoveTo(EWSoftware.ListControls.RowPosition)">
            <summary>
            This method is used to move the focus to the specified fixed row position in the data source
            </summary>
            <param name="position">The position to which the focus is moved</param>
            <returns>True if the specified position now has the focus or false if the focus could not be set due
            to validation failure on the current row.</returns>
            <remarks>Before moving to the specified position, the <see cref="P:EWSoftware.ListControls.DataNavigator.IsValid"/> property is checked to
            ensure that it is safe to move.  If it returns false, the focus will stay on the current row.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">This is thrown if there is no data source or there are
            no rows.</exception>
            <exception cref="T:System.NotSupportedException">This is thrown if additions // are not currently allowed as
            defined by the current <see cref="P:EWSoftware.ListControls.DataNavigator.AllowAdditions"/> property setting and an attempt is made to move
            the <c>NewRow</c> position.</exception>
        </member>
        <member name="M:EWSoftware.ListControls.DataNavigator.DeleteRow(System.Int32)">
            <summary>
            This can be used as an alternative to the <c>Delete</c> button to delete a row from the data source
            </summary>
            <param name="delRow">The row to delete</param>
            <returns>True if the row was deleted, false if not deleted due to cancellation</returns>
            <remarks>This is equivalent to clicking the <c>Delete</c> button but it allows you to put a button on
            the parent form or to handle the delete operation in some other fashion.  The <see cref="E:EWSoftware.ListControls.DataNavigator.DeletingRow"/>
            event is fired prior to deleting the specified row.  If the <c>DeletingRow</c> event is not canceled,
            the specified row is deleted and the <see cref="E:EWSoftware.ListControls.DataNavigator.DeletedRow"/> event is fired.</remarks>
            <exception cref="T:System.NotSupportedException">This is thrown if deletions are not currently allowed as
            defined by the current <see cref="P:EWSoftware.ListControls.DataNavigator.AllowDeletes"/> property setting.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">This is thrown if the specified row is outside the
            bounds of the list or if there is no data source.</exception>
        </member>
        <member name="M:EWSoftware.ListControls.DataNavigator.CommitChanges">
             <summary>
             This is used to manually commit pending changes to the current row in the data source
             </summary>
             <remarks><para>This will call the <c>EndCurrentEdit</c> method for the data source in the current
             binding context.</para>
             
             <para>Due to the way data binding works in .NET, pending changes to the current row may not have been
             committed to the data source when you are ready to save changes to the underlying data source.  As
             such, you should always call the <c>CommitChanges</c> or <see cref="M:EWSoftware.ListControls.DataNavigator.CancelChanges"/> method on the
             data navigator control prior to checking for or saving changes in its underlying data source.</para>
             </remarks>
             <example>
             Assume <c>dataSet</c> has been assigned to <c>dataNav</c> as its
             data source.
             <code language="cs">
             // Commit any pending edits in the data source
             dataNav.CommitChanges();
            
             // If changes were made to the data source, save them
             if(dataSet.HasChanges())
                 dataAdapter.Update(dataSet);
             </code>
             <code language="vbnet">
             ' Commit any pending edits in the data source
             dataNav.CommitChanges()
            
             ' If changes were made to the data source, save them
             If dataSet.HasChanges() Then
                 dataAdapter.Update(dataSet)
             End If
             </code>
             </example>
        </member>
        <member name="M:EWSoftware.ListControls.DataNavigator.CancelChanges">
            <summary>
            This is used to manually cancel pending changes to the current row in the data source
            </summary>
            <remarks><para>This will call the <c>CancelCurrentEdit</c> method for the data source in the current
            binding context.</para>
            
            <para>Due to the way data binding works in .NET, pending changes to the current row may not have been
            committed to the data source when you are ready to save changes to the underlying data source.   As
            such, you should always call the <see cref="M:EWSoftware.ListControls.DataNavigator.CommitChanges"/> or <c>CancelChanges</c> method on the
            data navigator control prior to checking for or saving changes in its underlying data source.</para>
            </remarks>
        </member>
        <member name="M:EWSoftware.ListControls.DataNavigator.Find(System.String,System.Object)">
            <summary>
            Find an item value in the specified member of the data source
            </summary>
            <param name="member">The member in the data source to search for the key value</param>
            <param name="key">The item to find in the data source</param>
            <returns>The zero-based index of the found item or -1 if not found</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">This is thrown if specified member could not be found
            in the data source.</exception>
            <exception cref="T:System.ArgumentNullException">This is thrown if the member name or the item to find is
            null.</exception>
        </member>
        <member name="M:EWSoftware.ListControls.DataNavigator.FindStringExact(System.String,System.String)">
            <summary>
            Finds the first item whose given member matches the specified string. The search is not
            case-sensitive.
            </summary>
            <param name="member">The member in the data source to search for the string value</param>
            <param name="key">The string for which to search</param>
            <returns>The zero-based index of the found item or -1 if not found</returns>
            <overloads>There are two overloads for this method</overloads>
            <exception cref="T:System.ArgumentNullException">This is thrown if the member name or the item to find is
            null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">This is thrown if specified member could not be found
            in the data source.</exception>
        </member>
        <member name="M:EWSoftware.ListControls.DataNavigator.FindStringExact(System.String,System.String,System.Int32)">
            <summary>
            Finds the first item after the given index whose given data member matches the given string. The
            search is not case-sensitive.
            </summary>
            <param name="member">The member in the data source to search for the string value</param>
            <param name="key">The string for which to search</param>
            <param name="startIndex">The zero-based index of the item before the first item to be searched. Set
            to -1 to search from the beginning of the list.</param>
            <returns>The zero-based index of the first item found.  Returns -1 if no match is found.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">This is thrown if the start index value is not within
            the bounds of the list and it is not -1 or if the specified member could not be found in the data
            source.</exception>
            <exception cref="T:System.ArgumentNullException">This is thrown if the member name or the item to find is
            null.</exception>
        </member>
        <member name="M:EWSoftware.ListControls.DataNavigator.FindString(System.String,System.String)">
            <summary>
            Finds the first item whose given member starts with the given string. The search is not
            case-sensitive.
            </summary>
            <param name="member">The member in the data source to search for the string value</param>
            <param name="key">The string for which to search</param>
            <returns>The zero-based index of the found item or -1 if not found</returns>
            <overloads>There are three overloads for this method</overloads>
            <exception cref="T:System.ArgumentNullException">This is thrown if the member name or the item to find is
            null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">This is thrown if specified member could not be found
            in the data source.</exception>
        </member>
        <member name="M:EWSoftware.ListControls.DataNavigator.FindString(System.String,System.String,System.Int32)">
            <summary>
            Finds the first item after the given index whose given data member starts with the given string.  The
            search is not case-sensitive.
            </summary>
            <param name="member">The member in the data source to search for the string value</param>
            <param name="key">The string for which to search</param>
            <param name="startIndex">The zero-based index of the item before the first item to be searched.  Set
            to -1 to search from the beginning of the list.</param>
            <returns>The zero-based index of the first item found.  Returns -1 if no match is found.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">This is thrown if the start index value is not within
            the bounds of the list and it is not -1 or if the specified member could not be found in the
            data source.</exception>
            <exception cref="T:System.ArgumentNullException">This is thrown if the member name or the item to find is
            null.</exception>
        </member>
        <member name="M:EWSoftware.ListControls.DataNavigator.FindString(System.String,System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Finds the first item after the given index whose given data member matches the given string.  Partial
            matches and case-sensitivity are optional.
            </summary>
            <param name="member">The member in the data source to search for the string value</param>
            <param name="key">The string for which to search</param>
            <param name="startIndex">The zero-based index of the item before the first item to be searched.  Set
            to -1 to search from the beginning of the list.</param>
            <param name="exactMatch">Specify true to find an exact match or false to find the first item starting
            with the specified string.</param>
            <param name="ignoreCase">Specify true for a case-insensitive search or false for a case-sensitive
            search.</param>
            <returns>The zero-based index of the first item found.  Returns -1 if no match is found.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">This is thrown if the start index value is not within
            the bounds of the list and it is not -1 or if the specified member could not be found in the data
            source.</exception>
            <exception cref="T:System.ArgumentNullException">This is thrown if the member name or the item to find is
            null.</exception>
        </member>
        <member name="T:EWSoftware.ListControls.Design.BaseComboBoxDesigner">
            <summary>
            This is a control designer for the <see cref="T:EWSoftware.ListControls.BaseComboBox"/> class that enables snap lines for it
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.Design.BaseComboBoxDesigner.SnapLines">
            <summary>
            Overrides the base implementation of the SnapLines property and this override is what allows us to
            configure the line to run through the textbox in the VS designer.
            </summary>
        </member>
        <member name="T:EWSoftware.ListControls.Design.ListPaddingTypeConverter">
            <summary>
            This contains a type converter for the <see cref="T:EWSoftware.ListControls.ListPadding"/> class so that it can be used in the
            designer and can be serialized to code.
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.Design.ListPaddingTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines if this converter can convert an object in the given source type to the native type of the
            converter.
            </summary>
            <param name="context">The format context</param>
            <param name="sourceType">The type from which to convert</param>
            <returns>Returns true if it can perform the conversion or false if it cannot</returns>
        </member>
        <member name="M:EWSoftware.ListControls.Design.ListPaddingTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Gets a value indicating whether this converter can convert an object to the given destination type
            using the context.
            </summary>
            <param name="context">The format context</param>
            <param name="destinationType">The type to which to convert</param>
            <returns>Returns true if it can perform the conversion or false if it cannot</returns>
        </member>
        <member name="M:EWSoftware.ListControls.Design.ListPaddingTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to a <see cref="T:EWSoftware.ListControls.ListPadding"/> object.
            </summary>
            <param name="context">A formatter context</param>
            <param name="culture">Culture-specific information</param>
            <param name="value">The object to convert</param>
            <returns>The converted object</returns>
        </member>
        <member name="M:EWSoftware.ListControls.Design.ListPaddingTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Convert the specified object to the specified type
            </summary>
            <param name="context">A formatter context</param>
            <param name="culture">Culture-specific information</param>
            <param name="value">The object to convert</param>
            <param name="destinationType">The type to which to convert</param>
            <returns>The converted object</returns>
        </member>
        <member name="M:EWSoftware.ListControls.Design.ListPaddingTypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Creates an instance of this type given a set of property values for the object
            </summary>
            <param name="context">A formatter context</param>
            <param name="propertyValues">A dictionary of new property values</param>
            <returns>A new <see cref="T:EWSoftware.ListControls.ListPadding"/> instance</returns>
        </member>
        <member name="M:EWSoftware.ListControls.Design.ListPaddingTypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Returns a collection of properties for the type of object specified by the value parameter using the
            specified context and attributes.
            </summary>
            <param name="context">A formatter context</param>
            <param name="value">The object for which to get properties</param>
            <param name="attributes">An array of attributes that describe the properties</param>
            <returns>The set of properties that should be exposed for this data type</returns>
        </member>
        <member name="M:EWSoftware.ListControls.Design.ListPaddingTypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Determines if changing a value on this object should require a call to <see cref="M:EWSoftware.ListControls.Design.ListPaddingTypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)"/>
            to create a new value.
            </summary>
            <param name="context">A formatter context</param>
            <returns>Always returns true</returns>
        </member>
        <member name="M:EWSoftware.ListControls.Design.ListPaddingTypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Determines if this object supports properties
            </summary>
            <param name="context">A formatter context</param>
            <returns>Always returns true</returns>
        </member>
        <member name="T:EWSoftware.ListControls.DrawTreeNodeExtendedEventArgs">
            <summary>
            This is used to provide information for the <see cref="T:EWSoftware.ListControls.ExtendedTreeView"/> events
            <see cref="E:EWSoftware.ListControls.ExtendedTreeView.TreeNodeDrawing"/> and <see cref="E:EWSoftware.ListControls.ExtendedTreeView.TreeNodeDrawn"/>.
            </summary>
            <remarks>When assigning new graphics objects to the event arguments, any old graphics object is disposed
            of automatically.  Likewise, the objects are disposed of when the event arguments are disposed of after
            the draw events.</remarks>
            <example>See <see cref="M:EWSoftware.ListControls.DrawTreeNodeExtendedEventArgs.#ctor(System.Drawing.Graphics,System.Windows.Forms.TreeNode,System.Windows.Forms.TreeNodeStates,System.Drawing.Rectangle)"/>
            for an example of custom drawing the tree nodes.</example>
        </member>
        <member name="P:EWSoftware.ListControls.DrawTreeNodeExtendedEventArgs.Graphics">
            <summary>
            This read-only property returns the graphics object
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DrawTreeNodeExtendedEventArgs.Node">
            <summary>
            This read-only property returns the tree node being drawn
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DrawTreeNodeExtendedEventArgs.State">
            <summary>
            This read-only property returns the current state of the tree node to draw
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DrawTreeNodeExtendedEventArgs.NodeParts">
            <summary>
            This is used to set or get the parts of the node to draw
            </summary>
            <value>The tree view will set this based on its current settings</value>
            <remarks>If you handle the <see cref="E:EWSoftware.ListControls.ExtendedTreeView.TreeNodeDrawing"/> event and custom draw one
            or more parts of the node, you should turn of the corresponding bit flags in this member so that the
            tree view will not draw them.</remarks>
        </member>
        <member name="P:EWSoftware.ListControls.DrawTreeNodeExtendedEventArgs.NodeBounds">
            <summary>
            This read-only property returns the overall bounds of the node to draw
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DrawTreeNodeExtendedEventArgs.ExpandoBounds">
            <summary>
            This is used to set or get the bounds of the expando image (+/-) if it is drawn
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DrawTreeNodeExtendedEventArgs.StateBounds">
            <summary>
            This is used to set or get the bounds of the checkbox or state image if it is drawn
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DrawTreeNodeExtendedEventArgs.ImageBounds">
            <summary>
            This is used to set or get the bounds of the node image if it is drawn
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DrawTreeNodeExtendedEventArgs.TextBounds">
            <summary>
            This is used to set or get the bounds of the node text
            </summary>
            <value>This value is calculated automatically when the text is set if a font has been defined</value>
        </member>
        <member name="P:EWSoftware.ListControls.DrawTreeNodeExtendedEventArgs.StringFormat">
            <summary>
            This is used to set or get the string format to use when drawing the text
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DrawTreeNodeExtendedEventArgs.Text">
            <summary>
            This is used to set or get the text to draw for the node
            </summary>
            <value>By default, it is set to the node's text.  As long as a font has been specified, the
            <see cref="P:EWSoftware.ListControls.DrawTreeNodeExtendedEventArgs.TextBounds"/> property is recalculated automatically.</value>
        </member>
        <member name="P:EWSoftware.ListControls.DrawTreeNodeExtendedEventArgs.ImageIndex">
            <summary>
            This is used to set or get the index of the image to draw on the node from the tree view's
            <see cref="P:System.Windows.Forms.TreeView.ImageList"/>.
            </summary>
            <value>If set to -1, no image is drawn</value>
        </member>
        <member name="P:EWSoftware.ListControls.DrawTreeNodeExtendedEventArgs.StateImageIndex">
            <summary>
            This is used to set or get the index of the state image to draw on the node from the tree view's
            <see cref="P:System.Windows.Forms.TreeView.StateImageList"/>.
            </summary>
            <value>If set to -1, no image is drawn.  This is also used to specify which image is drawn based on
            the node's checked state if the tree view's <see cref="P:System.Windows.Forms.TreeView.CheckBoxes"/> is set to true.</value>
        </member>
        <member name="P:EWSoftware.ListControls.DrawTreeNodeExtendedEventArgs.Font">
            <summary>
            This is used to set or get the font used to draw the node text
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DrawTreeNodeExtendedEventArgs.LinePen">
            <summary>
            This is used to set or get the pen used to draw the node lines
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DrawTreeNodeExtendedEventArgs.LinePosition">
            <summary>
            This is used to set or get the X coordinate of the inner most node line
            </summary>
            <value>This represents the position of the line closest to the node text.  The position of all outer
            lines can be determined by subtracting the tree view's <see cref="P:System.Windows.Forms.TreeView.Indent"/> value.</value>
        </member>
        <member name="P:EWSoftware.ListControls.DrawTreeNodeExtendedEventArgs.LineWidth">
            <summary>
            This is used to set or get the width of the horizontal line connecting the vertical node line to the
            node image or text.
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DrawTreeNodeExtendedEventArgs.BackgroundBrush">
            <summary>
            This is used to set or get the brush used to draw the node's background
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DrawTreeNodeExtendedEventArgs.TextBackgroundBrush">
            <summary>
            This is used to set or get the brush used to draw the node text's background if
            <see cref="P:System.Windows.Forms.TreeView.FullRowSelect"/> is set to false.
            </summary>
            <value>This will be null if <see cref="P:System.Windows.Forms.TreeView.FullRowSelect"/> is true</value>
        </member>
        <member name="P:EWSoftware.ListControls.DrawTreeNodeExtendedEventArgs.TextForegroundBrush">
            <summary>
            This is used to set or get the brush used to draw the node's foreground text
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DrawTreeNodeExtendedEventArgs.#ctor(System.Drawing.Graphics,System.Windows.Forms.TreeNode,System.Windows.Forms.TreeNodeStates,System.Drawing.Rectangle)">
            <summary>
            Constructor
            </summary>
            <param name="g">The graphics object to use</param>
            <param name="treeNode">The tree node to draw</param>
            <param name="nodeState">The current node state</param>
            <param name="bounds">The node's bounds</param>
            <example>
            <code language="cs" source="..\Demos\ListControlDemoCS\ExtendedTreeViewTestForm.cs"
              region="TreeNodeDrawing Example" title="C# - TreeNodeDrawing Event Handler Example" />
            <code language="cs" source="..\Demos\ListControlDemoCS\ExtendedTreeViewTestForm.cs"
              region="TreeNodeDrawn Example" title="C# - TreeNodeDrawn Event Handler Example" />
            <code language="vbnet" source="..\Demos\ListControlDemoVB\ExtendedTreeViewTestForm.vb"
              region="TreeNodeDrawing Example" title="VB.NET - TreeNodeDrawing Event Handler Example" />
            <code language="vbnet" source="..\Demos\ListControlDemoVB\ExtendedTreeViewTestForm.vb"
              region="TreeNodeDrawn Example" title="VB.NET - TreeNodeDrawn Event Handler Example" />
            </example>
        </member>
        <member name="M:EWSoftware.ListControls.DrawTreeNodeExtendedEventArgs.Finalize">
            <summary>
            This handles garbage collection to ensure proper disposal of the event arguments if not done
            explicitly with <see cref="M:EWSoftware.ListControls.DrawTreeNodeExtendedEventArgs.Dispose"/>.
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DrawTreeNodeExtendedEventArgs.Dispose">
            <summary>
            This implements the Dispose() interface to properly dispose of the event arguments object
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DrawTreeNodeExtendedEventArgs.Dispose(System.Boolean)">
            <summary>
            This can be overridden by derived classes to add their own disposal code if necessary
            </summary>
            <remarks>This is implemented to ensure that the graphics objects assigned to the event arguments are
            disposed of correctly.</remarks>
            <param name="disposing">Pass true to dispose of the managed and unmanaged resources or false to just
            dispose of the unmanaged resources.</param>
        </member>
        <member name="T:EWSoftware.ListControls.DropDownControl">
            <summary>
            This is the drop-down control used as the source for creating the drop-down portion of the
            <see cref="T:EWSoftware.ListControls.UserControlComboBox"/> control.
            </summary>
            <remarks>Derive a <see cref="T:System.Windows.Forms.UserControl"/> from this class and add your controls to it for use as a
            template in the drop-down.</remarks>
        </member>
        <member name="P:EWSoftware.ListControls.DropDownControl.ComboBox">
            <summary>
            This read-only property can be used to get the drop-down's parent (the <see cref="T:EWSoftware.ListControls.UserControlComboBox"/>
            that owns it).
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DropDownControl.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DropDownControl.InitializeDropDown">
            <summary>
            This method is called just after the drop-down has been constructed.  It can be overridden to perform
            any additional initialization tasks in the derived class.
            </summary>
            <remarks>The base class implementation does nothing</remarks>
        </member>
        <member name="M:EWSoftware.ListControls.DropDownControl.ShowDropDown">
            <summary>
            This method is called just prior to showing the drop-down.  It can be overridden to perform any
            additional tasks that need to occur before showing the drop-down.
            </summary>
            <remarks>The base class implementation does nothing</remarks>
        </member>
        <member name="M:EWSoftware.ListControls.DropDownControl.CommitSelection(System.Int32)">
            <summary>
            This can be called to select an item by index and hide the drop-down
            </summary>
            <param name="idx">The index to select</param>
            <remarks>This will guarantee that the drop-down is closed prior to setting the new value so that the
            drop-down doesn't block or hide dialog boxes that may get displayed in a user's event handler.
            </remarks>
            <overloads>There are two overloads for this method</overloads>
        </member>
        <member name="M:EWSoftware.ListControls.DropDownControl.CommitSelection(System.Object)">
            <summary>
            This can be called to select an item by value and hide the drop-down
            </summary>
            <remarks>This will guarantee that the drop-down is closed prior to setting the new value so that the
            drop-down doesn't block or hide dialog boxes that may get displayed in a user's event handler.
            </remarks>
            <param name="item">The item to select</param>
        </member>
        <member name="T:EWSoftware.ListControls.DropDownDataGrid">
            <summary>
            This is a custom grid control that provides some extra features needed by the multi-column combo box
            drop-down form.
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DropDownDataGrid.IsSimpleStyle">
            <summary>
            Get or set the simple style flag
            </summary>
            <value>This is true when the combo box is using the simple rather than drop-down style</value>
        </member>
        <member name="P:EWSoftware.ListControls.DropDownDataGrid.MouseTracking">
            <summary>
            Get or set the mouse tracking flag
            </summary>
            <value>This is true if the selection should track with the mouse in modes other than simple</value>
        </member>
        <member name="M:EWSoftware.ListControls.DropDownDataGrid.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DropDownDataGrid.OnResize(System.EventArgs)">
            <summary>
            Redraw when resized
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.DropDownDataGrid.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Highlight the item under the mouse when clicked
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.DropDownDataGrid.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Highlight the item under the mouse when it moves
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.DropDownDataGrid.OnMouseLeave(System.EventArgs)">
            <summary>
            Set mouse capture in the parent when we lose the mouse focus and the parent isn't using the
            <c>Simple</c> style.
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.DropDownDataGrid.ClearSelection">
            <summary>
            This lets the owner clear the selected row
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DropDownDataGrid.DropDownDataGrid_Scroll(System.Object,System.EventArgs)">
            <summary>
            Hide any edit control when the grid is scrolled
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="T:EWSoftware.ListControls.DropDownTableStyle">
            <summary>
            This is a custom table style class that omits several fields and modifies the defaults for some
            properties for use with the <see cref="T:EWSoftware.ListControls.MultiColumnComboBox"/> control's drop-down.
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DropDownTableStyle.ColumnHeadersVisible">
            <summary>
            Set or get whether column headers are visible
            </summary>
            <value>They are not visible by default</value>
        </member>
        <member name="P:EWSoftware.ListControls.DropDownTableStyle.RowHeadersVisible">
            <summary>
            Set or get whether row headers are visible
            </summary>
            <value>They are not visible by default</value>
        </member>
        <member name="P:EWSoftware.ListControls.DropDownTableStyle.HeaderForeColor">
            <summary>
            Set or get the header foreground color
            </summary>
            <value>This defines the default color so that it isn't serialized unnecessarily</value>
        </member>
        <member name="P:EWSoftware.ListControls.DropDownTableStyle.RowHeaderWidth">
            <summary>
            Set or get the width of the row headers
            </summary>
            <value>They are set to 20 pixels wide by default</value>
        </member>
        <member name="P:EWSoftware.ListControls.DropDownTableStyle.AllowSorting">
            <summary>
            Do not allow sorting
            </summary>
            <exclude/>
        </member>
        <member name="P:EWSoftware.ListControls.DropDownTableStyle.DataGrid">
            <summary>
            The data grid is settable but is not visible to the user
            </summary>
            <exclude/>
        </member>
        <member name="P:EWSoftware.ListControls.DropDownTableStyle.LinkColor">
            <summary>
            Links are not used
            </summary>
            <exclude/>
        </member>
        <member name="P:EWSoftware.ListControls.DropDownTableStyle.LinkHoverColor">
            <summary>
            Links are not used
            </summary>
            <exclude/>
        </member>
        <member name="P:EWSoftware.ListControls.DropDownTableStyle.MappingName">
            <summary>
            The mapping name is settable but isn't visible to the user
            </summary>
            <exclude/>
        </member>
        <member name="P:EWSoftware.ListControls.DropDownTableStyle.ReadOnly">
            <summary>
            The drop-down table style is always read-only
            </summary>
            <exclude/>
        </member>
        <member name="P:EWSoftware.ListControls.DropDownTableStyle.DefaultNullText">
            <summary>
            Set or get the default null text for all columns
            </summary>
            <value>The default is an empty string.  The value is applied at runtime and its effect is not visible
            on columns during design time.  It replaces the null text for any column with its <c>NullText</c>
            property set to "(null)".</value>
        </member>
        <member name="M:EWSoftware.ListControls.DropDownTableStyle.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks>Column and row headers are made invisible by default</remarks>
        </member>
        <member name="T:EWSoftware.ListControls.NodeCheckState">
            <summary>
            This public enumerated type defines the node checked states for the <see cref="T:EWSoftware.ListControls.ExtendedTreeView"/>
            control.
            </summary>
            <remarks>These values can be used for comparison against a tree node's <see cref="P:System.Windows.Forms.TreeNode.StateImageIndex"/>
            to determine its checked state in addition to the <see cref="P:System.Windows.Forms.TreeNode.Checked"/> property.  This is
            useful when parent/child checked states are synchronized and you need to determine if the parent node is
            in a mixed state.</remarks>
        </member>
        <member name="F:EWSoftware.ListControls.NodeCheckState.None">
            <summary>
            The node has no state image associated with it.
            </summary>
        </member>
        <member name="F:EWSoftware.ListControls.NodeCheckState.Unchecked">
            <summary>
            The node is in an unchecked state.  When the parent/child checked states are synchronized, it also
            indicates that all child nodes are unchecked as well.
            </summary>
        </member>
        <member name="F:EWSoftware.ListControls.NodeCheckState.Checked">
            <summary>
            The node is in a checked state.  When parent/child checked states are synchronized, it also indicates
            that all child nodes are checked as well.
            </summary>
        </member>
        <member name="F:EWSoftware.ListControls.NodeCheckState.Mixed">
            <summary>
            This state is only available when parent/child checked states are synchronized.  This indicates that
            the node is in a checked state but the child nodes contain a mix of checked and unchecked states.
            </summary>
        </member>
        <member name="T:EWSoftware.ListControls.DataListBeginDragEventArgs">
            <summary>
            This is used for the data list <see cref="E:EWSoftware.ListControls.DataList.BeginDrag"/> event
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataListBeginDragEventArgs.Source">
            <summary>
            Get the source data list for the drag and drop operation
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataListBeginDragEventArgs.SelectionStart">
            <summary>
            Get the starting row of the selection in the data list when the drag operation started
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataListBeginDragEventArgs.SelectionEnd">
            <summary>
            Get the ending row of the selection in the data list when the drag operation started
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.DataListBeginDragEventArgs.Button">
            <summary>
            Get the mouse button clicked to start the drag operation
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.DataListBeginDragEventArgs.#ctor(EWSoftware.ListControls.DataList,System.Int32,System.Int32,System.Windows.Forms.MouseButtons)">
            <summary>
            Constructor
            </summary>
            <param name="source">The source data list for the drag and drop operation</param>
            <param name="start">The selection start</param>
            <param name="end">The selection end</param>
            <param name="mouseButtons">The mouse button used</param>
        </member>
        <member name="T:EWSoftware.ListControls.ExtendedTreeView">
            <summary>
            This is an extended tree view control that is fully owner-drawn to overcome some limitations in the way
            the default tree view is drawn.  It also provides several additional features to make it easier to use
            than the standard tree view control.
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.ExtendedTreeView.UseThemedImages">
            <summary>
            This is used to set or get whether or not to use the themed versions of the expando and checkbox
            images even when themes are not being used.
            </summary>
            <value>The default is false and the images will be based on the current visual style setting</value>
        </member>
        <member name="P:EWSoftware.ListControls.ExtendedTreeView.ExpandoImageList">
            <summary>
            This property is used to set or get the expando image list used to show the +/- images when the
            <see cref="P:System.Windows.Forms.TreeView.ShowPlusMinus"/> property is set to true.
            </summary>
            <value><para>The default is null to use the standard images.  If set, the image list should contain
            images in the following order:</para>
            
            <list type="table">
               <listheader>
                  <term>Image Index</term>
                  <description>Description</description>
               </listheader>
               <item>
                  <term>0</term>
                  <description>Unthemed collapse image (required)</description>
               </item>
               <item>
                  <term>1</term>
                  <description>Unthemed expand image (required)</description>
               </item>
               <item>
                  <term>2</term>
                  <description>Themed collapse image (optional)</description>
               </item>
               <item>
                  <term>3</term>
                  <description>Themed expand image (optional)</description>
               </item>
            </list>
            
            <para>If you do not need separate themed and unthemed versions, you may omit the last two entries.</para>
            </value>
        </member>
        <member name="P:EWSoftware.ListControls.ExtendedTreeView.AllowCollapse">
            <summary>
            This property is used to set or get whether or not nodes can be collapsed when
            <see cref="P:System.Windows.Forms.TreeView.ShowPlusMinus"/> is set to false.
            </summary>
            <value>The default is true to match the standard tree view's behavior</value>
        </member>
        <member name="P:EWSoftware.ListControls.ExtendedTreeView.DrawDefaultImages">
            <summary>
            This property is used to set or get whether or not the tree view will draw default images for tree
            nodes without images.
            </summary>
            <value>The default is true to match the standard tree view's behavior</value>
        </member>
        <member name="P:EWSoftware.ListControls.ExtendedTreeView.SelectOnRightOfLabelClick">
            <summary>
            This property is used to set or get whether or not the tree view will select a node if the blank area
            to the right of the label is clicked.
            </summary>
            <value>The default is false to match the standard tree view's behavior</value>
        </member>
        <member name="P:EWSoftware.ListControls.ExtendedTreeView.SyncParentChildCheckedState">
            <summary>
            This is used to set or get whether or not the parent and child node checked states are synchronized
            </summary>
            <value>The default is false to match the standard tree view's behavior.  This can be set to true to
            ensure that the checked state of parent and child nodes is synchronized.  If a child node is checked,
            all parent nodes are marked as checked too.  If a parent is checked or unchecked, all child nodes are
            checked or unchecked as well.  The checkbox on parent nodes with a mix of checked and unchecked
            children are drawn as a mixed checkbox to make them easy to pick out when collapsed.  This is
            accomplished by using the tree node's <see cref="P:System.Windows.Forms.TreeNode.StateImageIndex"/> property.  If you have
            specified a custom state image list, the third image is used to represent the mixed state.</value>
            <remarks>If you add or remove nodes from the tree after setting this to true, call
            <see cref="M:EWSoftware.ListControls.ExtendedTreeView.SynchronizeCheckedStates"/> to refresh the state of the parent and child check states.</remarks>
        </member>
        <member name="P:EWSoftware.ListControls.ExtendedTreeView.CheckedNodes">
            <summary>
            This property will return a collection containing the currently checked nodes in the tree view
            </summary>
            <remarks>The collection is read-only but the items in it are not.</remarks>
        </member>
        <member name="P:EWSoftware.ListControls.ExtendedTreeView.DrawMode">
            <summary>
            This is reimplemented to set the new default value and to reset <c>OwnerDrawText</c> to
            <c>OwnerDrawAll</c>.  It is not available in release builds.
            </summary>
            <remarks>This control does not support <c>OwnerDrawText</c>.  If specified, it will be converted to
            <c>OwnerDrawAll</c>.</remarks>
            <exclude/>
        </member>
        <member name="P:EWSoftware.ListControls.ExtendedTreeView.CheckBoxes">
            <summary>
            This is reimplemented to change the image list based on the current settings
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.ExtendedTreeView.StateImageList">
            <summary>
            This is reimplemented to change the image list based on the current settings
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.ExtendedTreeView.LineColor">
            <summary>
            This is reimplemented to change the default line color to match the standard tree view
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.ExtendedTreeView.Item(System.String)">
            <summary>
            This can be used to get a tree node by name from the tree view (a root node or any child at any
            level).
            </summary>
            <param name="name">The name of the tree node to retrieve.</param>
            <value>Returns the tree node that was found or null if it was not found.</value>
            <remarks>The tree's nodes are searched recursively for the first node with a name that matches the
            specified value.  The value is case-sensitive.  Note that node names do not have to be unique.
            Only the first node found is returned even if other nodes further down the tree have an identical
            name.</remarks>
            <example>
            <code language="cs" source="..\Demos\ListControlDemoCS\ExtendedTreeViewTestForm.cs"
              region="Tree Node Indexer Example" />
            <code language="vbnet" source="..\Demos\ListControlDemoVB\ExtendedTreeViewTestForm.vb"
              region="Tree Node Indexer Example" />
            </example>
        </member>
        <member name="E:EWSoftware.ListControls.ExtendedTreeView.DrawNode">
            <summary>
            This is used to hide the base class's draw node event which is not used by this control
            </summary>
        </member>
        <member name="E:EWSoftware.ListControls.ExtendedTreeView.ChangeStateImage">
            <summary>
            This event is raised after a click is detected on a node's state image or the space bar is hit on the
            selected node.
            </summary>
            <remarks>This event is only raised if a <see cref="P:EWSoftware.ListControls.ExtendedTreeView.StateImageList" /> has been defined for the tree
            view, the <see cref="P:EWSoftware.ListControls.ExtendedTreeView.CheckBoxes"/> property is false, and the node has a
            <see cref="P:System.Windows.Forms.TreeNode.StateImageIndex"/> or a <see cref="P:System.Windows.Forms.TreeNode.StateImageKey"/> defined.</remarks>
        </member>
        <member name="M:EWSoftware.ListControls.ExtendedTreeView.OnChangeStateImage(System.Windows.Forms.TreeViewEventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.ExtendedTreeView.ChangeStateImage"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="E:EWSoftware.ListControls.ExtendedTreeView.TreeNodeDrawing">
            <summary>
            This event is raised before the node is drawn
            </summary>
            <remarks>This event can be used to modify the parameters in the event arguments or custom draw parts
            of the node prior to the tree view drawing anything.</remarks>
            <example>See <see cref="M:EWSoftware.ListControls.DrawTreeNodeExtendedEventArgs.#ctor(System.Drawing.Graphics,System.Windows.Forms.TreeNode,System.Windows.Forms.TreeNodeStates,System.Drawing.Rectangle)"/>
            for an example of custom drawing the tree nodes.</example>
        </member>
        <member name="M:EWSoftware.ListControls.ExtendedTreeView.OnTreeNodeDrawing(EWSoftware.ListControls.DrawTreeNodeExtendedEventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.ExtendedTreeView.TreeNodeDrawing"/> event
            </summary>
            <param name="e">The event arguments</param>
            <example>See <see cref="M:EWSoftware.ListControls.DrawTreeNodeExtendedEventArgs.#ctor(System.Drawing.Graphics,System.Windows.Forms.TreeNode,System.Windows.Forms.TreeNodeStates,System.Drawing.Rectangle)"/>
            for an example of custom drawing the tree nodes.</example>
        </member>
        <member name="E:EWSoftware.ListControls.ExtendedTreeView.TreeNodeDrawn">
            <summary>
            This event is raised after the node is drawn
            </summary>
            <remarks>This event can be used to custom draw parts of the node after the tree view has drawn the
            node.</remarks>
            <example>See <see cref="M:EWSoftware.ListControls.DrawTreeNodeExtendedEventArgs.#ctor(System.Drawing.Graphics,System.Windows.Forms.TreeNode,System.Windows.Forms.TreeNodeStates,System.Drawing.Rectangle)"/>
            for an example of custom drawing the tree nodes.</example>
        </member>
        <member name="M:EWSoftware.ListControls.ExtendedTreeView.OnTreeNodeDrawn(EWSoftware.ListControls.DrawTreeNodeExtendedEventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.ExtendedTreeView.TreeNodeDrawn"/> event
            </summary>
            <param name="e">The event arguments</param>
            <example>See <see cref="M:EWSoftware.ListControls.DrawTreeNodeExtendedEventArgs.#ctor(System.Drawing.Graphics,System.Windows.Forms.TreeNode,System.Windows.Forms.TreeNodeStates,System.Drawing.Rectangle)"/>
            for an example of custom drawing the tree nodes.</example>
        </member>
        <member name="M:EWSoftware.ListControls.ExtendedTreeView.ImageList_RecreateHandle(System.Object,System.EventArgs)">
            <summary>
            Invalidate the control when the expando image list handle is recreated
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.ExtendedTreeView.ImageList_Disposed(System.Object,System.EventArgs)">
            <summary>
            Detach the expando image list when it is disposed
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.ExtendedTreeView.SetImages">
            <summary>
            This is used to set the images to use based on the visual style
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.ExtendedTreeView.DrawLineParts(System.Drawing.Graphics,System.Drawing.Pen,System.Windows.Forms.TreeNode,System.Drawing.Rectangle,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Draw the various line parts for the given node
            </summary>
            <param name="g">The graphics object to use</param>
            <param name="pen">The pen to use</param>
            <param name="node">The tree node for which to draw lines</param>
            <param name="bounds">The bounds off the node</param>
            <param name="left">The starting point for the line</param>
            <param name="width">The width of the connecting bar</param>
            <param name="rootLine">True for a root line, false if not</param>
        </member>
        <member name="M:EWSoftware.ListControls.ExtendedTreeView.UpdateParentImageState(System.Windows.Forms.TreeNode)">
            <summary>
            Update the parent node state image based on the child's state and its children if any
            </summary>
            <param name="child">The child node</param>
        </member>
        <member name="M:EWSoftware.ListControls.ExtendedTreeView.GetEnumerator">
            <summary>
            Return a <see cref="T:EWSoftware.ListControls.TreeNodeEnumerator"/> to enumerate all nodes in the tree recursively
            </summary>
            <returns>The enumerator to use</returns>
            <example>
            <code language="cs" source="..\Demos\ListControlDemoCS\ExtendedTreeViewTestForm.cs"
              region="Enumerate ExtendedTreeView control"
              title="C# - Enumerate the entire tree" />
            <code language="vbnet" source="..\Demos\ListControlDemoVB\ExtendedTreeViewTestForm.vb"
              region="Enumerate ExtendedTreeView control"
              title="VB.NET - Enumerate the entire tree" />
            <code language="cs" source="..\Demos\ListControlDemoCS\ExtendedTreeViewTestForm.cs"
              region="TreeNodeEnumerator Example"
              title="C# - Enumerate starting at a selected node" />
            <code language="vbnet" source="..\Demos\ListControlDemoVB\ExtendedTreeViewTestForm.vb"
              region="TreeNodeEnumerator Example"
              title="VB.NET - Enumerate starting at a selected node" />
            </example>
        </member>
        <member name="M:EWSoftware.ListControls.ExtendedTreeView.System#Collections#Generic#IEnumerable{System#Windows#Forms#TreeNode}#GetEnumerator">
            <summary>
            Return a <see cref="T:EWSoftware.ListControls.TreeNodeEnumerator"/> to enumerate all nodes in the tree recursively
            </summary>
            <returns>The an enumerable list of tree nodes</returns>
            <example>
            <code language="cs" source="..\Demos\ListControlDemoCS\ExtendedTreeViewTestForm.cs"
              region="Enumerate ExtendedTreeView control"
              title="C# - Enumerate the entire tree" />
            <code language="vbnet" source="..\Demos\ListControlDemoVB\ExtendedTreeViewTestForm.vb"
              region="Enumerate ExtendedTreeView control"
              title="VB.NET - Enumerate the entire tree" />
            <code language="cs" source="..\Demos\ListControlDemoCS\ExtendedTreeViewTestForm.cs"
              region="TreeNodeEnumerator Example"
              title="C# - Enumerate starting at a selected node" />
            <code language="vbnet" source="..\Demos\ListControlDemoVB\ExtendedTreeViewTestForm.vb"
              region="TreeNodeEnumerator Example"
              title="VB.NET - Enumerate starting at a selected node" />
            </example>
        </member>
        <member name="M:EWSoftware.ListControls.ExtendedTreeView.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.ExtendedTreeView.#cctor">
            <summary>
            Static constructor.  This loads the images.
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.ExtendedTreeView.WndProc(System.Windows.Forms.Message@)">
            <summary>
            This is overridden to update the images when the theme changes
            </summary>
            <param name="m">The message to process</param>
        </member>
        <member name="M:EWSoftware.ListControls.ExtendedTreeView.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
            <summary>
            This is overridden to handle the various extra keys recognized by this control
            </summary>
            <param name="msg">The command key message</param>
            <param name="keyData">The key to process</param>
            <returns>True if the key was handled, false if not.</returns>
        </member>
        <member name="M:EWSoftware.ListControls.ExtendedTreeView.OnDrawNode(System.Windows.Forms.DrawTreeNodeEventArgs)">
            <summary>
            This is overridden to draw a tree node
            </summary>
            <param name="e">The event arguments</param>
            <remarks>Note that the <see cref="E:EWSoftware.ListControls.ExtendedTreeView.DrawNode"/> event is not raised.  The <see cref="E:EWSoftware.ListControls.ExtendedTreeView.TreeNodeDrawing"/>
            and <see cref="E:EWSoftware.ListControls.ExtendedTreeView.TreeNodeDrawn"/> events are raised instead.</remarks>
            <example>See <see cref="M:EWSoftware.ListControls.DrawTreeNodeExtendedEventArgs.#ctor(System.Drawing.Graphics,System.Windows.Forms.TreeNode,System.Windows.Forms.TreeNodeStates,System.Drawing.Rectangle)"/>
            for an example of custom drawing the tree nodes.</example>
        </member>
        <member name="M:EWSoftware.ListControls.ExtendedTreeView.OnAfterCheck(System.Windows.Forms.TreeViewEventArgs)">
            <summary>
            This is overridden to synchronize the parent and child checked states if
            <see cref="P:EWSoftware.ListControls.ExtendedTreeView.SyncParentChildCheckedState"/> is set to true.
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.ExtendedTreeView.OnBeforeCollapse(System.Windows.Forms.TreeViewCancelEventArgs)">
            <summary>
            This is overridden to suppress the collapse if both <see cref="P:System.Windows.Forms.TreeView.ShowPlusMinus"/> and
            <see cref="P:EWSoftware.ListControls.ExtendedTreeView.AllowCollapse"/> are false.
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.ExtendedTreeView.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This is overridden to implement additional behavior on mouse up events
            </summary>
            <param name="e">The event arguments</param>
            <remarks>When <see cref="P:System.Windows.Forms.TreeView.FullRowSelect"/> is enabled along with <see cref="P:System.Windows.Forms.TreeView.ShowLines"/>
            this ensures that the node becomes selected.  When a <see cref="P:System.Windows.Forms.TreeView.StateImageList"/> is defined
            and a node's state image is clicked the <see cref="E:EWSoftware.ListControls.ExtendedTreeView.ChangeStateImage"/> event is raised.</remarks>
        </member>
        <member name="M:EWSoftware.ListControls.ExtendedTreeView.SynchronizeCheckedStates">
            <summary>
            This can be used to manually synchronize the checked states of all parent and child nodes after
            adding or removing nodes from the tree.
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.ExtendedTreeView.AllChildrenChecked(System.Windows.Forms.TreeNode)">
            <summary>
            This can be used to see if all children of a specified tree node are checked
            </summary>
            <param name="parent">The parent node</param>
            <returns>True if all children are checked, false if not</returns>
        </member>
        <member name="M:EWSoftware.ListControls.ExtendedTreeView.AnyChildChecked(System.Windows.Forms.TreeNode)">
            <summary>
            This can be used to see if any children of a specified tree node are checked
            </summary>
            <param name="parent">The parent node</param>
            <returns>True if any child is checked, false if not</returns>
        </member>
        <member name="M:EWSoftware.ListControls.ExtendedTreeView.AllChildrenUnchecked(System.Windows.Forms.TreeNode)">
            <summary>
            This can be used to see if all children of a specified tree node are unchecked
            </summary>
            <param name="parent">The parent node</param>
            <returns>True if all children are unchecked, false if not</returns>
        </member>
        <member name="M:EWSoftware.ListControls.ExtendedTreeView.GetNodeChecked(System.String)">
            <summary>
            Returns a value indicating whether the node with the specified name is checked
            </summary>
            <param name="name">The node name to find in the tree view.</param>
            <returns>True if the named node is checked, false if it is not.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">This is thrown if the node name is not found in the
            tree view.</exception>
        </member>
        <member name="M:EWSoftware.ListControls.ExtendedTreeView.GetNodeCheckState(System.String)">
            <summary>
            Returns a value indicating the current check state of the node with the specified name
            </summary>
            <param name="name">The node name to find in the tree view.</param>
            <returns>The current check state of the specified node.  A return value of <c>Mixed</c> is equivalent
            to <c>Checked</c>.  It indicates that the children of the node contain a mix of checked and unchecked
            items.  This only occurs if the <see cref="P:EWSoftware.ListControls.ExtendedTreeView.SyncParentChildCheckedState"/> property is true.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">This is thrown if the node name is not found in the
            tree view.</exception>
        </member>
        <member name="M:EWSoftware.ListControls.ExtendedTreeView.SetNodeChecked(System.String,System.Boolean)">
            <summary>
            Sets the check state of the node with the specified name to <c>Checked</c> or <c>Unchecked</c>
            </summary>
            <param name="name">The node name to find in the tree view</param>
            <param name="check">True to check the node, false to uncheck it</param>
            <returns>The node with the specified name or null if the node could not be found</returns>
        </member>
        <member name="M:EWSoftware.ListControls.ExtendedTreeView.ClearSelections">
            <summary>
            Clear all currently checked nodes by setting them to an unchecked state
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.ExtendedTreeView.SelectAll">
            <summary>
            Select all nodes by setting their state to checked.
            </summary>
        </member>
        <member name="T:EWSoftware.ListControls.IDropDown">
            <summary>
            This file contains a simple interface for the drop-down container classes so that the base combo box
            class can access some of their methods.
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.IDropDown.Visible">
            <summary>
            Show or hide the drop-down
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.IDropDown.Top">
            <summary>
            Get or set the top position
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.IDropDown.Left">
            <summary>
            Get or set the left position
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.IDropDown.Width">
            <summary>
            Get or set the width
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.IDropDown.Height">
            <summary>
            Get or set the height
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.IDropDown.StartIndex">
            <summary>
            This returns the index in effect when the drop-down is shown
            </summary>
            <value>The combo box uses this to determine whether to fire the selection change committed or
            selection change canceled event when the drop-down is closed.</value>
        </member>
        <member name="P:EWSoftware.ListControls.IDropDown.IsCreating">
            <summary>
            This returns a flag indicating whether or not the drop-down is currently being created
            </summary>
            <value>The combo box uses this to determine whether or not to refresh the sub-controls in certain
            situations.</value>
        </member>
        <member name="M:EWSoftware.ListControls.IDropDown.ShowDropDown">
            <summary>
            This is used to set the size and position the drop-down, perform any additional tasks, and show it
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.IDropDown.ScrollDropDown(System.Int32)">
            <summary>
            Scroll the drop-down the specified number of rows
            </summary>
            <param name="rows">The number of rows to scroll</param>
        </member>
        <member name="T:EWSoftware.ListControls.ListItem">
            <summary>
            This is a simple list item object that can be used as part of a collection suitable for binding to a
            combo box, radio button list, list box, etc.
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.ListItem.Value">
            <summary>
            This returns the value of the item
            </summary>
            <remarks>Specify this property name for the <c>ValueMember</c> or <c>DataValueField</c> property of
            the control using the item as part of its data source.</remarks>
        </member>
        <member name="P:EWSoftware.ListControls.ListItem.Display">
            <summary>
            This returns the display text for the item
            </summary>
            <remarks>Specify this property name for the <c>DisplayMember</c> or <c>DataTextField</c> property of
            the control using the item as part of its data source.</remarks>
        </member>
        <member name="M:EWSoftware.ListControls.ListItem.#ctor(System.Object,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="value">The value for the item.</param>
            <param name="text">The display text for the item.</param>
            <remarks>Pass it the value and display text to use for the item.  If the display text is null, it
            will be set to the string representation of the value.</remarks>
            <example>
            <code language="cs">
            // Set the sort order values using ListItem objects
            cboSortOrder.DisplayMember = "Display";
            cboSortOrder.ValueMember = "Value";
            cboSortOrder.Items.Add(new ListItem(1, "Item Description"));
            cboSortOrder.Items.Add(new ListItem(2, "Make"));
            cboSortOrder.Items.Add(new ListItem(3, "Model"));
            cboSortOrder.Items.Add(new ListItem(4, "Part Number"));
            cboSortOrder.SelectedIndex = 0;
            </code>
            <code language="vbnet">
            ' Set the sort order values using ListItem objects
            cboSortOrder.DisplayMember = "Display"
            cboSortOrder.ValueMember = "Value"
            cboSortOrder.Items.Add(New ListItem(1, "Item Description"))
            cboSortOrder.Items.Add(New ListItem(2, "Make"))
            cboSortOrder.Items.Add(New ListItem(3, "Model"))
            cboSortOrder.Items.Add(New ListItem(4, "Part Number"))
            cboSortOrder.SelectedIndex = 0
            </code>
            </example>
        </member>
        <member name="M:EWSoftware.ListControls.ListItem.ToString">
            <summary>
            This is overridden to return the display value when the item is converted to a string
            </summary>
            <returns>The <see cref="P:EWSoftware.ListControls.ListItem.Display"/> member's value</returns>
        </member>
        <member name="M:EWSoftware.ListControls.ListItem.GetHashCode">
            <summary>
            This returns the hash code for the object
            </summary>
            <returns>The hash code of the <see cref="P:EWSoftware.ListControls.ListItem.Display"/> member's value</returns>
        </member>
        <member name="T:EWSoftware.ListControls.ListPadding">
            <summary>
            This structure is used to specify the padding (in pixels) for the <see cref="T:EWSoftware.ListControls.RadioButtonList"/> and
            <see cref="T:EWSoftware.ListControls.CheckBoxList"/> controls.
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.ListPadding.Top">
            <summary>
            Get or set the top padding
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.ListPadding.Left">
            <summary>
            Get or set the left side padding
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.ListPadding.Bottom">
            <summary>
            Get or set the bottom padding
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.ListPadding.Right">
            <summary>
            Get or set the right side padding
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.ListPadding.Column">
            <summary>
            Get or set the padding between columns
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.ListPadding.Row">
            <summary>
            Get or set the padding between rows
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.ListPadding.#ctor(System.Int32)">
            <summary>
            Constructor.  Set all padding to the same value.
            </summary>
            <param name="padding">The padding to use for all sides and between columns and rows</param>
            <overloads>There are two overloads for the constructor</overloads>
        </member>
        <member name="M:EWSoftware.ListControls.ListPadding.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor.  Set padding on each side and between columns and rows to the specified values.
            </summary>
            <param name="top">The top padding</param>
            <param name="left">The left side padding</param>
            <param name="bottom">The bottom padding</param>
            <param name="right">The right side padding</param>
            <param name="column">The padding between columns</param>
            <param name="row">The padding between rows</param>
        </member>
        <member name="M:EWSoftware.ListControls.ListPadding.Equals(System.Object)">
            <summary>
            This is overridden to allow proper comparison of <c>ListPadding</c> objects
            </summary>
            <param name="obj">The object to which this instance is compared</param>
            <returns>Returns true if the object equals this instance, false if it does not</returns>
        </member>
        <member name="M:EWSoftware.ListControls.ListPadding.op_Equality(EWSoftware.ListControls.ListPadding,EWSoftware.ListControls.ListPadding)">
            <summary>
            Overload for equal operator
            </summary>
            <param name="lp1">The first object</param>
            <param name="lp2">The second object</param>
            <returns>True if equal, false if not</returns>
        </member>
        <member name="M:EWSoftware.ListControls.ListPadding.op_Inequality(EWSoftware.ListControls.ListPadding,EWSoftware.ListControls.ListPadding)">
            <summary>
            Overload for not equal operator
            </summary>
            <param name="lp1">The first object</param>
            <param name="lp2">The second object</param>
            <returns>True if not equal, false if they are equal</returns>
        </member>
        <member name="M:EWSoftware.ListControls.ListPadding.GetHashCode">
            <summary>
            Get a hash code for the <c>ListPadding</c> object
            </summary>
            <remarks>To compute the hash code, it uses the string form of the object</remarks>
            <returns>Returns the hash code for the <c>ListPadding</c> object</returns>
        </member>
        <member name="M:EWSoftware.ListControls.ListPadding.ToString">
            <summary>
            This is overridden to get a string representation of the <c>ListPadding</c> object
            </summary>
            <returns>The object as a string</returns>
        </member>
        <member name="T:EWSoftware.ListControls.LR">
            <summary>
            This class is used to load resources for the assembly
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.LR.Resources">
            <summary>
            This private, read-only property is used to instantiate the resource manager object on first use
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.LR.GetString(System.String)">
            <summary>
            This method is used to retrieve the value of a string resource
            </summary>
            <param name="name">The name of the string resource to get</param>
            <returns>Returns the value of the string resource if found or the key name enclosed in
            "[?:&lt;key&gt;]" if not found.</returns>
        </member>
        <member name="M:EWSoftware.ListControls.LR.GetString(System.String,System.Object[])">
            <summary>
            This method is used to retrieve the value of a string resource that contains formatting placeholders
            </summary>
            <param name="name">The name of the string resource to get</param>
            <param name="args">The arguments to be formatted into the retrieved string</param>
            <returns>Returns the value of the string resource formatted with the passed arguments if found or the
            key name enclosed in "[?:&lt;key&gt;]" if not found.</returns>
        </member>
        <member name="T:EWSoftware.ListControls.MultiColumnComboBox">
            <summary>
            This is a multi-column combo box control that supports all features of the standard Windows Forms combo
            box but displays a multi-column drop-down list and has some extra features such as auto-completion and
            row/column indexers.
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.MultiColumnComboBox.DropDownFormat">
            <summary>
            This is used to define the formatting for the drop down portion of the combo box including the
            columns displayed if so desired.
            </summary>
            <value>Column definitions can be added to the <c>DropDownFormat.GridColumnStyles</c> collection.
            Set as many or as few properties as you need.  If the columns are not defined, the drop-down will
            show all columns in the data source by default with some basic style settings.</value>
        </member>
        <member name="P:EWSoftware.ListControls.MultiColumnComboBox.DropDownWidth">
            <summary>
            Gets or sets the width of the of the drop-down portion of the combo box
            </summary>
            <value>If set to zero, it will default to an appropriate width based on the <see cref="P:EWSoftware.ListControls.MultiColumnComboBox.DropDownFormat"/>
            options.</value>
            <exception cref="T:System.ArgumentException">This is thrown if the width is less than zero</exception>
        </member>
        <member name="P:EWSoftware.ListControls.MultiColumnComboBox.ColumnFilter">
            <summary>
            This gets the <see cref="T:EWSoftware.ListControls.StringCollection"/> used to filter the columns displayed by the drop-down
            portion of the combo box.
            </summary>
            <value>This is a quick way to filter the drop-down to a specific set of columns without defining
            column definitions using the <see cref="P:EWSoftware.ListControls.MultiColumnComboBox.DropDownFormat">DropDownFormat.GridColumnStyles</see>
            property collection.  If empty, no filtering takes place.</value>
            <example>
            <code language="cs">
            cboVendor.DisplayMember = "VendorName";
            cboVendor.ValueMember = "VendorKey";
            cboVendor.ColumnFilter.AddRange(new string[] { "VendorName", "Contact" });
            cboVendor.DataSource = GetVendors();
            </code>
            <code language="vbnet">
            cboVendor.DisplayMember = "VendorName"
            cboVendor.ValueMember = "VendorKey"
            cboVendor.ColumnFilter.AddRange(New String() { "VendorName", "Contact" })
            cboVendor.DataSource = GetVendors()
            </code>
            </example>
        </member>
        <member name="P:EWSoftware.ListControls.MultiColumnComboBox.MouseTracking">
            <summary>
            Gets or sets whether or not the selection tracks with the mouse as it moves over the items in the
            drop-down.
            </summary>
            <value>True by default.  If false, the selection in the drop-down will not track with the mouse
            cursor.  This option is only used in <c>DropDown</c> and <c>DropDownList</c> mode.  In <c>Simple</c>
            mode, the selection never tracks the mouse cursor.</value>
        </member>
        <member name="E:EWSoftware.ListControls.MultiColumnComboBox.DropDownWidthChanged">
            <summary>
            This event is raised when the <see cref="P:EWSoftware.ListControls.MultiColumnComboBox.DropDownWidth"/> changes
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.MultiColumnComboBox.OnDropDownWidthChanged(System.EventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.MultiColumnComboBox.DropDownWidthChanged"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.MultiColumnComboBox.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks>By default, the combo box will display all columns in its data source without row or column
            headers, all columns will be auto-sized to the longest item within each column, and auto-completion
            is enabled.</remarks>
        </member>
        <member name="M:EWSoftware.ListControls.MultiColumnComboBox.GridColumnStyles_CollectionChanged(System.Object,System.ComponentModel.CollectionChangeEventArgs)">
            <summary>
            This is handled to reset the drop-down when its column collection changes so that the changes are
            displayed.
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.MultiColumnComboBox.CreateDropDown">
            <summary>
            This is used to create the drop-down control when needed.
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.MultiColumnComboBox.OnSelectedIndexChanged(System.EventArgs)">
            <summary>
            This is overridden to synchronize the drop-down with the selected index when the drop-down is visible
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.MultiColumnComboBox.RefreshSubControls">
            <summary>
            This can be called to force the drop-down portion of the combo box to refresh its format settings
            </summary>
            <remarks><para>Note that this will clear all column definitions from <see cref="P:EWSoftware.ListControls.MultiColumnComboBox.DropDownFormat"/> so
            if you need to, call this method first and then load the column definitions.  The columns in the
            table style do not completely disconnect from the grid when it is disposed.  Unfortunately, there is
            no way to do this so the columns must be disposed of as well and recreated.  This is only a problem
            if you are modifying the settings after the combo box has been in use after its initial creation
            (i.e. the drop-down portion has been made visible at least once).</para>
            
            <para>This method will raise the <see cref="E:EWSoftware.ListControls.BaseListControl.SubControlsRefreshed"/> event when
            called.  You can add an event handler to it to reload your preferred column definitions whenever the
            drop-down is refreshed and the column collection has been cleared.</para></remarks>
        </member>
        <member name="M:EWSoftware.ListControls.MultiColumnComboBox.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This is overridden to scroll the selected item with the mouse wheel
            </summary>
            <param name="e">The event arguments</param>
            <remarks>If the drop-down is visible, it is scrolled instead</remarks>
        </member>
        <member name="T:EWSoftware.ListControls.MultiColumnDropDown">
            <summary>
            This is a drop-down list form that shows when the down arrow is clicked on the multi-column combo box
            </summary>
        </member>
        <member name="T:EWSoftware.ListControls.MultiColumnDropDown.ValueItem">
            <summary>
            This class acts as a wrapper for value data types so that they can be displayed in the data grid
            </summary>
            <remarks>Since value types and strings do not have a property that the data grid can use to obtain a
            value for display, this class acts as a surrogate for them.</remarks>
        </member>
        <member name="P:EWSoftware.ListControls.MultiColumnDropDown.ValueItem.Value">
            <summary>
            This property is used to return the value
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.MultiColumnDropDown.ValueItem.#ctor(System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="value">The value to use</param>
        </member>
        <member name="P:EWSoftware.ListControls.MultiColumnDropDown.CreateParams">
            <summary>
            This is overridden to add the border style to the window styles when created
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.MultiColumnDropDown.StartIndex">
            <summary>
            This returns the index in effect when the drop-down is shown
            </summary>
            <value>The combo box uses this to determine whether to fire the selection change committed or
            selection change canceled event when the drop-down is closed.</value>
        </member>
        <member name="P:EWSoftware.ListControls.MultiColumnDropDown.IsCreating">
            <summary>
            This returns a flag indicating whether or not the drop-down is currently being created
            </summary>
            <value>The combo box uses this to determine whether or not to refresh the sub-controls in certain
            situations.</value>
        </member>
        <member name="M:EWSoftware.ListControls.MultiColumnDropDown.#ctor(EWSoftware.ListControls.MultiColumnComboBox)">
            <summary>
            Constructor
            </summary>
            <param name="cb">The owner of the drop-down</param>
        </member>
        <member name="M:EWSoftware.ListControls.MultiColumnDropDown.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.MultiColumnDropDown.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources, false to just release
            unmanaged resources.</param>
        </member>
        <member name="M:EWSoftware.ListControls.MultiColumnDropDown.InitDropDown">
            <summary>
            This is used to initialize the drop-down styles and data source
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.MultiColumnDropDown.ShowDropDown">
            <summary>
            This is used to set the default selected item, size and position the drop-down, and show it
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.MultiColumnDropDown.ScrollDropDown(System.Int32)">
            <summary>
            Scroll the drop-down the specified number of rows
            </summary>
            <param name="rows">The number of rows to scroll</param>
        </member>
        <member name="M:EWSoftware.ListControls.MultiColumnDropDown.SelectItem(System.Int32)">
            <summary>
            This is used to select an item in the drop-down as the current item
            </summary>
            <param name="selIdx">The index of the selected item</param>
        </member>
        <member name="M:EWSoftware.ListControls.MultiColumnDropDown.WndProc(System.Windows.Forms.Message@)">
            <summary>
            This is overridden to release the mouse capture and hide the drop-down when another desktop window is
            activated.
            </summary>
            <param name="m">The message to process</param>
        </member>
        <member name="M:EWSoftware.ListControls.MultiColumnDropDown.CreateHandle">
            <summary>
            This is overridden to initialize the drop-down control when the handle is created
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.MultiColumnDropDown.OnSizeChanged(System.EventArgs)">
            <summary>
            This is overridden to ensure it redraws when resized
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.MultiColumnDropDown.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            This is overridden to draw a sizing grip in the lower right corner of the window
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.MultiColumnDropDown.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This is overridden to get the offset used for resizing if necessary and to hide the drop-down if
            clicked outside of its bounds.
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.MultiColumnDropDown.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This is overridden to resize the window when necessary
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.MultiColumnDropDown.OnMouseLeave(System.EventArgs)">
            <summary>
            This is overridden to reset the mouse cursor if the mouse leaves the drop-down
            </summary>
            <param name="e">The event arguments</param>
            <remarks>This also sets the capture again if necessary as the mouse is not inside the window to begin
            with and it loses the capture shortly after it is set in <see cref="M:EWSoftware.ListControls.MultiColumnDropDown.ShowDropDown"/>.
            </remarks>
        </member>
        <member name="M:EWSoftware.ListControls.MultiColumnDropDown.dgDropDown_MouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Select an item if the mouse is clicked on an item in the drop-down
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="T:EWSoftware.ListControls.UnsafeNative.NativeToolTipWindow">
            <summary>
            This represents a native tool tip window used by the <see cref="T:EWSoftware.ListControls.DataList"/> control as the tracking tool
            tip when dragging its vertical scrollbar.
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.UnsafeNative.NativeToolTipWindow.IsVisible">
            <summary>
            This read-only property returns true if visible, false if not
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.UnsafeNative.NativeToolTipWindow.#ctor(System.Windows.Forms.IWin32Window)">
            <summary>
            Constructor
            </summary>
            <param name="window">The parent window for the tool tip window</param>
        </member>
        <member name="M:EWSoftware.ListControls.UnsafeNative.NativeToolTipWindow.ShowTooltip(System.String)">
            <summary>
            Show the tool tip with the specified text if any.  It will appear under the mouse cursor
            </summary>
            <param name="tipText">The new tool tip text or null to use the existing text</param>
        </member>
        <member name="M:EWSoftware.ListControls.UnsafeNative.NativeToolTipWindow.HideTooltip">
            <summary>
            Hide the tool tip window
            </summary>
        </member>
        <member name="T:EWSoftware.ListControls.UnsafeNative.RECT">
            <summary>
            This defines the rectangle object passed to the theme API
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.UnsafeNative.RECT.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="rectLeft">The left coordinate</param>
            <param name="rectTop">The top coordinate</param>
            <param name="rectRight">The right coordinate</param>
            <param name="rectBottom">The bottom coordinate</param>
        </member>
        <member name="M:EWSoftware.ListControls.UnsafeNative.RECT.#ctor(System.Drawing.Rectangle)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:EWSoftware.ListControls.UnsafeNative.UnsafeNativeMethods">
            <summary>
            This internal class is used for access to some Win32 API functions and for access to the Windows XP theme
            API.
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.UnsafeNative.UnsafeNativeMethods.IsThemeBackgroundPartiallyTransparent(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Check to see if the parent background needs to be drawn.
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.UnsafeNative.UnsafeNativeMethods.OpenThemeData(System.IntPtr,System.String)">
            <summary>
            Opens the theme data for a window and its associated class.
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.UnsafeNative.UnsafeNativeMethods.CloseThemeData(System.IntPtr)">
            <summary>
            Closes the theme data handle.
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.UnsafeNative.UnsafeNativeMethods.DrawThemeParentBackground(System.IntPtr,System.IntPtr,EWSoftware.ListControls.UnsafeNative.RECT@)">
            <summary>
            Draw the part of the parent control that is covered by a
            partially transparent or alpha-blended child control.
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.UnsafeNative.UnsafeNativeMethods.DrawThemeBackground(System.IntPtr,System.IntPtr,System.Int32,System.Int32,EWSoftware.ListControls.UnsafeNative.RECT@,EWSoftware.ListControls.UnsafeNative.RECT@)">
            <summary>
            Draw the background image defined by the visual style for the
            specified control part.
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.UnsafeNative.UnsafeNativeMethods.ScrollThumbPosition(System.IntPtr,System.Int32)">
            <summary>
            Get the 32-bit thumb position of the specified scrollbar in the specified control
            </summary>
            <param name="handle">The handle to the control containing the scrollbar</param>
            <param name="scrollBar">0 for horizontal, 1 for vertical</param>
            <returns>The 32-bit thumb position of the requested scrollbar</returns>
        </member>
        <member name="T:EWSoftware.ListControls.UnsafeNative.SCROLLINFO">
            <summary>
            This defines the scrollbar info object passed to the Win32 API
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.UnsafeNative.SCROLLINFO.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:EWSoftware.ListControls.UnsafeNative.TOOLINFO">
            <summary>
            This defines the TOOLINFO structure for the tool tip window class
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.UnsafeNative.TOOLINFO.#ctor(System.Int32,System.IntPtr)">
            <summary>
            Constructor
            </summary>
            <param name="toolFlags">Tool tip flags</param>
            <param name="handle">The handle of the owner</param>
        </member>
        <member name="T:EWSoftware.ListControls.NumericTextBox">
            <summary>
            This is a simple numeric textbox control used for the row number textbox in the <see cref="T:EWSoftware.ListControls.DataList"/>
            and <see cref="T:EWSoftware.ListControls.DataNavigator"/> controls.
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.NumericTextBox.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.NumericTextBox.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Only allow digits to be entered and backspace to be pressed.
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.NumericTextBox.WndProc(System.Windows.Forms.Message@)">
            <summary>
            This is overridden to validate pasted text
            </summary>
            <param name="m">The message</param>
            <remarks>If the pasted text contains any non-numeric characters it will not be pasted into the control</remarks>
        </member>
        <member name="M:EWSoftware.ListControls.NumericTextBox.ProcessDialogKey(System.Windows.Forms.Keys)">
            <summary>
            This is overridden to treat Enter like Tab
            </summary>
            <param name="keyData">The dialog key to process</param>
            <returns>True if handled, false if not</returns>
        </member>
        <member name="T:EWSoftware.ListControls.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:EWSoftware.ListControls.RadioButtonList">
            <summary>
            This control is a single-selection radio button list that supports data binding, layout options, and data
            source indexers.
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.RadioButtonList.SelectedIndex">
            <summary>
            Gets or sets the index specifying the currently selected item
            </summary>
            <value><para>This is a zero-based index into the items collection.  A value of -1 indicates that
            there is no current selection.</para>
            
            <para>Setting a new index value will raise the <see cref="E:EWSoftware.ListControls.BaseListControl.SelectedIndexChanged"/>
            event.</para>
            
            <para>If <see cref="P:EWSoftware.ListControls.BaseListControl.EnforceDefaultSelection"/> is true, a <see cref="P:EWSoftware.ListControls.RadioButtonList.SelectedIndex"/>
            of -1 (no selection) is not allowed.  Instead, the index specified by the
            <see cref="P:EWSoftware.ListControls.BaseListControl.DefaultSelection"/> property is used instead.  If the default value is
            outside the range of the data source, the last item is selected.</para></value>
            <exception cref="T:System.ArgumentOutOfRangeException">This is thrown if the index is less than -1 or greater
            than the number of items in the collection.</exception>
        </member>
        <member name="P:EWSoftware.ListControls.RadioButtonList.Appearance">
            <summary>
            This is used to set or get the radio button appearance
            </summary>
            <value>The default is to show them as normal radio buttons.</value>
        </member>
        <member name="P:EWSoftware.ListControls.RadioButtonList.CheckAlign">
            <summary>
            This is used to set or get the alignment on the radio button checkmark
            </summary>
            <value>The default alignment is <c>MiddleLeft</c></value>
        </member>
        <member name="M:EWSoftware.ListControls.RadioButtonList.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks>By default, the radio button list will display all items in the data source in a single
            column, item parts are left aligned and the control will have an etched border.  A default selection
            (item zero) is enforced.</remarks>
        </member>
        <member name="M:EWSoftware.ListControls.RadioButtonList.RadioButton_CheckedChanged(System.Object,System.EventArgs)">
            <summary>
            This is handled to update the selected index whenever a radio button's checked state changes
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.RadioButtonList.RefreshSubControls">
            <summary>
            This is called to force the control to refresh the radio buttons with information from the data
            source.
            </summary>
        </member>
        <member name="T:EWSoftware.ListControls.RowControlCollection">
            <summary>
            This file contains a derived <see cref="T:System.Windows.Forms.Control.ControlCollection"/> class that hooks up a
            <c>LocationChanged</c> event to the first control so that the overall containing <see cref="T:EWSoftware.ListControls.DataList"/>
            control can scroll the header and footer horizontally in unison with the rows.
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.RowControlCollection.#ctor(System.Windows.Forms.Control)">
            <summary>
            Constructor
            </summary>
            <param name="c">The owning control</param>
        </member>
        <member name="M:EWSoftware.ListControls.RowControlCollection.Add(System.Windows.Forms.Control)">
            <summary>
            Track location changes on the first control added
            </summary>
            <param name="value">The control to add</param>
        </member>
        <member name="M:EWSoftware.ListControls.RowControlCollection.Clear">
            <summary>
            Clear the location tracking control on clear
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.RowControlCollection.Remove(System.Windows.Forms.Control)">
            <summary>
            Connect a new location tracker if our original goes away
            </summary>
            <param name="value">The control to remove</param>
        </member>
        <member name="M:EWSoftware.ListControls.RowControlCollection.Control_LocationChanged(System.Object,System.EventArgs)">
            <summary>
            This is handled to scroll any footer and header in the containing DataList control when the row
            controls are scrolled.
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="T:EWSoftware.ListControls.RowPanel">
            <summary>
            This is a derived <see cref="T:System.Windows.Forms.Panel"/> control used to display rows in the <see cref="T:EWSoftware.ListControls.DataList"/> control
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.RowPanel.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.RowPanel.LayoutSuspended">
            <summary>
            This is used to determine if layout is currently suspended
            </summary>
            <remarks>When themes are enabled and the data list is embedded in certain custom controls, it gets
            extra paint events while adjusting the row controls which causes an exception.  This is used by the
            data list to see if it should skip painting in those instances.
            </remarks>
        </member>
        <member name="M:EWSoftware.ListControls.RowPanel.MakeControlVisible(System.Windows.Forms.Control)">
            <summary>
            This is called by the parent DataList to make a control visible and ensure that all visible rows are
            bound and initialized.
            </summary>
            <param name="control">The control to make visible</param>
        </member>
        <member name="M:EWSoftware.ListControls.RowPanel.ScrollRowIntoView(System.Int32)">
            <summary>
            This is called by <see cref="M:EWSoftware.ListControls.DataList.MoveTo(System.Int32)"/> to scroll a row into view smoothly
            </summary>
            <param name="newRow">The row to make visible</param>
        </member>
        <member name="M:EWSoftware.ListControls.RowPanel.HandleVerticalScroll(System.Windows.Forms.Message@)">
            <summary>
            Handle vertical scroll to make it smoother
            </summary>
            <remarks>The default scrolling increments are quite small and the frequent redraws cause a messy
            display when the thumb is dragged.  By handling it ourselves, we can initialize and bind the rows
            before they are displayed and can also control the increments to provide a smoother scroll with a
            cleaner visual appearance.</remarks>
            <param name="m">The vertical scroll message parameters</param>
        </member>
        <member name="M:EWSoftware.ListControls.RowPanel.CreateControlsInstance">
            <summary>
            Create a custom row collection
            </summary>
            <returns>The row collection objects</returns>
        </member>
        <member name="M:EWSoftware.ListControls.RowPanel.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This is overridden to focus a row when the mouse is clicked in a panel area outside of one of the
            templates.
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.RowPanel.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This is overridden to invalidate the row header area so that the control is redrawn correctly when
            scrolled vertically.
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.RowPanel.ScaleCore(System.Single,System.Single)">
            <summary>
            This is overridden to suppress scaling.
            </summary>
            <remarks>If not done, it tends to do odd things with the row template size if bound before the
            containing form has had a chance to scale itself and there is a difference between the font size
            used during development and the one in effect at runtime.</remarks>
            <param name="dx">The ratio by which to scale the control horizontally</param>
            <param name="dy">The ratio by which to scale the control vertically</param>
        </member>
        <member name="M:EWSoftware.ListControls.RowPanel.WndProc(System.Windows.Forms.Message@)">
            <summary>
            This is overridden to handle vertical scrolling manually so that we can smooth it out to make it
            better looking.
            </summary>
            <param name="m">The message</param>
        </member>
        <member name="T:EWSoftware.ListControls.RowPosition">
            <summary>
            This enumerated type defines the fixed row positions that can be used with the
            <see cref="M:EWSoftware.ListControls.DataList.MoveTo(EWSoftware.ListControls.RowPosition)">DataList.MoveTo</see> and
            <see cref="M:EWSoftware.ListControls.DataNavigator.MoveTo(EWSoftware.ListControls.RowPosition)">DataNavigator.MoveTo</see> methods.
            </summary>
        </member>
        <member name="F:EWSoftware.ListControls.RowPosition.FirstRow">
            <summary>
            Move to the first row.
            </summary>
        </member>
        <member name="F:EWSoftware.ListControls.RowPosition.LastRow">
            <summary>
            Move to the last row.
            </summary>
        </member>
        <member name="F:EWSoftware.ListControls.RowPosition.NextRow">
            <summary>
            Move to the next row.
            </summary>
        </member>
        <member name="F:EWSoftware.ListControls.RowPosition.PreviousRow">
            <summary>
            Move to the previous row.
            </summary>
        </member>
        <member name="F:EWSoftware.ListControls.RowPosition.NewRow">
            <summary>
            Move to the new row.  This is only possible if the data list/data navigator allows additions.</summary>
        </member>
        <member name="T:EWSoftware.ListControls.Separator">
            <summary>
            This is a simple control used to display a separator between rows in the <see cref="T:EWSoftware.ListControls.DataList"/> control
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.Separator.#ctor(System.Drawing.Color,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="color">The background color to use</param>
            <param name="height">The height of the separator</param>
            <param name="width">The initial width of the separator</param>
            <param name="left">The left position of the separator</param>
            <param name="top">The top position of the separator</param>
        </member>
        <member name="T:EWSoftware.ListControls.StringCollection">
            <summary>
            A type-safe collection of <see cref="T:System.String"/> objects
            </summary>
        </member>
        <member name="E:EWSoftware.ListControls.StringCollection.ListChanged">
            <summary>
            This event is raised when an item is added or removed from the list, when the list is cleared, and
            when an item is replaced in the list.
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.StringCollection.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.StringCollection.ListChanged"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.StringCollection.#ctor">
            <summary>
            Default constructor
            </summary>
            <overloads>There are three overloads for the constructor</overloads>
        </member>
        <member name="M:EWSoftware.ListControls.StringCollection.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Construct collection from an enumerable list of <see cref="T:System.String"/> objects
            </summary>
            <param name="strings">The enumerable list of strings</param>
        </member>
        <member name="M:EWSoftware.ListControls.StringCollection.AddRange(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Add a range of <see cref="T:System.String"/> objects
            </summary>
            <param name="strings">The enumerable list of strings to add</param>
        </member>
        <member name="M:EWSoftware.ListControls.StringCollection.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Remove a range of items from the collection
            </summary>
            <param name="index">The zero-based index at which to start removing items</param>
            <param name="count">The number of items to remove</param>
        </member>
        <member name="M:EWSoftware.ListControls.StringCollection.Sort(System.Boolean,System.Boolean)">
            <summary>
            This is used to sort the collection in ascending or descending order
            </summary>
            <param name="ascending">Pass true for ascending order, false for descending order</param>
            <param name="ignoreCase">Pass true for a case-insensitive sort or false for a case-sensitive sort</param>
        </member>
        <member name="M:EWSoftware.ListControls.StringCollection.ClearItems">
            <summary>
            This is overridden to raise the <see cref="E:EWSoftware.ListControls.StringCollection.ListChanged"/> event.
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.StringCollection.InsertItem(System.Int32,System.String)">
            <summary>
            This is overridden to raise the <see cref="E:EWSoftware.ListControls.StringCollection.ListChanged"/> event.
            </summary>
            <param name="index">The index at which to insert the item</param>
            <param name="item">The item to insert</param>
        </member>
        <member name="M:EWSoftware.ListControls.StringCollection.RemoveItem(System.Int32)">
            <summary>
            This is overridden to raise the <see cref="E:EWSoftware.ListControls.StringCollection.ListChanged"/> event.
            </summary>
            <param name="index">The index of the item to remove</param>
        </member>
        <member name="M:EWSoftware.ListControls.StringCollection.SetItem(System.Int32,System.String)">
            <summary>
            This is overridden to raise the <see cref="E:EWSoftware.ListControls.StringCollection.ListChanged"/> event.
            </summary>
            <param name="index">The index of the item to set</param>
            <param name="item">The item to store at the specified position</param>
        </member>
        <member name="T:EWSoftware.ListControls.TemplateControl">
            <summary>
            This is a template control used as the source for creating rows in the <see cref="T:EWSoftware.ListControls.DataList"/> control
            </summary>
            <remarks>Derive a <see cref="T:System.Windows.Forms.UserControl"/> from this class and add your controls to it for use as a
            template in the data list.  Override the <see cref="M:EWSoftware.ListControls.TemplateControl.Bind"/> method to bind your controls to fields in
            the row source.  Note that this control has a small initial size to prevent it from overlapping other
            rows when not yet initialized.  The derived control's size will take effect once the row becomes visible
            and is initialized and bound.</remarks>
        </member>
        <member name="P:EWSoftware.ListControls.TemplateControl.TemplateParentInternal">
            <summary>
            This is used to set or get the parent DataList internally
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.TemplateControl.HasBeenBound">
            <summary>
            This is used to get or set the bound state flag
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.TemplateControl.HasBeenInitialized">
            <summary>
            This is used to get or set the initialized state flag
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.TemplateControl.IsNewRowInternal">
            <summary>
            This is used to get or set the new row flag
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.TemplateControl.TemplateParent">
            <summary>
            This read-only property can be used to get the template item's parent (the <see cref="T:EWSoftware.ListControls.DataList"/> in
            which it is contained).
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.TemplateControl.RowSource">
            <summary>
            This read-only property can be used to get the row source to which this control is bound.  The row
            source object is editable.
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.TemplateControl.IsInitialized">
            <summary>
            This read-only property can be used to determine whether or not the template has been initialized
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.TemplateControl.IsDataBound">
            <summary>
            This read-only property can be used to determine whether or not the template has been data bound
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.TemplateControl.IsNewRow">
            <summary>
            This read-only property can be used to determine whether or not the template is bound to the new row
            item in the data list.
            </summary>
            <remarks>The new row template is bound to a temporary row in the data source.  If no changes are
            made, the temporary row is removed when the template loses the focus.  The template ceases to be
            the new row when a change is made to any of its bound fields.
            </remarks>
        </member>
        <member name="P:EWSoftware.ListControls.TemplateControl.IsValid">
            <summary>
            This read-only property can be overridden to allow querying of a row to see if it is valid
            </summary>
            <value>Returns true if valid, false if not.  By default, it invokes the control's
            <see cref="M:System.Windows.Forms.Control.OnValidating(System.ComponentModel.CancelEventArgs)"/> and <see cref="E:System.Windows.Forms.Control.Validated"/> events.</value>
            <remarks>This is useful in situations where the normal validating events are fired after certain
            other events (i.e. tree view and data grid item selection events).  This property is called on the
            current row by <see cref="P:EWSoftware.ListControls.DataList.IsValid">DataList.IsValid</see>.</remarks>
        </member>
        <member name="P:EWSoftware.ListControls.TemplateControl.CanDelete">
            <summary>
            This read-only property can be overridden to let a derived template allow or deny a request to delete
            a row.
            </summary>
            <value>Returns true to allow the delete, false to prevent it.  If not overridden, it always returns
            true.</value>
            <remarks><para>The row being deleted is always given the first chance to deny the deletion.  If the
            row allows it, the data list raises its <see cref="E:EWSoftware.ListControls.DataList.DeletingRow"/> event to let the
            containing form have a chance to permit or deny the deletion.</para>
            
            <para>There are advantages to putting delete confirmations within the template. It has direct access
            to its controls so it is easier to perform any necessary validation prior to allowing the deletion.
            If the template is used in many forms, it also saves you from having to add an event handler for the
            data list's <c>DeletingRow</c> event in each one too.</para></remarks>
        </member>
        <member name="P:EWSoftware.ListControls.TemplateControl.HasChanges">
            <summary>
            This read-only property can be used to see if the row source has been modified
            </summary>
            <value>The <see cref="M:EWSoftware.ListControls.TemplateControl.CommitChanges"/> method is called first to commit any pending changes to the
            row source.  The template can detect changes only if the row source is a <c>DataRowView</c> or
            a <c>DataRow</c>.  In those cases, it returns true if the row source has been modified or false if it
            has not.  For all other row source types, it will always returns false.  You may override this
            property in order to extend the types that it knows about and detect changes in them.</value>
        </member>
        <member name="M:EWSoftware.ListControls.TemplateControl.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.TemplateControl.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources, false to just release
            unmanaged resources.</param>
        </member>
        <member name="M:EWSoftware.ListControls.TemplateControl.HandleMnemonic(System.Char)">
            <summary>
            Handle mnemonics passed to us from the parent data list
            </summary>
            <param name="charCode">The character code to process as a mnemonic</param>
        </member>
        <member name="M:EWSoftware.ListControls.TemplateControl.WirePropChangedEvents(System.Boolean)">
            <summary>
            This is used to connect and disconnect the property changed event handlers
            </summary>
            <param name="connect">True to connect, false to disconnect</param>
        </member>
        <member name="M:EWSoftware.ListControls.TemplateControl.Target_PropertyChanged(System.Object,System.EventArgs)">
            <summary>
            This is called when a bound control on the new row changes
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
            <remarks>When a bound control on the new row changes, we can turn off the <see cref="P:EWSoftware.ListControls.TemplateControl.IsNewRowInternal"/>
            flag so that the row will be committed when it loses the focus.</remarks>
        </member>
        <member name="M:EWSoftware.ListControls.TemplateControl.SetRowSourceInternal(System.Object)">
            <summary>
            This is called by the parent during construction to set the item's row source
            </summary>
            <param name="rowSrc">The row to which this item is bound</param>
            <remarks>To save time, the item is not physically bound to the row source until it is scrolled into
            view.</remarks>
        </member>
        <member name="M:EWSoftware.ListControls.TemplateControl.ProcessDialogChar(System.Char)">
            <summary>
            This is overridden to keep mnemonic processing within the template so that the focus doesn't go to
            another row if past the control associated with the mnemonic.
            </summary>
            <param name="charCode">The dialog character to process</param>
            <returns>True if handled, false if not</returns>
        </member>
        <member name="M:EWSoftware.ListControls.TemplateControl.ScaleCore(System.Single,System.Single)">
            <summary>
            This is overridden to suppress scaling.  If not done, it tends to do odd things with the row template
            size if bound before the containing form has had a chance to scale itself.
            </summary>
            <param name="dx">The ratio by which to scale the control horizontally</param>
            <param name="dy">The ratio by which to scale the control vertically</param>
        </member>
        <member name="M:EWSoftware.ListControls.TemplateControl.OnValidating(System.ComponentModel.CancelEventArgs)">
            <summary>
            This is overridden to suppress validation until initialized and bound
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.TemplateControl.OnValidated(System.EventArgs)">
            <summary>
            This is overridden to suppress validation until initialized and bound
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.TemplateControl.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This is overridden to focus the row when clicked
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.TemplateControl.InitializeTemplate">
             <summary>
             This can be overridden to create and/or initialize controls in the template
             </summary>
             <remarks><para>This will not be called until the template is scrolled into view.  This saves time and
             resources during the initial startup phase of a form that contains a data list control.</para>
             
             <para>Overriding this method is optional.  However, deferring initialization until it is required
             will save time and resources.  The base version does nothing.</para>
             
             <para>To be used, you should defer initialization in the constructor and call the
             <c>InitializeComponent</c> method in this override.</para>
             </remarks>
             <example>
             <code language="cs">
             // Template control constructor
             public RowTemplate()
             {
                 // This call is required by the Windows.Forms Form Designer.
                 // At runtime, actual initialization is deferred until needed.
                 if(this.DesignMode)
                     InitializeComponent();
             }
            
             // Designer-generated initialization code
             private void InitializeComponent()
             {
                 // ... Designer code goes here
             }
            
             // Deferred initialization
             protected override void InitializeTemplate()
             {
                 // Create the contained controls
                 this.InitializeComponent();
            
                 // Use the shared data source for the combo box
                 cboState.DisplayMember = cboState.ValueMember = "State";
                 cboState.DataSource = dvStates;
            
                 // Update control states based on the parent's change policy.
                 // This can be omitted if you do not need it.
                 this.ChangePolicyModified();
             }
             </code>
             <code language="vbnet">
             ' Template control constructor
             Public Sub New()
                 ' This call is required by the Windows.Forms Form Designer.
                 ' At runtime, actual initialization is deferred until needed.
                 If Me.DesignMode = True Then
                     InitializeComponent()
                 End If
             End Sub
            
             ' Designer-generated initialization code
             Private Sub InitializeComponent()
                 ' ... Designer code goes here
             End Sub
            
             ' Deferred initialization
             Protected Overrides Sub InitializeTemplate()
                 ' Create the contained controls
                 Me.InitializeComponent()
            
                 ' Use the shared data source for the combo box
                 cboState.DisplayMember = "State"
                 cboState.ValueMember = "State"
                 cboState.DataSource = dvStates
            
                 ' Update control states based on the parent's change policy.
                 ' This can be omitted if you do not need it.
                 Me.ChangePolicyModified()
             End Sub
             </code>
             </example>
        </member>
        <member name="M:EWSoftware.ListControls.TemplateControl.Bind">
            <summary>
            This is used to bind controls to the row source.  Derived controls must override this to provide data
            binding support even if they contain no bound controls.
            </summary>
            <remarks>This will not be called until the template is scrolled into view.  This saves time and
            resources during the initial startup phase of a form that contains a data list control.  Templates
            are re-bound under many conditions.  If adding bindings to controls manually, be sure to clear the
            <c>DataBindings</c> collection on all bound controls first.  A better alternative is to use the
            overloaded <see cref="M:EWSoftware.ListControls.TemplateControl.AddBinding(System.Windows.Forms.Control,System.String,System.String)"/> method as it will take care of that for
            you.</remarks>
            <exception cref="T:System.NotImplementedException">This is thrown if the method is not overridden and the base
            implementation is called.</exception>
            <example>
            <code language="cs">
            protected override void Bind()
            {
                this.AddBinding(txtFName, "Text", "FirstName");
                this.AddBinding(txtLName, "Text", "LastName");
                this.AddBinding(txtAddress, "Text", "Address");
                this.AddBinding(txtCity, "Text", "City");
                this.AddBinding(cboState, "SelectedValue", "State");
                this.AddBinding(txtZip, "Text", "Zip");
                this.AddBinding(udcSumValue, "Text", "SumValue");
            }
            </code>
            <code language="vbnet">
            Protected Overrides Sub Bind()
                Me.AddBinding(txtFName, "Text", "FirstName")
                Me.AddBinding(txtLName, "Text", "LastName")
                Me.AddBinding(txtAddress, "Text", "Address")
                Me.AddBinding(txtCity, "Text", "City")
                Me.AddBinding(cboState, "SelectedValue", "State")
                Me.AddBinding(txtZip, "Text", "Zip")
                Me.AddBinding(udcSumValue, "Text", "SumValue")
            End Sub
            </code>
            </example>
        </member>
        <member name="M:EWSoftware.ListControls.TemplateControl.ChangePolicyModified">
             <summary>
             This can be overridden to handle modifications in the change policy in the parent <see cref="T:EWSoftware.ListControls.DataList"/>
             control.
             </summary>
             <remarks>The base class implementation does nothing.  You can override this in derived template
             controls so that they can handle modifications in the change policy such as disabling editable
             controls when edits are disabled, etc.  Overriding this method saves you from hooking up an event
             handler in the template.  This method is only called on controls that have been initialized and bound
             when the change policy is modified in the parent <c>DataList</c> control.</remarks>
             <example>
             <code language="cs">
             // Enable or disable the controls based on the edit policy.
             protected override void ChangePolicyModified()
             {
                 if(this.TemplateParent.AllowEdits != txtFName.Enabled &amp;&amp; !this.IsNewRow)
                    txtFName.Enabled = txtLName.Enabled = txtAddress.Enabled =
                      txtCity.Enabled = cboState.Enabled = txtZip.Enabled =
                        this.TemplateParent.AllowEdits;
             }
             </code>
             <code language="vbnet">
             ' Enable or disable the controls based on the edit policy.
             Protected Overrides Sub ChangePolicyModified()
                 Dim allowEdits As Boolean = Me.TemplateParent.AllowEdits
            
                 If allowEdits &lt;&gt; txtFName.Enabled And Me.IsNewRow = False Then
                     txtFName.Enabled = allowEdits
                     txtLName.Enabled = allowEdits
                     txtAddress.Enabled = allowEdits
                     txtCity.Enabled = allowEdits
                     cboState.Enabled = allowEdits
                     txtZip.Enabled = allowEdits
                 End If
             End Sub
             </code>
             </example>
        </member>
        <member name="M:EWSoftware.ListControls.TemplateControl.CommitChanges">
            <summary>
            This is used to manually commit pending changes to the template's row source
            </summary>
            <remarks>This can be overridden to provide additional processing or perform other tasks when manually
            committing changes to a row.  By default, it simply calls the <see cref="M:EWSoftware.ListControls.DataList.CommitChanges"/>
            method on its parent <c>DataList</c> control.</remarks>
        </member>
        <member name="M:EWSoftware.ListControls.TemplateControl.CancelChanges">
            <summary>
            This is used to manually cancel pending changes to the template's row source
            </summary>
            <remarks>This can be overridden to provide additional processing or perform other tasks when manually
            canceling changes to a row.  By default, it simply calls the <see cref="M:EWSoftware.ListControls.DataList.CancelChanges"/>
            method on its parent <c>DataList</c> control.</remarks>
        </member>
        <member name="M:EWSoftware.ListControls.TemplateControl.DeleteRow">
            <summary>
            This can be used to delete the row currently bound to the template
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.TemplateControl.AddBinding(System.Windows.Forms.Control,System.String,System.String)">
            <summary>
            This method and its overloads can be used to simplify adding data bindings to controls contained in
            the template.
            </summary>
            <param name="control">The control to which to add the data binding</param>
            <param name="controlProperty">The name of the control property to bind</param>
            <param name="dataMember">The property or list to which to bind</param>
            <returns>The newly created data binding</returns>
            <remarks>This version will clear all existing bindings and add the requested binding</remarks>
            <overloads>There are four overloads for this method</overloads>
        </member>
        <member name="M:EWSoftware.ListControls.TemplateControl.AddBinding(System.Windows.Forms.Control,System.String,System.String,System.Boolean)">
            <summary>
            This method and its overloads can be used to simplify adding data bindings to controls contained in
            the template.
            </summary>
            <param name="control">The control to which to add the data binding</param>
            <param name="controlProperty">The name of the control property to bind</param>
            <param name="dataMember">The property or list to which to bind</param>
            <param name="clearBindings">Specify true to clear all existing bindings before adding the new
            binding or false to keep all existing bindings.</param>
            <remarks>This version will only clear the existing data bindings if the <c>clearBindings</c>
            parameter is true.  This version should be used with it set to false if you bind multiple properties
            on the same control after the first one has been bound.</remarks>
            <returns>The newly created data binding</returns>
        </member>
        <member name="M:EWSoftware.ListControls.TemplateControl.AddBinding(System.Windows.Forms.Control,System.String,System.String,System.Boolean,System.Windows.Forms.ConvertEventHandler)">
            <summary>
            This method and its overloads can be used to simplify adding data bindings to controls contained in
            the template.
            </summary>
            <param name="control">The control to which to add the data binding</param>
            <param name="controlProperty">The name of the control property to bind</param>
            <param name="dataMember">The property or list to which to bind</param>
            <param name="clearBindings">Specify true to clear all existing bindings before adding the new binding
            or false to keep all existing bindings.</param>
            <param name="formatEvent">An event handler for the binding's <c>Format</c> event</param>
            <remarks>This version will only clear the existing data bindings if the <c>clearBindings</c>
            parameter is true.  It will also add the specified format event handler to the binding.</remarks>
            <returns>The newly created data binding</returns>
        </member>
        <member name="M:EWSoftware.ListControls.TemplateControl.AddBinding(System.Windows.Forms.Control,System.String,System.String,System.Boolean,System.Windows.Forms.ConvertEventHandler,System.Windows.Forms.ConvertEventHandler)">
            <summary>
            This method and its overloads can be used to simplify adding data bindings to controls contained in
            the template.
            </summary>
            <param name="control">The control to which to add the data binding</param>
            <param name="controlProperty">The name of the control property to bind</param>
            <param name="dataMember">The property or list to which to bind</param>
            <param name="clearBindings">Specify true to clear all existing bindings before adding the new binding
            or false to keep all existing bindings.</param>
            <param name="formatEvent">An event handler for the binding's <c>Format</c> event if wanted</param>
            <param name="parseEvent">An event handler for the binding's <c>Parse</c> event if wanted</param>
            <remarks>This version will only clear the existing data bindings if the <c>clearBindings</c>
            parameter is true.  It will also add the specified format and parse event handlers to the binding if
            they are specified.  Use null if you do not want a particular handler added.</remarks>
            <returns>The newly created data binding</returns>
            <exception cref="T:System.ArgumentNullException">This is thrown if the control parameter is null</exception>
        </member>
        <member name="T:EWSoftware.ListControls.TreeNodeEnumerator">
            <summary>
            A type-safe enumerator for tree view controls that can be used to enumerate all of its nodes recursively
            or one branch of it.
            </summary>
            <remarks>In addition to the <see cref="T:EWSoftware.ListControls.ExtendedTreeView"/>, this can be used manually to enumerate the
            nodes in a standard <see cref="T:System.Windows.Forms.TreeView"/> control as well.</remarks>
            <example>
            <code language="cs" source="..\Demos\ListControlDemoCS\ExtendedTreeViewTestForm.cs"
              region="Enumerate ExtendedTreeView control"
              title="C# - Enumerate the entire tree" />
            <code language="vbnet" source="..\Demos\ListControlDemoVB\ExtendedTreeViewTestForm.vb"
              region="Enumerate ExtendedTreeView control"
              title="VB.NET - Enumerate the entire tree" />
            <code language="cs" source="..\Demos\ListControlDemoCS\ExtendedTreeViewTestForm.cs"
              region="TreeNodeEnumerator Example"
              title="C# - Enumerate starting at a selected node" />
            <code language="vbnet" source="..\Demos\ListControlDemoVB\ExtendedTreeViewTestForm.vb"
              region="TreeNodeEnumerator Example"
              title="VB.NET - Enumerate starting at a selected node" />
            </example>
        </member>
        <member name="M:EWSoftware.ListControls.TreeNodeEnumerator.#ctor(System.Windows.Forms.TreeNode,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="start">The node at which to start enumeration</param>
            <param name="enumerateSiblings">True to enumerate the starting node's siblings as well or false to
            stop after enumerating the starting node and all of its children.</param>
            <example>
            <code language="cs" source="..\Demos\ListControlDemoCS\ExtendedTreeViewTestForm.cs"
              region="Enumerate ExtendedTreeView control"
              title="C# - Enumerate the entire tree" />
            <code language="vbnet" source="..\Demos\ListControlDemoVB\ExtendedTreeViewTestForm.vb"
              region="Enumerate ExtendedTreeView control"
              title="VB.NET - Enumerate the entire tree" />
            <code language="cs" source="..\Demos\ListControlDemoCS\ExtendedTreeViewTestForm.cs"
              region="TreeNodeEnumerator Example"
              title="C# - Enumerate starting at a selected node" />
            <code language="vbnet" source="..\Demos\ListControlDemoVB\ExtendedTreeViewTestForm.vb"
              region="TreeNodeEnumerator Example"
              title="VB.NET - Enumerate starting at a selected node" />
            </example>
        </member>
        <member name="P:EWSoftware.ListControls.TreeNodeEnumerator.Current">
            <summary>
            Type-safe enumerator Current method
            </summary>
            <returns>The current item or null if there are no items</returns>
        </member>
        <member name="P:EWSoftware.ListControls.TreeNodeEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Type-unsafe IEnumerator.Current
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.TreeNodeEnumerator.MoveNext">
            <summary>
            Move to the next element
            </summary>
            <returns>Returns true if not at the end, false if it is</returns>
        </member>
        <member name="M:EWSoftware.ListControls.TreeNodeEnumerator.Reset">
            <summary>
            Reset the enumerator to the start
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.TreeNodeEnumerator.Enumerate(System.Windows.Forms.TreeNode,System.Boolean)">
            <summary>
            This method can be used to enumerate tree nodes in a more convenient way using a <c>foreach</c>
            loop without having to manually construct and manage the enumerator.
            </summary>
            <param name="start">The node at which to start enumeration.</param>
            <param name="enumerateSiblings">True to enumerate the starting node's siblings as well or false to
            stop after enumerating the starting node and all of its children.</param>
            <returns>An enumerable list of tree nodes</returns>
        </member>
        <member name="T:EWSoftware.ListControls.UserControlComboBox">
            <summary>
            This is a user control combo box control that supports all features of the standard Windows Forms combo
            box but displays a user control for its drop-down and has some extra features such as auto-completion and
            row/column indexers.
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.UserControlComboBox.DropDownControl">
            <summary>
            The user control type to use for the drop-down
            </summary>
            <remarks>This property must be set in order for the drop-down to be of any use</remarks>
            <exception cref="T:System.ArgumentException">This is thrown if the specified type is not derived from
            <see cref="P:EWSoftware.ListControls.UserControlComboBox.DropDownControl"/>.</exception>
            <example>
            <code language="cs">
            // TreeViewDropDown is a user control derived from DropDownControl
            ucCombo.DropDownControl = typeof(TreeViewDropDown);
            </code>
            <code language="vbnet">
            ' TreeViewDropDown is a user control derived from DropDownControl
            ucCombo.DropDownControl = GetType(TreeViewDropDown)
            </code>
            </example>
        </member>
        <member name="E:EWSoftware.ListControls.UserControlComboBox.DropDownControlCreated">
            <summary>
            This event is raised when the drop-down control has been created but before it has been initialized
            </summary>
            <remarks>This can be used to make adjustments to the drop-down control after it has been created but
            before it is initialized and displayed.</remarks>
        </member>
        <member name="M:EWSoftware.ListControls.UserControlComboBox.OnDropDownControlCreated(EWSoftware.ListControls.DropDownControl)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.UserControlComboBox.DropDownControlCreated"/> event
            </summary>
            <param name="dropDown">The drop-down control</param>
        </member>
        <member name="E:EWSoftware.ListControls.UserControlComboBox.DropDownControlInitialized">
            <summary>
            This event is raised after the drop-down control has been initialized
            </summary>
            <remarks>This can be used to make adjustments to the drop-down control after it has been initialized
            but before it is displayed.
            </remarks>
        </member>
        <member name="M:EWSoftware.ListControls.UserControlComboBox.OnDropDownControlInitialized(EWSoftware.ListControls.DropDownControl)">
            <summary>
            This raises the <see cref="E:EWSoftware.ListControls.UserControlComboBox.DropDownControlInitialized"/> event
            </summary>
            <param name="dropDown">The drop-down control</param>
        </member>
        <member name="M:EWSoftware.ListControls.UserControlComboBox.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks>By default, auto-completion is enabled</remarks>
        </member>
        <member name="M:EWSoftware.ListControls.UserControlComboBox.CreateDropDown">
            <summary>
            This is used to create the drop-down control when needed
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.UserControlComboBox.RefreshSubControls">
            <summary>
            This can be called to force the drop-down portion of the combo box to refresh its settings
            </summary>
            <remarks>This method will raise the <see cref="E:EWSoftware.ListControls.BaseListControl.SubControlsRefreshed"/> event when
            called.  You can add an event handler to it to reload your preferred settings whenever the drop-down
            is refreshed.</remarks>
        </member>
        <member name="M:EWSoftware.ListControls.UserControlComboBox.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This is overridden to scroll the selected item with the mouse wheel
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="T:EWSoftware.ListControls.UserControlDropDown">
            <summary>
            This is a drop-down list form that shows when the down arrow is clicked on the user control combo box.
            Because it is a form, it does not support Simple mode.
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.UserControlDropDown.StartIndex">
            <summary>
            This returns the index in effect when the drop-down is shown
            </summary>
            <value>The combo box uses this to determine whether to fire the selection change committed or
            selection change canceled event when the drop-down is closed.</value>
        </member>
        <member name="P:EWSoftware.ListControls.UserControlDropDown.IsCreating">
            <summary>
            This returns a flag indicating whether or not the drop-down is currently being created
            </summary>
            <value>The combo box uses this to determine whether or not to refresh the sub-controls in certain
            situations.</value>
        </member>
        <member name="M:EWSoftware.ListControls.UserControlDropDown.#ctor(EWSoftware.ListControls.UserControlComboBox)">
            <summary>
            Constructor
            </summary>
            <param name="cb">The owner of the drop-down</param>
        </member>
        <member name="M:EWSoftware.ListControls.UserControlDropDown.InitDropDown">
            <summary>
            This is used to initialize the drop-down styles and data source
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.UserControlDropDown.ShowDropDown">
            <summary>
            This is used to size and position the drop-down, perform any additional tasks, and show it
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.UserControlDropDown.ScrollDropDown(System.Int32)">
            <summary>
            Not used in this control
            </summary>
            <param name="rows">The number of rows to scroll</param>
        </member>
        <member name="M:EWSoftware.ListControls.UserControlDropDown.OnDeactivate(System.EventArgs)">
            <summary>
            This is overridden to hide the drop-down when it loses the focus
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.UserControlDropDown.ProcessDialogKey(System.Windows.Forms.Keys)">
            <summary>
            This is overridden to hide the drop-down when Escape is hit
            </summary>
            <param name="keyData">The key to process</param>
            <returns>True if handled, false if not</returns>
        </member>
        <member name="M:EWSoftware.ListControls.UserControlDropDown.CreateHandle">
            <summary>
            This is overridden to initialize the drop-down control when the handle is created
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.UserControlDropDown.OnSizeChanged(System.EventArgs)">
            <summary>
            This is overridden to ensure it redraws when resized
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.UserControlDropDown.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            This is overridden to draw a sizing grip in the lower right corner of the window
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.UserControlDropDown.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This is overridden to get the offset used for resizing if necessary
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.UserControlDropDown.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This is overridden to resize the window when necessary
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EWSoftware.ListControls.UserControlDropDown.OnMouseLeave(System.EventArgs)">
            <summary>
            This is overridden to reset the mouse cursor if the mouse leaves the drop-down
            </summary>
            <param name="e">The event arguments</param>
            <remarks>This also sets the capture again if necessary as the mouse is not inside the window to begin
            with and it loses the capture shortly after it is set in <see cref="M:EWSoftware.ListControls.UserControlDropDown.ShowDropDown"/>.
            </remarks>
        </member>
        <member name="T:EWSoftware.ListControls.UserControlSimple">
            <summary>
            This is a user control that handles the display of the user control
            for the user control combo box in simple mode.
            </summary>
        </member>
        <member name="P:EWSoftware.ListControls.UserControlSimple.StartIndex">
            <summary>
            This returns the index in effect when the drop-down is shown
            </summary>
            <value>The combo box uses this to determine whether to fire the selection change committed or
            selection change canceled event when the drop-down is closed.</value>
        </member>
        <member name="P:EWSoftware.ListControls.UserControlSimple.IsCreating">
            <summary>
            This returns a flag indicating whether or not the drop-down is currently being created
            </summary>
            <value>The combo box uses this to determine whether or not to refresh the sub-controls in certain
            situations.</value>
        </member>
        <member name="M:EWSoftware.ListControls.UserControlSimple.#ctor(EWSoftware.ListControls.UserControlComboBox)">
            <summary>
            Constructor
            </summary>
            <param name="cb">The owner of the drop-down</param>
        </member>
        <member name="M:EWSoftware.ListControls.UserControlSimple.InitDropDown">
            <summary>
            This is used to initialize the drop-down styles and data source
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.UserControlSimple.ShowDropDown">
            <summary>
            This is used to perform any additional tasks when showing the drop-down
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.UserControlSimple.ScrollDropDown(System.Int32)">
            <summary>
            Not used in this control
            </summary>
            <param name="rows">The number of rows to scroll</param>
        </member>
        <member name="M:EWSoftware.ListControls.UserControlSimple.CreateHandle">
            <summary>
            This is overridden to initialize the drop-down control when the handle is created
            </summary>
        </member>
        <member name="M:EWSoftware.ListControls.UserControlSimple.OnSizeChanged(System.EventArgs)">
            <summary>
            This is overridden to ensure it redraws when resized
            </summary>
            <param name="e">The event arguments</param>
        </member>
    </members>
</doc>
