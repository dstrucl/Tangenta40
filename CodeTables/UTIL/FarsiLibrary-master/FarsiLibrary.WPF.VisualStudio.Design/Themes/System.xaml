<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:Controls="clr-namespace:FarsiLibrary.WPF.Controls;assembly=FarsiLibrary.WPF"
    xmlns:Theme="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"
    >

  <LinearGradientBrush x:Key="ProgressBarBackground" EndPoint="1,0" StartPoint="0,0">
    <GradientStop Color="#BABABA" Offset="0"/>
    <GradientStop Color="#C7C7C7" Offset="0.5"/>
    <GradientStop Color="#BABABA" Offset="1"/>
  </LinearGradientBrush>

  <LinearGradientBrush x:Key="ProgressBarBorderBrush" EndPoint="0,1" StartPoint="0,0">
    <GradientStop Color="#B2B2B2" Offset="0"/>
    <GradientStop Color="#8C8C8C" Offset="1"/>
  </LinearGradientBrush>

  <LinearGradientBrush x:Key="ProgressBarGlassyHighlight" EndPoint="0,1" StartPoint="0,0">
    <GradientStop Color="#50FFFFFF" Offset="0.5385"/>
    <GradientStop Color="#00FFFFFF" Offset="0.5385"/>
  </LinearGradientBrush>

  <LinearGradientBrush x:Key="ProgressBarTopHighlight" EndPoint="0,1" StartPoint="0,0">
    <GradientStop Color="#80FFFFFF" Offset="0.05"/>
    <GradientStop Color="#00FFFFFF" Offset="0.25"/>
  </LinearGradientBrush>

  <LinearGradientBrush x:Key="ProgressBarIndicatorAnimatedFill" EndPoint="0,0" StartPoint="-100,0" MappingMode="Absolute">
    <GradientStop Color="#00000000" Offset="0"/>
    <GradientStop Color="#FF000000" Offset="0.4"/>
    <GradientStop Color="#FF000000" Offset="0.6"/>
    <GradientStop Color="#00000000" Offset="1"/>
  </LinearGradientBrush>

  <LinearGradientBrush x:Key="ProgressBarIndicatorDarkEdgeLeft" EndPoint="1,0" StartPoint="0,0">
    <GradientStop Color="#0C000000" Offset="0"/>
    <GradientStop Color="#20000000" Offset="0.3"/>
    <GradientStop Color="#00000000" Offset="1"/>
  </LinearGradientBrush>

  <LinearGradientBrush x:Key="ProgressBarIndicatorDarkEdgeRight" EndPoint="1,0" StartPoint="0,0">
    <GradientStop Color="#00000000" Offset="0"/>
    <GradientStop Color="#20000000" Offset="0.7"/>
    <GradientStop Color="#0C000000" Offset="1"/>
  </LinearGradientBrush>

  <RadialGradientBrush x:Key="ProgressBarIndicatorLightingEffectLeft" RelativeTransform="1,0,0,1,0.5,0.5" RadiusX="1" RadiusY="1">
    <GradientStop Color="#60FFFFC4" Offset="0"/>
    <GradientStop Color="#00FFFFC4" Offset="1"/>
  </RadialGradientBrush>

  <LinearGradientBrush x:Key="ProgressBarIndicatorLightingEffect" EndPoint="0,0" StartPoint="0,1">
    <GradientStop Color="#60FFFFC4" Offset="0"/>
    <GradientStop Color="#00FFFFC4" Offset="1"/>
  </LinearGradientBrush>

  <RadialGradientBrush x:Key="ProgressBarIndicatorLightingEffectRight" RelativeTransform="1,0,0,1,-0.5,0.5" RadiusX="1" RadiusY="1">
    <GradientStop Color="#60FFFFC4" Offset="0"/>
    <GradientStop Color="#00FFFFC4" Offset="1"/>
  </RadialGradientBrush>

  <LinearGradientBrush x:Key="ProgressBarIndicatorGlassyHighlight" EndPoint="0,1" StartPoint="0,0">
    <GradientStop Color="#90FFFFFF" Offset="0.5385"/>
    <GradientStop Color="#00FFFFFF" Offset="0.5385"/>
  </LinearGradientBrush>

  <!--ListBox Item Focus Style-->
  <Style x:Key="ListItemFocusVisualStyle">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Rectangle SnapsToDevicePixels="true" Stroke="{DynamicResource ControlFocusBorderBrush}" StrokeThickness="1" Margin="1" RadiusX="2" RadiusY="2" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!--DialogTextBoxBase Focus Visual Style-->
  <Style x:Key="ComboBoxFocusVisualStyle">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Rectangle SnapsToDevicePixels="true" Stroke="{DynamicResource ControlFocusBorderBrush}" StrokeThickness="1" RadiusX="4" RadiusY="4" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!--ButtonBase Focus Visual Style-->
  <Style x:Key="ButtonBaseFocusVisualStyle">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Rectangle SnapsToDevicePixels="true" Stroke="{DynamicResource ControlFocusBorderBrush}" StrokeThickness="1" RadiusX="3" RadiusY="3" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!--CheckBox Focus Visual Style-->
  <Style x:Key="CheckBoxFocusVisualStyle">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Rectangle SnapsToDevicePixels="true" Stroke="{DynamicResource ControlFocusBorderBrush}" StrokeThickness="1" Width="12" Height="12" HorizontalAlignment="Left" VerticalAlignment="Center" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!--Scrollbar Buttons-->
  <Style x:Key="ScrollButtons" TargetType="{x:Type RepeatButton}">
    <Setter Property="Focusable" Value="false" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <Border Name="Border" Background="Transparent">
            <ContentPresenter Name="ContentPresenter" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!--Scrollbar Thumbs-->
  <Style x:Key="ScrollThumbs" TargetType="{x:Type Thumb}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <Grid Name="Grid">
            <Rectangle HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto" Fill="Transparent" />
            <Rectangle Name="Rectangle1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="7" Height="Auto" RadiusX="4" RadiusY="4" Fill="{TemplateBinding Background}" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="Tag" Value="Horizontal">
              <Setter TargetName="Rectangle1" Property="Width" Value="Auto" />
              <Setter TargetName="Rectangle1" Property="Height" Value="7" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!--ButtonBase Template and Style-->
  <Style x:Key="{x:Type ButtonBase}" TargetType="{x:Type ButtonBase}">
    <Setter Property="Background" Value="{DynamicResource ButtonDefaultBackgroundBrush}" />
    <Setter Property="BorderBrush" Value="{DynamicResource ButtonDefaultBorderBrush}" />
    <Setter Property="Foreground" Value="{DynamicResource ButtonDefaultTextBrush}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="HorizontalAlignment" Value="Center" />
    <Setter Property="FontFamily" Value="{DynamicResource MessageFontFamily}" />
    <Setter Property="FontSize" Value="{DynamicResource MessageFontSize}" />
    <Setter Property="FontWeight" Value="{DynamicResource MessageFontWeight}" />
    <Setter Property="Padding" Value="1" />
    <Setter Property="FocusVisualStyle" Value="{DynamicResource ButtonBaseFocusVisualStyle}"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ButtonBase}">
          <Border x:Name="ButtonTemplateGrid" Background="{TemplateBinding Background}" CornerRadius="3" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
            <Grid>
              <Grid.RowDefinitions>
                <RowDefinition Height="*" />
                <RowDefinition Height="*" />
              </Grid.RowDefinitions>
              <Border x:Name="HighlightBackground" CornerRadius="2" RenderTransformOrigin="0.5,1" Grid.Row="0" Margin="1,1,1,0" Background="{DynamicResource ButtonSelectionGrad}" Opacity="0.15" />
              <ContentPresenter x:Name="Content" Grid.RowSpan="2" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="{TemplateBinding Padding}" RecognizesAccessKey="true" />
            </Grid>
          </Border>

          <ControlTemplate.Triggers>
            <Trigger Property="IsFocused" Value="true">
              <Setter Value="{DynamicResource ButtonDefaultBackgroundBrush}" Property="Background" />
              <Setter Value="{DynamicResource ButtonDefaultTextBrush}" Property="Foreground" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
              <Setter Value="{DynamicResource ButtonMouseOverBackgroundBrush}" Property="Background" />
              <Setter Value="{DynamicResource ButtonMouseOverBorderBrush}" Property="BorderBrush" />
              <Setter Value="{DynamicResource ButtonMouseOverTextBrush}" Property="Foreground" />
              <Setter TargetName="HighlightBackground" Property="Opacity" Value="0.4" />
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
              <Setter Value="{DynamicResource ButtonPressedBackgroundBrush}" Property="Background" />
              <Setter Value="{DynamicResource ButtonPressedBorderBrush}" Property="BorderBrush" />
              <Setter Value="{DynamicResource ButtonDefaultTextBrush}" Property="Foreground" />
              <Setter TargetName="HighlightBackground" Property="Opacity" Value="0.1" />
              <Setter TargetName="HighlightBackground" Property="RenderTransform">
                <Setter.Value>
                  <ScaleTransform ScaleX="1" ScaleY="-1" />
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Value="{DynamicResource ButtonDisabledBackgroundBrush}" Property="Background" />
              <Setter Value="{DynamicResource ButtonDisabledBorderBrush}" Property="BorderBrush" />
              <Setter Value="{DynamicResource DisabledTextBrush}" Property="Foreground" />
              <Setter TargetName="HighlightBackground" Property="Visibility" Value="Hidden" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!--Buttons-->
  <Style x:Key="{x:Type Button}" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type ButtonBase}}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border x:Name="ButtonTemplateGrid" Background="{TemplateBinding Background}" CornerRadius="3" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
            <Grid>
              <Grid.RowDefinitions>
                <RowDefinition Height="*" />
                <RowDefinition Height="*" />
              </Grid.RowDefinitions>
              <Border x:Name="HighlightBackground" CornerRadius="2" RenderTransformOrigin="0.5,1" Grid.Row="0" Margin="1,1,1,0" Background="{DynamicResource ButtonSelectionGrad}" Opacity="0.15" />
              <ContentPresenter x:Name="Content" Grid.RowSpan="2" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="{TemplateBinding Padding}" RecognizesAccessKey="true" />
            </Grid>
          </Border>

          <ControlTemplate.Triggers>
            <Trigger Property="IsDefaulted" Value="true">
              <Setter Property="Background" Value="{DynamicResource ButtonDefaultBackgroundBrush}" />
              <Setter Property="BorderBrush" Value="{DynamicResource ButtonIsDefaultBorderBrush}" />
              <Setter Property="BorderThickness" Value="1.5, 1.5, 1.5, 1.5" />
              <Setter Property="Foreground" Value="{DynamicResource ButtonDefaultTextBrush}" />
              <Setter Property="Background" Value="{DynamicResource ButtonSelectionGrad}" TargetName="HighlightBackground" />
            </Trigger>
            <Trigger Property="IsFocused" Value="true">
              <Setter Value="{DynamicResource ButtonDefaultBackgroundBrush}" Property="Background" />
              <Setter Value="{DynamicResource ButtonDefaultTextBrush}" Property="Foreground" />
              <Setter Value="{DynamicResource ButtonIsFocusedBorderBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
              <Setter Value="{DynamicResource ButtonMouseOverBackgroundBrush}" Property="Background" />
              <Setter Value="{DynamicResource ButtonMouseOverBorderBrush}" Property="BorderBrush" />
              <Setter Value="{DynamicResource ButtonMouseOverTextBrush}" Property="Foreground" />
              <Setter TargetName="HighlightBackground" Property="Opacity" Value="0.4" />
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
              <Setter Value="{DynamicResource ButtonPressedBackgroundBrush}" Property="Background" />
              <Setter Value="{DynamicResource ButtonPressedBorderBrush}" Property="BorderBrush" />
              <Setter Value="{DynamicResource ButtonDefaultTextBrush}" Property="Foreground" />
              <Setter TargetName="HighlightBackground" Property="Opacity" Value="0.1" />
              <Setter TargetName="HighlightBackground" Property="RenderTransform">
                <Setter.Value>
                  <ScaleTransform ScaleX="1" ScaleY="-1" />
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Value="{DynamicResource ButtonDisabledBackgroundBrush}" Property="Background" />
              <Setter Value="{DynamicResource ButtonDisabledBorderBrush}" Property="BorderBrush" />
              <Setter Value="{DynamicResource DisabledTextBrush}" Property="Foreground" />
              <Setter TargetName="HighlightBackground" Property="Visibility" Value="Hidden" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!--RepeatButton-->
  <Style x:Key="{x:Type RepeatButton}" TargetType="{x:Type RepeatButton}" BasedOn="{StaticResource {x:Type ButtonBase}}" />

  <!--MessageBox Button-->
  <Style x:Key="MessageButton" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
    <Setter Property="HorizontalAlignment" Value="Center" />
    <Setter Property="MinWidth" Value="75" />
    <Setter Property="MinHeight" Value="20" />
  </Style>

  <!--Dialog Button-->
  <Style x:Key="FXDialogButton" TargetType="{x:Type Button}">
    <Setter Property="Background" Value="#E6E6E6" />
    <Setter Property="BorderBrush" Value="#CCCCCC" />
    <Setter Property="Foreground" Value="#595959" />
    <Setter Property="HorizontalAlignment" Value="Center" />
    <Setter Property="MinWidth" Value="50" />
    <Setter Property="MinHeight" Value="18" />
    <Setter Property="FontFamily" Value="{DynamicResource MessageFontFamily}" />
    <Setter Property="FontSize" Value="{DynamicResource MessageFontSize}" />
    <Setter Property="FontWeight" Value="{DynamicResource MessageFontWeight}" />
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border Name="ButtonTemplateGrid" Background="{TemplateBinding Background}" CornerRadius="4" BorderThickness="1" BorderBrush="{TemplateBinding BorderBrush}" MinHeight="{TemplateBinding MinHeight}" MinWidth="{TemplateBinding MinWidth}">
            <Grid>
              <Grid.RowDefinitions>
                <RowDefinition Height="0.593*" />
                <RowDefinition Height="0.407*" />
              </Grid.RowDefinitions>
              <Border Name="HighlightBackground" CornerRadius="3" Grid.Row="0" Margin="1,1,1,1" Opacity="0.5" Background="#FFFFFF" />
              <ContentPresenter Name="Content" Grid.RowSpan="2" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" HorizontalAlignment="Center" VerticalAlignment="Center" RecognizesAccessKey="true" Margin="{TemplateBinding Padding}" />
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
              <Setter Property="Background" Value="#D9D9D9" />
              <Setter Property="Foreground" Value="#333333" />
              <Setter TargetName="HighlightBackground" Property="Opacity" Value="0.5" />
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
              <Setter Property="Background" Value="#A6A6A6" />
              <Setter Value="{DynamicResource WhiteBrush}" Property="Foreground" />
              <Setter TargetName="HighlightBackground" Property="Opacity" Value="0.3" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!--Grip Style-->
  <Style x:Key="DefaultGripStyle" TargetType="{x:Type Control}">
    <Setter Property="IsTabStop" Value="false" />
    <Setter Property="Focusable" Value="false" />
    <Setter Property="Cursor" Value="SizeNWSE" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Control}">
          <Grid Background="Transparent" Height="12" Width="12">
            <Path Fill="{DynamicResource ButtonOverBrush}" Stretch="Fill" Margin="-0.5,-0.5,-0.5,-0.5" Data="" />
            <Path Fill="{DynamicResource PopUpBrush}" Stretch="Fill" HorizontalAlignment="Right" Margin="0,0,1.5,1.5" VerticalAlignment="Bottom" Width="4" Height="4" Data="" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type ResizeGrip}" BasedOn="{StaticResource DefaultGripStyle}" />

  <!--ListBox Item-->
  <Style x:Key="{x:Type ListBoxItem}" TargetType="{x:Type ListBoxItem}">
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="Background" Value="{DynamicResource RecessedBrush}" />
    <Setter Property="FontFamily" Value="{DynamicResource MessageFontFamily}" />
    <Setter Property="FontSize" Value="{DynamicResource MessageFontSize}" />
    <Setter Property="FontWeight" Value="{DynamicResource MessageFontWeight}" />
    <Setter Property="Padding" Value="4,2,4,2" />
    <Setter Property="MinHeight" Value="20" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="FocusVisualStyle" Value="{DynamicResource ListItemFocusVisualStyle}"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListBoxItem}">
          <Border Name="ListBoxItemRoot" CornerRadius="2" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
            <ContentPresenter Name="ListBoxItemContent" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>

    <Style.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="true" />
          <Condition Property="IsSelected" Value="false" />
        </MultiTrigger.Conditions>
        <Setter Property="Background" Value="{DynamicResource ButtonOverBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource BackgroundBrush}" />
      </MultiTrigger>
      <Trigger Property="IsSelected" Value="true">
        <Setter Property="Background" Value="{DynamicResource ListSelectionGrad}" />
        <Setter Property="Foreground" Value="{DynamicResource ListSelectedTextBrush}" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Foreground" Value="{DynamicResource DisabledTextBrush}" />
      </Trigger>
    </Style.Triggers>
  </Style>

  <!--ListBox Style-->
  <Style x:Key="{x:Type ListBox}" TargetType="{x:Type ListBox}">
    <Setter Property="BorderBrush" Value="{DynamicResource DarkBrush}" />
    <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
    <Setter Property="Foreground" Value="{DynamicResource Text1Brush}" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListBox}">
          <Border CornerRadius="2" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
            <ScrollViewer CanContentScroll="true" HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}" Padding="{TemplateBinding Padding}">
              <ItemsPresenter />
            </ScrollViewer>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!--ScrollBars-->
  <Style x:Key="{x:Type ScrollBar}" TargetType="{x:Type ScrollBar}">
    <Setter Property="Stylus.IsFlicksEnabled" Value="false" />
    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrush}}" />
    <Setter Property="Background" Value="{DynamicResource SliderGrad}" />
    <Setter Property="Width" Value="12" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ScrollBar}">
          <Grid x:Name="GridRoot" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidth}}" Background="{TemplateBinding Background}">
            <Grid.RowDefinitions>
              <RowDefinition MaxHeight="18" />
              <RowDefinition Height="0.00001*" />
              <RowDefinition MaxHeight="18" />
            </Grid.RowDefinitions>
            <RepeatButton x:Name="DecreaseRepeat" Command="ScrollBar.LineUpCommand" Style="{DynamicResource ScrollButtons}" Foreground="{DynamicResource ButtonDefaultBrush}">
              <Path x:Name="DecreaseArrow" Data="F1 M 3.5,0L 0,7L 7,7L 3.5,0 Z " HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{Binding ElementName=DecreaseRepeat, Path=Foreground}" />
            </RepeatButton>
            <Track x:Name="PART_Track" Grid.Row="1" IsDirectionReversed="true" Focusable="false">
              <Track.Thumb>
                <Thumb x:Name="Thumb" Background="{DynamicResource ButtonDefaultBrush}" Style="{DynamicResource ScrollThumbs}" />
              </Track.Thumb>
              <Track.IncreaseRepeatButton>
                <RepeatButton x:Name="PageUp" Command="ScrollBar.PageDownCommand" Opacity="0" Focusable="false" />
              </Track.IncreaseRepeatButton>
              <Track.DecreaseRepeatButton>
                <RepeatButton x:Name="PageDown" Command="ScrollBar.PageUpCommand" Opacity="0" Focusable="false" />
              </Track.DecreaseRepeatButton>
            </Track>
            <RepeatButton x:Name="IncreaseRepeat" Grid.Row="2" Command="ScrollBar.LineDownCommand" Style="{DynamicResource ScrollButtons}">
              <Path x:Name="IncreaseArrow" Data="F1 M 3.5,7L 7,0L 0,0L 3.5,7 Z " Fill="{DynamicResource ButtonDefaultBrush}" HorizontalAlignment="Center" VerticalAlignment="Center" />
            </RepeatButton>
          </Grid>

          <ControlTemplate.Triggers>
            <Trigger SourceName="IncreaseRepeat" Property="IsMouseOver" Value="true">
              <Setter Value="{DynamicResource ButtonSelectBrush}" TargetName="IncreaseArrow" Property="Fill" />
            </Trigger>
            <Trigger SourceName="DecreaseRepeat" Property="IsMouseOver" Value="true">
              <Setter Value="{DynamicResource ButtonSelectBrush}" TargetName="DecreaseArrow" Property="Fill" />
            </Trigger>
            <Trigger SourceName="Thumb" Property="IsMouseOver" Value="true">
              <Setter Value="{DynamicResource ButtonSelectBrush}" TargetName="Thumb" Property="Background" />
            </Trigger>
            <Trigger SourceName="Thumb" Property="IsDragging" Value="true">
              <Setter Value="{DynamicResource DarkBrush}" TargetName="Thumb" Property="Background" />
            </Trigger>
            <Trigger SourceName="IncreaseRepeat" Property="IsPressed" Value="true">
              <Setter Value="{DynamicResource DarkBrush}" TargetName="IncreaseArrow" Property="Fill" />
            </Trigger>
            <Trigger SourceName="DecreaseRepeat" Property="IsPressed" Value="true">
              <Setter Value="{DynamicResource DarkBrush}" TargetName="DecreaseArrow" Property="Fill" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Value="{DynamicResource LayerChild1Brush}" TargetName="IncreaseArrow" Property="Fill" />
              <Setter Value="{DynamicResource LayerChild1Brush}" TargetName="DecreaseArrow" Property="Fill" />
              <Setter TargetName="Thumb" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="Orientation" Value="Horizontal">
              <Setter TargetName="GridRoot" Property="LayoutTransform">
                <Setter.Value>
                  <RotateTransform Angle="-90" />
                </Setter.Value>
              </Setter>
              <Setter TargetName="PART_Track" Property="LayoutTransform">
                <Setter.Value>
                  <RotateTransform Angle="-90" />
                </Setter.Value>
              </Setter>
              <Setter Property="Width" Value="Auto" />
              <Setter Property="Height" Value="12" />
              <Setter TargetName="Thumb" Property="Tag" Value="Horizontal" />
              <Setter TargetName="DecreaseRepeat" Property="Command" Value="ScrollBar.LineLeftCommand" />
              <Setter TargetName="IncreaseRepeat" Property="Command" Value="ScrollBar.LineRightCommand" />
              <Setter TargetName="PageDown" Property="Command" Value="ScrollBar.PageLeftCommand" />
              <Setter TargetName="PageUp" Property="Command" Value="ScrollBar.PageRightCommand" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!--ScrollViewer-->
  <Style x:Key="{x:Type ScrollViewer}" TargetType="{x:Type ScrollViewer}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ScrollViewer}">
          <Border Background="{TemplateBinding Background}" CornerRadius="4" BorderBrush="{TemplateBinding Background}" BorderThickness="2">
            <Grid Name="Grid">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <Grid.RowDefinitions>
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
              </Grid.RowDefinitions>
              <ScrollContentPresenter Name="ScrollContentPresenter" Grid.Column="0" Grid.Row="0" Margin="{TemplateBinding Padding}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" CanContentScroll="{TemplateBinding CanContentScroll}" />
              <ScrollBar Name="PART_HorizontalScrollBar" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Grid.Column="0" Grid.Row="1" Orientation="Horizontal" ViewportSize="{TemplateBinding ViewportWidth}" Minimum="0" Maximum="{TemplateBinding ScrollableWidth}" Value="{Binding Path=HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
              <ScrollBar Name="PART_VerticalScrollBar" Margin="1,0,0,0" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Grid.Column="1" Grid.Row="0" Orientation="Vertical" ViewportSize="{TemplateBinding ViewportHeight}" Minimum="0" Maximum="{TemplateBinding ScrollableHeight}" Value="{Binding Path=VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
            </Grid>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!--Round ScrollViewer-->
  <Style x:Key="RoundedScrollViewer" TargetType="{x:Type ScrollViewer}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ScrollViewer}">
          <Border Background="{TemplateBinding Background}" CornerRadius="4" BorderBrush="{TemplateBinding Background}" BorderThickness="2">
            <Grid Name="Grid">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <Grid.RowDefinitions>
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
              </Grid.RowDefinitions>
              <ScrollContentPresenter Name="ScrollContentPresenter" Grid.Column="0" Grid.Row="0" Margin="{TemplateBinding Padding}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" CanContentScroll="{TemplateBinding CanContentScroll}" />
              <ScrollBar Name="PART_HorizontalScrollBar" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Grid.Column="0" Grid.Row="1" Orientation="Horizontal" ViewportSize="{TemplateBinding ViewportWidth}" Minimum="0" Maximum="{TemplateBinding ScrollableWidth}" Value="{Binding Path=HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
              <ScrollBar Name="PART_VerticalScrollBar" Margin="1,0,0,0" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Grid.Column="1" Grid.Row="0" Orientation="Vertical" ViewportSize="{TemplateBinding ViewportHeight}" Minimum="0" Maximum="{TemplateBinding ScrollableHeight}" Value="{Binding Path=VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
            </Grid>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!--Base TextBox-->
  <Style x:Key="BaseTextBox" TargetType="{x:Type TextBox}">
    <Setter Property="BorderBrush" Value="{DynamicResource BackgroundBrush}" />
    <Setter Property="Foreground" Value="{DynamicResource Text1Brush}" />
    <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
    <Setter Property="FontFamily" Value="{DynamicResource MessageFontFamily}" />
    <Setter Property="FontSize" Value="{DynamicResource MessageFontSize}" />
    <Setter Property="FontWeight" Value="{DynamicResource MessageFontWeight}" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="MinHeight" Value="20" />
    <Setter Property="FocusVisualStyle" Value="{DynamicResource ButtonBaseFocusVisualStyle}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TextBox}">
          <Border Focusable="false" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="3">
            <DockPanel LastChildFill="True" Margin="0">
              <Image x:Name="PART_ErrorIcon" Margin="2,0,2,0" Width="16" Height="16" DockPanel.Dock="Right" Visibility="Collapsed" VerticalAlignment="Center" HorizontalAlignment="Center"/>
              <ScrollViewer Name="PART_ContentHost" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
            </DockPanel>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="Validation.HasError" Value="True">
              <Setter Property="Visibility" Value="Visible" TargetName="PART_ErrorIcon"/>
              <Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.TemplatedParent}, Path=(Validation.Errors)[0].ErrorContent}" TargetName="PART_ErrorIcon" />
            </Trigger>
            <Trigger Property="FlowDirection" Value="RightToLeft">
              <Setter Property="DockPanel.Dock" Value="Left" TargetName="PART_ErrorIcon"/>
              <!--<Setter Property="Margin" Value="0,0,5,0" TargetName="PART_ErrorIcon" />-->
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Validation.ErrorTemplate">
      <Setter.Value>
        <ControlTemplate>
          <AdornedElementPlaceholder />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Foreground" Value="{DynamicResource DisabledTextBrush}" />
        <Setter Property="Background" Value="{DynamicResource RecessedBrush}" />
      </Trigger>
      <Trigger Property="IsFocused" Value="true">
        <Setter Property="Background" Value="{DynamicResource DarkBrush}" />
      </Trigger>
      <Trigger Property="IsKeyboardFocused" Value="true">
        <Setter Localization.Attributes="Value(Readable Modifiable None)" Property="Foreground" Value="{DynamicResource Text1Brush}" />
        <Setter Localization.Attributes="Value(Readable Modifiable None)" Property="Background" Value="{DynamicResource BackgroundBrush}" />
      </Trigger>
    </Style.Triggers>
  </Style>

  <!--TextBox-->
  <Style x:Key="{x:Type TextBox}" TargetType="{x:Type TextBox}" BasedOn="{StaticResource BaseTextBox}" />

  <!--ComboBox Item-->
  <Style x:Key="{x:Type ComboBoxItem}" TargetType="{x:Type ComboBoxItem}" BasedOn="{StaticResource {x:Type ComboBoxItem}}">
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="Background" Value="{DynamicResource RecessedBrush}" />
    <Setter Property="Foreground" Value="{DynamicResource Text1Brush}" />
    <Setter Property="FontFamily" Value="{DynamicResource MessageFontFamily}" />
    <Setter Property="FontSize" Value="{DynamicResource MessageFontSize}" />
    <Setter Property="FontWeight" Value="{DynamicResource MessageFontWeight}" />
    <Setter Property="Padding" Value="4,2,4,2" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ComboBoxItem}">
          <Border Name="ListBoxItemRoot" CornerRadius="2" BorderThickness="1" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
            <ContentPresenter Content="{TemplateBinding Content}" TextElement.Foreground="{TemplateBinding Foreground}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="true" />
          <Condition Property="IsSelected" Value="false" />
        </MultiTrigger.Conditions>
        <Setter Property="Background" Value="{DynamicResource ButtonOverBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource BackgroundBrush}" />
      </MultiTrigger>
      <Trigger Property="IsSelected" Value="true">
        <Setter Property="Background" Value="{DynamicResource ListSelectionGrad}" />
        <Setter Property="Foreground" Value="{DynamicResource ListSelectedTextBrush}" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Foreground" Value="{DynamicResource DisabledTextBrush}" />
      </Trigger>
    </Style.Triggers>
  </Style>

  <!--ComboBox Button-->
  <Style x:Key="ComboBoxButtonStyle" TargetType="{x:Type ToggleButton}">
    <Setter Property="MinWidth" Value="0" />
    <Setter Property="MinHeight" Value="0" />
    <Setter Property="Width" Value="Auto" />
    <Setter Property="Height" Value="Auto" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Focusable" Value="false" />
    <Setter Property="BorderBrush" Value="{DynamicResource RecessedBrush}" />
    <Setter Property="ClickMode" Value="Press" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Grid Background="{TemplateBinding Background}">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="Auto" SharedSizeGroup="ComboBoxButton" />
            </Grid.ColumnDefinitions>
            <Border Name="ComboBoxButtonBorder" Grid.Column="1" Width="16" CornerRadius="2" Background="{DynamicResource ButtonDefaultBrush}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
              <Image Name="ComboBoxButtonArrow" Stretch="Fill" Width="8" Height="5" Source="{DynamicResource ComboBoxButtonIcon}" />
            </Border>
          </Grid>

          <ControlTemplate.Triggers>
            <Trigger Property="IsFocused" Value="true">
              <Setter TargetName="ComboBoxButtonBorder" Value="{DynamicResource Text1Brush}" Property="BorderBrush" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
              <Setter TargetName="ComboBoxButtonBorder" Value="{DynamicResource ButtonOverBrush}" Property="Background" />
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
              <Setter TargetName="ComboBoxButtonBorder" Value="{DynamicResource DarkBrush}" Property="BorderBrush" />
              <Setter TargetName="ComboBoxButtonBorder" Value="{DynamicResource RecessedBrush}" Property="Background" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!--ComboBox-->
  <Style x:Key="{x:Type ComboBox}" TargetType="{x:Type ComboBox}">
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
    <Setter Property="Padding" Value="1" />
    <Setter Property="MinWidth" Value="40" />
    <Setter Property="MinHeight" Value="20" />
    <Setter Property="FontFamily" Value="{DynamicResource MessageFontFamily}" />
    <Setter Property="FontSize" Value="{DynamicResource MessageFontSize}" />
    <Setter Property="FontWeight" Value="{DynamicResource MessageFontWeight}" />
    <Setter Property="BorderBrush" Value="{DynamicResource BackgroundBrush}" />
    <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
    <Setter Property="Foreground" Value="{DynamicResource Text1Brush}" />
    <Setter Property="FocusVisualStyle" Value="{DynamicResource ButtonBaseFocusVisualStyle}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ComboBox}">
          <Grid>
            <Border Background="{TemplateBinding BorderBrush}" Padding="{TemplateBinding Padding}" CornerRadius="4" Name="PART_MainBorder">
              <Grid IsSharedSizeScope="true">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="1" />
                  <ColumnDefinition Width="*" />
                  <ColumnDefinition Width="Auto" SharedSizeGroup="ComboBoxButton" />
                </Grid.ColumnDefinitions>
                <Border x:Name="SelectedItemBorder" Grid.ColumnSpan="2" Margin="1" CornerRadius="2" Background="{TemplateBinding Background}" />
                <Image x:Name="PART_ErrorIcon" Margin="2,0,2,0" Width="16" Height="16" Visibility="Collapsed" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                <ContentPresenter Name="ContentSite" Grid.Column="1" Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" Margin="4,2,1,2" VerticalAlignment="Center" TextElement.Foreground="{TemplateBinding Foreground}"/>
                <TextBox x:Name="PART_EditableTextBox" MinHeight="0" Height="Auto" Grid.Column="1" Visibility="Collapsed" Padding="1,0,0,0" IsReadOnly="True" Foreground="{TemplateBinding Foreground}" FocusVisualStyle="{DynamicResource ComboBoxFocusVisualStyle}" />
                <ToggleButton x:Name="DropDownButton" Focusable="false" Margin="0" Grid.Column="0" Grid.ColumnSpan="3" Style="{DynamicResource ComboBoxButtonStyle}" IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
              </Grid>
            </Border>
            <Controls:FXPopup x:Name="PART_Popup" PlacementTarget="{Binding }" Placement="Bottom" Focusable="false" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" IsOpen="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}">
              <Border Name="DropDownBorder" Background="{DynamicResource BackgroundBrush}" MinWidth="{TemplateBinding ActualWidth}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                <ScrollViewer CanContentScroll="{TemplateBinding ScrollViewer.CanContentScroll}" Focusable="false" HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}">
                  <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Cycle" Margin="1" />
                </ScrollViewer>
              </Border>
            </Controls:FXPopup>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="Validation.HasError" Value="True">
              <Setter Property="Visibility" Value="Visible" TargetName="PART_ErrorIcon"/>
              <Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.TemplatedParent}, Path=(Validation.Errors)[0].ErrorContent}" TargetName="PART_ErrorIcon" />
            </Trigger>
            <Trigger Property="FlowDirection" Value="RightToLeft">
              <Setter Property="DockPanel.Dock" Value="Left" TargetName="PART_ErrorIcon"/>
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsKeyboardFocusWithin" Value="true" />
                <Condition Property="IsDropDownOpen" Value="false" />
                <Condition Property="IsEditable" Value="false" />
              </MultiTrigger.Conditions>
              <Setter TargetName="PART_EditableTextBox" Value="{DynamicResource Text1Brush}" Property="Foreground" />
              <Setter TargetName="ContentSite" Value="{DynamicResource Text1Brush}" Property="TextElement.Foreground" />
            </MultiTrigger>
            <Trigger Property="IsEditable" Value="true">
              <Setter TargetName="SelectedItemBorder" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="ContentSite" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Background" TargetName="PART_MainBorder" Value="{DynamicResource RecessedBrush}" />
              <Setter Property="Background" Value="{DynamicResource RecessedBrush}" />
              <Setter Property="Foreground" Value="{DynamicResource DisabledTextBrush}" />
              <Setter Property="Visibility" Value="Collapsed" TargetName="DropDownButton"/>
            </Trigger>
            <Trigger Property="HasItems" Value="false">
              <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Validation.ErrorTemplate">
      <Setter.Value>
        <ControlTemplate>
          <AdornedElementPlaceholder />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsKeyboardFocusWithin" Value="true" />
          <Condition Property="IsDropDownOpen" Value="false" />
          <Condition Property="IsEditable" Value="false" />
        </MultiTrigger.Conditions>
        <Setter Property="Foreground" Value="{DynamicResource Text1Brush}" />
      </MultiTrigger>
      <Trigger Property="IsEditable" Value="true">
        <Setter Property="IsTabStop" Value="false" />
      </Trigger>
    </Style.Triggers>
  </Style>

  <!--Label-->
  <Style x:Key="{x:Type Label}" TargetType="{x:Type Label}">
    <Setter Property="FontFamily" Value="{DynamicResource MessageFontFamily}" />
    <Setter Property="FontSize" Value="{DynamicResource MessageFontSize}" />
    <Setter Property="FontWeight" Value="{DynamicResource MessageFontWeight}" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="Foreground" Value="{DynamicResource Text1Brush}" />
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Foreground" Value="{DynamicResource DisabledTextBrush}" />
      </Trigger>
    </Style.Triggers>
  </Style>

  <!--Progress Bar-->
  <Style x:Key="{x:Type ProgressBar}" TargetType="{x:Type ProgressBar}">
    <Setter Property="Foreground" Value="#01D328"/>
    <Setter Property="Background" Value="{DynamicResource ProgressBarBackground}"/>
    <Setter Property="BorderBrush" Value="{DynamicResource ProgressBarBorderBrush}"/>
    <Setter Property="BorderThickness" Value="0"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ProgressBar}">
          <Grid SnapsToDevicePixels="true" x:Name="Background" Background="Black">
            <Border Margin="1" CornerRadius="0">
              <Border.Background>
                <LinearGradientBrush EndPoint="0.5,1.115" StartPoint="0.5,-0.115">
                  <GradientStop Color="#FFFFFFFF" Offset="0"/>
                  <GradientStop Color="#FF595959" Offset="0.519"/>
                  <GradientStop Color="#FF000000" Offset="1"/>
                </LinearGradientBrush>
              </Border.Background>
            </Border>
            <Rectangle Margin="1" x:Name="PART_Track"/>
            <Decorator HorizontalAlignment="Left" Margin="1" x:Name="PART_Indicator">
              <Grid x:Name="Foreground">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition MaxWidth="15"/>
                  <ColumnDefinition Width="0.1*"/>
                  <ColumnDefinition MaxWidth="15"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                  <RowDefinition/>
                  <RowDefinition/>
                </Grid.RowDefinitions>
                <Rectangle Fill="#FFFFAA00" x:Name="Indicator" Grid.ColumnSpan="3" Grid.RowSpan="2"/>
                <Rectangle Fill="#FFBF6D2D" x:Name="Animation" Grid.ColumnSpan="3" Grid.RowSpan="2">
                  <Rectangle.OpacityMask>
                    <MultiBinding>
                      <MultiBinding.Converter>
                        <Theme:ProgressBarHighlightConverter />
                      </MultiBinding.Converter>
                      <Binding Source="{StaticResource ProgressBarIndicatorAnimatedFill}"/>
                      <Binding Path="ActualWidth" ElementName="Background"/>
                      <Binding Path="ActualHeight" ElementName="Background"/>
                    </MultiBinding>
                  </Rectangle.OpacityMask>
                </Rectangle>
                <Rectangle Fill="{DynamicResource ProgressBarIndicatorDarkEdgeLeft}" RadiusX="1" RadiusY="1" Margin="1,1,0,1" x:Name="LeftDark" Grid.RowSpan="2"/>
                <Rectangle Fill="{DynamicResource ProgressBarIndicatorDarkEdgeRight}" RadiusX="1" RadiusY="1" Margin="0,1,1,1" x:Name="RightDark" Grid.Column="2" Grid.RowSpan="2"/>
                <Rectangle Fill="{DynamicResource ProgressBarIndicatorLightingEffectLeft}" x:Name="LeftLight" Grid.Column="0" Grid.Row="2"/>
                <Rectangle Fill="{DynamicResource ProgressBarIndicatorLightingEffect}" x:Name="CenterLight" Grid.Column="1" Grid.Row="2"/>
                <Rectangle Fill="{DynamicResource ProgressBarIndicatorLightingEffectRight}" x:Name="RightLight" Grid.Column="2" Grid.Row="2"/>
                <Border x:Name="Highlight1" Background="{DynamicResource ProgressBarIndicatorGlassyHighlight}" Grid.ColumnSpan="3" Grid.RowSpan="2"/>
                <Border x:Name="Highlight2" Background="{DynamicResource ProgressBarTopHighlight}" Grid.ColumnSpan="3" Grid.RowSpan="2"/>
              </Grid>
            </Decorator>
            <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="Orientation" Value="Vertical">
              <Setter Property="LayoutTransform" TargetName="Background">
                <Setter.Value>
                  <RotateTransform Angle="-90"/>
                </Setter.Value>
              </Setter>
              <Setter Property="LayoutTransform" TargetName="PART_Track">
                <Setter.Value>
                  <RotateTransform Angle="90"/>
                </Setter.Value>
              </Setter>
              <Setter Property="LayoutTransform" TargetName="PART_Indicator">
                <Setter.Value>
                  <RotateTransform Angle="90"/>
                </Setter.Value>
              </Setter>
              <Setter Property="LayoutTransform" TargetName="Foreground">
                <Setter.Value>
                  <RotateTransform Angle="-90"/>
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="IsIndeterminate" Value="true">
              <Setter Property="Visibility" TargetName="LeftDark" Value="Collapsed"/>
              <Setter Property="Visibility" TargetName="RightDark" Value="Collapsed"/>
              <Setter Property="Visibility" TargetName="LeftLight" Value="Collapsed"/>
              <Setter Property="Visibility" TargetName="CenterLight" Value="Collapsed"/>
              <Setter Property="Visibility" TargetName="RightLight" Value="Collapsed"/>
              <Setter Property="Visibility" TargetName="Indicator" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsIndeterminate" Value="false">
              <Setter Property="Fill" TargetName="Animation" Value="#80B5FFA9"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!--Dialog Text-->
  <Style x:Key="DialogText" TargetType="{x:Type TextBlock}">
    <Setter Property="TextWrapping" Value="Wrap" />
    <Setter Property="TextTrimming" Value="None" />
    <Setter Property="Foreground" Value="#FFFFFFFF" />
  </Style>

  <!--Dialog HyperLink-->
  <Style x:Key="{x:Type Hyperlink}" TargetType="{x:Type Hyperlink}">
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Foreground" Value="#FF808080" />
      </Trigger>
    </Style.Triggers>
    <Setter Property="FontFamily" Value="{DynamicResource IconFontFamily}" />
    <Setter Property="FontSize" Value="{DynamicResource IconFontSize}" />
    <Setter Property="FontWeight" Value="{DynamicResource IconFontWeight}" />
    <Setter Property="Foreground" Value="#3399FF" />
  </Style>

  <!--Radio Button-->
  <Style x:Key="{x:Type RadioButton}" TargetType="{x:Type RadioButton}">
    <Setter Property="Background" Value="{DynamicResource PopUpBrush}" />
    <Setter Property="BorderBrush" Value="{DynamicResource RecessedBrush}" />
    <Setter Property="Foreground" Value="{DynamicResource Text1Brush}" />
    <Setter Property="Padding" Value="4,0,0,0" />
    <Setter Property="MinHeight" Value="20" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RadioButton}">
          <Grid Background="Transparent">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Grid Width="12" Height="12" Margin="0,4,0,0" VerticalAlignment="Top">
              <Ellipse Name="Ellipse_Border" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" />
              <Ellipse Name="CheckMark" Fill="Black" Width="6" Height="6" HorizontalAlignment="Center" VerticalAlignment="Center" />
            </Grid>
            <ContentPresenter Grid.Column="1" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="true" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="false">
              <Setter TargetName="CheckMark" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
              <Setter Value="{DynamicResource Text1Brush}" TargetName="Ellipse_Border" Property="Stroke" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Fill" TargetName="CheckMark" Value="{DynamicResource RecessedBrush}" />
              <Setter Value="{DynamicResource DisabledTextBrush}" Property="Foreground" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!--CheckBox Style-->
  <Style x:Key="{x:Type CheckBox}" TargetType="{x:Type CheckBox}">
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="Foreground" Value="{DynamicResource Text1Brush}" />
    <Setter Property="Background" Value="{DynamicResource PopUpBrush}" />
    <Setter Property="BorderBrush" Value="{DynamicResource ToggleButtonDefaultBorderBrush}" />
    <Setter Property="FontFamily" Value="{DynamicResource MessageFontFamily}" />
    <Setter Property="FontSize" Value="{DynamicResource MessageFontSize}" />
    <Setter Property="FontWeight" Value="{DynamicResource MessageFontWeight}" />
    <Setter Property="Padding" Value="4,0,0,0" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="FocusVisualStyle" Value="{DynamicResource CheckBoxFocusVisualStyle}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type CheckBox}">
          <Grid Background="Transparent" SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Border Width="12" Height="12" VerticalAlignment="Center" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1">
              <Path Name="CheckMark" Fill="{DynamicResource Text1Brush}" Stretch="Fill" Margin="0,0,0,0" Data="{DynamicResource Checkmark}" Visibility="Collapsed" Width="8" Height="8" />
            </Border>
            <ContentPresenter Grid.Column="1" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="true" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
          </Grid>

          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
              <Setter Value="{DynamicResource ToggleButtonFocusedBorderBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
              <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Value="{DynamicResource DisabledTextBrush}" Property="Foreground" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!--Expander Toggle Button-->
  <ControlTemplate x:Key="ExpanderToggleButton" TargetType="CheckBox">
    <DockPanel LastChildFill="True" SnapsToDevicePixels="True">
      <Image Name="Arrow" DockPanel.Dock="Right" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="4" Height="8" Width="8" Source="{DynamicResource PaneExpanderIcon}" />
      <ContentPresenter Name="ContentHeader" Focusable="false" Margin="4,4,4,4" RecognizesAccessKey="true" />
    </DockPanel>
    <ControlTemplate.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsChecked" Value="True" />
          <Condition Property="FlowDirection" Value="RightToLeft" />
        </MultiTrigger.Conditions>
        <Setter TargetName="Arrow" Property="RenderTransform">
          <Setter.Value>
            <RotateTransform CenterX="4" CenterY="4" Angle="270" />
          </Setter.Value>
        </Setter>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsChecked" Value="False" />
          <Condition Property="FlowDirection" Value="RightToLeft" />
        </MultiTrigger.Conditions>
        <Setter TargetName="Arrow" Property="RenderTransform">
          <Setter.Value>
            <RotateTransform CenterX="4" CenterY="4" Angle="180" />
          </Setter.Value>
        </Setter>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsChecked" Value="True" />
          <Condition Property="FlowDirection" Value="LeftToRight" />
        </MultiTrigger.Conditions>
        <Setter TargetName="Arrow" Property="RenderTransform">
          <Setter.Value>
            <RotateTransform CenterX="4" CenterY="4" Angle="90" />
          </Setter.Value>
        </Setter>
      </MultiTrigger>
      <Trigger Property="IsMouseOver" Value="true">
        <Setter Value="{DynamicResource WhiteBrush}" Property="Foreground" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>


  <!--Expander-->
  <Style x:Key="{x:Type Expander}" TargetType="{x:Type Expander}">
    <Setter Property="Background" Value="{DynamicResource ButtonDefaultBrush}" />
    <Setter Property="Foreground" Value="{DynamicResource Text1Brush}" />
    <Setter Property="BorderBrush" Value="{DynamicResource PaletteBrush}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Expander}">
          <Grid SnapsToDevicePixels="True" Height="{TemplateBinding Height}">
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Name="ContentRow" Height="0" />
            </Grid.RowDefinitions>
            <Border Name="HeaderBorder" Grid.Row="0" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1,1,1,1" CornerRadius="4">
              <CheckBox Name="HeaderSite" Focusable="false" Margin="4,0,0,0" Background="{DynamicResource Text1Brush}" OverridesDefaultStyle="true" Template="{DynamicResource ExpanderToggleButton}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Content="{TemplateBinding Header}" IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
            </Border>
            <Border Name="Content" Grid.Row="1" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="0,0,4,4" BorderThickness="1,0,1,1">
              <ContentPresenter Name="ContentSite" Margin="{TemplateBinding Padding}" />
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsExpanded" Value="True">
              <Setter TargetName="ContentRow" Property="Height" Value="{Binding ElementName=Content,Path=Height}" />
              <Setter TargetName="HeaderBorder" Property="CornerRadius" Value="4,4,0,0" />
              <Setter TargetName="HeaderBorder" Property="BorderThickness" Value="1,1,1,0" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!--TabItem Base-->
  <Style x:Key="{x:Type TabItem}" TargetType="{x:Type TabItem}">
    <Setter Property="Background" Value="{DynamicResource RecessedBrush}" />
    <Setter Property="Foreground" Value="{DynamicResource Text1Brush}" />
    <Setter Property="BorderBrush" Value="{DynamicResource DarkBrush}" />
    <Setter Property="MinHeight" Value="20" />
    <Setter Property="FontFamily" Value="{DynamicResource MessageFontFamily}" />
    <Setter Property="FontSize" Value="{DynamicResource MessageFontSize}" />
    <Setter Property="FontWeight" Value="{DynamicResource MessageFontWeight}" />
    <Setter Property="SnapsToDevicePixels" Value="true" />
    <Setter Property="IsTabStop" Value="false" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TabItem}">
          <Border SnapsToDevicePixels="True" Name="Border" Margin="0,0,2,0" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0" CornerRadius="3,3,0,0" Height="{TemplateBinding Height}">
            <ContentPresenter Name="ContentSite" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="5,0,5,0" VerticalAlignment="Center" RecognizesAccessKey="true" ContentSource="Header" />
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="TabStripPlacement" Value="Bottom">
              <Setter TargetName="Border" Property="CornerRadius" Value="0,0,3,3" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsSelected" Value="true">
        <Setter Property="Canvas.ZIndex" Value="100" />
        <Setter Property="Background" Value="{DynamicResource TabSelectionBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource WhiteBrush}" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="true" />
          <Condition Property="IsSelected" Value="false" />
        </MultiTrigger.Conditions>
        <Setter Property="Background" Value="{DynamicResource ButtonOverBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource WhiteBrush}" />
      </MultiTrigger>
      <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Background" Value="{DynamicResource PaletteBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource DisabledTextBrush}" />
      </Trigger>
    </Style.Triggers>
  </Style>

  <!--Tab Control-->
  <Style x:Key="BaseTabControl" TargetType="{x:Type TabControl}">
    <Setter Property="ClipToBounds" Value="true" />
    <Setter Property="BorderBrush" Value="{x:Null}" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Background" Value="{DynamicResource ButtonDefaultBrush}" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="Focusable" Value="false" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TabControl}">
          <Grid Name="Grid1" KeyboardNavigation.TabNavigation="Local" SnapsToDevicePixels="True">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Name="ColumnDefinition0" />
              <ColumnDefinition Name="ColumnDefinition1" Width="0px" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition Name="RowDefinition0" Height="Auto" />
              <RowDefinition Name="RowDefinition1" Height="*" />
            </Grid.RowDefinitions>
            <TabPanel Name="HeaderPanel" Background="Transparent" KeyboardNavigation.TabIndex="1" Grid.Column="0" Grid.Row="0" IsItemsHost="true" />
            <Border Name="ContentPanel" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" KeyboardNavigation.TabNavigation="Local" KeyboardNavigation.DirectionalNavigation="Contained" KeyboardNavigation.TabIndex="2" Grid.Column="0" Grid.Row="1" CornerRadius="0,0,3,3">
              <ContentPresenter Name="ContentSite" Margin="{TemplateBinding Padding}" Content="{TemplateBinding SelectedContent}" ContentTemplate="{TemplateBinding SelectedContentTemplate}" ContentTemplateSelector="{TemplateBinding SelectedContentTemplateSelector}" />
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="TabStripPlacement" Value="Bottom">
              <Setter TargetName="HeaderPanel" Property="Grid.Row" Value="1" />
              <Setter TargetName="ContentPanel" Property="Grid.Row" Value="0" />
              <Setter TargetName="ContentPanel" Property="BorderThickness" Value="0,0,0,1" />
              <Setter TargetName="RowDefinition0" Property="Height" Value="*" />
              <Setter TargetName="RowDefinition1" Property="Height" Value="Auto" />
              <Setter TargetName="HeaderPanel" Property="Margin" Value="2,0,2,2" />
            </Trigger>
            <Trigger Property="TabStripPlacement" Value="Right">
              <Setter TargetName="HeaderPanel" Property="Grid.Column" Value="1" />
              <Setter TargetName="ContentPanel" Property="Grid.Row" Value="0" />
              <Setter TargetName="ContentPanel" Property="BorderThickness" Value="0,0,1,0" />
              <Setter TargetName="RowDefinition0" Property="Height" Value="*" />
              <Setter TargetName="RowDefinition1" Property="Height" Value="0" />
              <Setter TargetName="ColumnDefinition0" Property="Width" Value="*" />
              <Setter TargetName="ColumnDefinition1" Property="Width" Value="Auto" />
              <Setter TargetName="HeaderPanel" Property="Margin" Value="0,2,2,2" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!--TabControl Style-->
  <Style x:Key="{x:Type TabControl}" BasedOn="{StaticResource BaseTabControl}" TargetType="{x:Type TabControl}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TabControl}">
          <Grid Name="Grid1" KeyboardNavigation.TabNavigation="Local">
            <Grid.ColumnDefinitions>
              <ColumnDefinition />
              <ColumnDefinition Width="0px" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition Name="RowDefinition0" Height="Auto" />
              <RowDefinition Name="RowDefinition1" Height="*" />
            </Grid.RowDefinitions>
            <UniformGrid Name="HeaderPanel" Background="Transparent" KeyboardNavigation.TabIndex="1" Grid.Column="0" Grid.Row="0" IsItemsHost="true" Rows="1" Margin="0,0,-2,0" />
            <Border Name="ContentPanel" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" KeyboardNavigation.TabNavigation="Local" KeyboardNavigation.DirectionalNavigation="Contained" KeyboardNavigation.TabIndex="2" Grid.Column="0" Grid.Row="1" CornerRadius="0,0,3,3">
              <ContentPresenter Name="ContentSite" Margin="{TemplateBinding Padding}" Content="{TemplateBinding SelectedContent}" ContentTemplate="{TemplateBinding SelectedContentTemplate}" ContentTemplateSelector="{TemplateBinding SelectedContentTemplateSelector}" />
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="TabStripPlacement" Value="Bottom">
              <Setter TargetName="HeaderPanel" Property="Grid.Row" Value="1" />
              <Setter TargetName="ContentPanel" Property="Grid.Row" Value="0" />
              <Setter TargetName="ContentPanel" Property="BorderThickness" Value="0,0,0,1" />
              <Setter TargetName="RowDefinition0" Property="Height" Value="*" />
              <Setter TargetName="RowDefinition1" Property="Height" Value="Auto" />
              <Setter TargetName="HeaderPanel" Property="Margin" Value="2,0,2,2" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!--Auto Hidden Tab Control-->
  <Style x:Key="AutoHiddenTabControl" TargetType="{x:Type TabControl}" BasedOn="{StaticResource BaseTabControl}">
    <Style.Triggers>
      <Trigger Property="HasItems" Value="False">
        <Setter Property="Visibility" Value="Hidden" />
      </Trigger>
    </Style.Triggers>
  </Style>

  <!--StatusBar Separator-->
  <Style x:Key="{x:Static StatusBar.SeparatorStyleKey}" TargetType="{x:Type Separator}">
    <Setter Property="MinWidth" Value="1"/>
    <Setter Property="MinHeight" Value="1"/>
    <Setter Property="Margin" Value="2"/>
    <Setter Property="Focusable" Value="false" />
    <Setter Property="SnapsToDevicePixels" Value="true"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Separator}">
          <Border SnapsToDevicePixels="true" Background="{DynamicResource MenuTextBrush}" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!--Menu Separator-->
  <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="{x:Type Separator}">
    <Setter Property="Height" Value="1" />
    <Setter Property="Margin" Value="0,2,0,2" />
    <Setter Property="Focusable" Value="false" />
    <Setter Property="SnapsToDevicePixels" Value="true"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Separator}">
          <Border SnapsToDevicePixels="true" Background="{DynamicResource MenuTextBrush}" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!--ContextMenu-->
  <Style x:Key="{x:Type ContextMenu}" TargetType="{x:Type ContextMenu}">
    <Setter Property="Background" Value="{DynamicResource MenuBackgroundBrush}" />
    <Setter Property="SnapsToDevicePixels" Value="true" />
    <Setter Property="FontFamily" Value="{DynamicResource MessageFontFamily}" />
    <Setter Property="FontSize" Value="{DynamicResource MessageFontSize}" />
    <Setter Property="FontWeight" Value="{DynamicResource MessageFontWeight}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ContextMenu}">
          <Border Height="Auto" Background="{DynamicResource MenuBackgroundBrush}" BorderThickness="1" BorderBrush="{DynamicResource MenuTextBrush}">
            <StackPanel Background="{TemplateBinding Background}" IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" Margin="2"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!--Menu-->
  <Style x:Key="{x:Type Menu}" TargetType="{x:Type Menu}">
    <Setter Property="Background" Value="{DynamicResource MenuBackgroundBrush}" />
    <Setter Property="SnapsToDevicePixels" Value="true" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Menu}">
          <StackPanel Background="{TemplateBinding Background}" IsItemsHost="true" ClipToBounds="true" Orientation="Horizontal" />
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Value="{DynamicResource MenuBackgroundBrush}" Property="Background" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!--Menu Items-->
  <ControlTemplate TargetType="{x:Type MenuItem}" x:Key="SubmenuHeaderStyle">
    <Border Name="Bd" SnapsToDevicePixels="true" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
      <Grid Name="Grid">
        <Grid.ColumnDefinitions>
          <ColumnDefinition MinWidth="17" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup" />
          <ColumnDefinition Width="*" />
          <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup" />
          <ColumnDefinition Width="14" />
        </Grid.ColumnDefinitions>
        <Path x:Name="GlyphPanel" Visibility="Hidden" Fill="{TemplateBinding Foreground}" Margin="4,0,6,0" VerticalAlignment="Center" Data="{DynamicResource Checkmark}" />
        <ContentPresenter x:Name="ContentPresenter" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="{TemplateBinding Padding}" Grid.Column="1" Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" RecognizesAccessKey="true" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" ContentSource="Header" />
        <Path x:Name="Path" Fill="{TemplateBinding Foreground}" Margin="4,0,6,0" VerticalAlignment="Center" Grid.Column="3" DockPanel.Dock="Right" Data="{DynamicResource RightArrow}" />
        <Controls:FXPopup x:Name="PART_Popup" Placement="Right" Focusable="false" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimation}}" VerticalOffset="-3" IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent , AncestorType={x:Null}}}">
          <Border x:Name="SubMenuBorder" BorderThickness="1,1,1,1" BorderBrush="{DynamicResource MenuTextBrush}" Background="{DynamicResource MenuBackgroundBrush}">
            <ScrollViewer x:Name="ScrollViewer" CanContentScroll="true" Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
              <ItemsPresenter x:Name="ItemsPresenter" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="2,2,2,2" KeyboardNavigation.DirectionalNavigation="Cycle" KeyboardNavigation.TabNavigation="Cycle" Grid.IsSharedSizeScope="true" />
            </ScrollViewer>
          </Border>
        </Controls:FXPopup>
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="IsSuspendingPopupAnimation" Value="true">
        <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
      </Trigger>
      <Trigger Property="IsChecked" Value="true">
        <Setter TargetName="GlyphPanel" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="IsHighlighted" Value="true">
        <Setter Value="{DynamicResource ButtonOverBrush}" Property="Background" />
        <Setter Value="{DynamicResource BackgroundBrush}" Property="Foreground" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="false">
        <Setter Value="{DynamicResource LayerChild1Brush}" Property="Foreground" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <ControlTemplate TargetType="{x:Type MenuItem}" x:Key="MenuItemTopLevelItemStyle">
    <Border Name="Bd" SnapsToDevicePixels="true" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
      <DockPanel Name="DockPanel">
        <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="4,0,6,0" x:Name="Icon" VerticalAlignment="Center" ContentSource="Icon"/>
        <Path Name="GlyphPanel" Visibility="Collapsed" Fill="{TemplateBinding Foreground}" Margin="4,0,6,0" VerticalAlignment="Center" Data="{DynamicResource Checkmark}" FlowDirection="LeftToRight" />
        <ContentPresenter Name="ContentPresenter" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="{TemplateBinding Padding}" Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" RecognizesAccessKey="true" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" ContentSource="Header" />
      </DockPanel>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="Icon" Value="{x:Null}">
        <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
      </Trigger>
      <Trigger Property="IsChecked" Value="true">
        <Setter TargetName="GlyphPanel" Property="Visibility" Value="Visible" />
        <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
      </Trigger>
      <Trigger Property="IsHighlighted" Value="true">
        <Setter Value="{DynamicResource ButtonOverBrush}" Property="Background" />
        <Setter Value="{DynamicResource BackgroundBrush}" Property="Foreground" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="false">
        <Setter Value="{DynamicResource LayerChild1Brush}" Property="Foreground" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <ControlTemplate TargetType="{x:Type MenuItem}" x:Key="MenuItemTopLevelHeaderStyle">
    <Border x:Name="Bd" SnapsToDevicePixels="true" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
      <DockPanel x:Name="DockPanel">
        <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="4,0,6,0" x:Name="Icon" VerticalAlignment="Center" ContentSource="Icon"/>
        <Path x:Name="GlyphPanel" Visibility="Collapsed" Fill="{TemplateBinding Foreground}" Margin="4,0,6,0" VerticalAlignment="Center" Data="{DynamicResource Checkmark}" FlowDirection="LeftToRight" />
        <ContentPresenter x:Name="ContentPresenter" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="{TemplateBinding Padding}" Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" RecognizesAccessKey="true" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" ContentSource="Header" />
        <Controls:FXPopup x:Name="PART_Popup" Placement="Bottom" Focusable="false" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimation}}" IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent , AncestorType={x:Null}}}">
          <Border x:Name="SubMenuBorder" Background="{DynamicResource MenuBackgroundBrush}" BorderThickness="1,1,1,1" BorderBrush="{DynamicResource MenuTextBrush}">
            <ScrollViewer x:Name="ScrollViewer" CanContentScroll="true" Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">
              <ItemsPresenter x:Name="ItemsPresenter" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="2,2,2,2" KeyboardNavigation.DirectionalNavigation="Cycle" KeyboardNavigation.TabNavigation="Cycle" Grid.IsSharedSizeScope="true" />
            </ScrollViewer>
          </Border>
        </Controls:FXPopup>
      </DockPanel>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="IsSuspendingPopupAnimation" Value="true">
        <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
      </Trigger>
      <Trigger Property="Icon" Value="{x:Null}">
        <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
      </Trigger>
      <Trigger Property="IsChecked" Value="true">
        <Setter TargetName="GlyphPanel" Property="Visibility" Value="Visible" />
        <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
      </Trigger>
      <Trigger Property="IsHighlighted" Value="true">
        <Setter Value="{DynamicResource ButtonOverBrush}" Property="Background" />
        <Setter Value="{DynamicResource BackgroundBrush}" Property="Foreground" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="false">
        <Setter Value="{DynamicResource LayerChild1Brush}" Property="Foreground" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <Style x:Key="{x:Type MenuItem}" TargetType="{x:Type MenuItem}">
    <Setter Property="HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource FindAncestor , AncestorLevel=1, AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource FindAncestor , AncestorLevel=1, AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="Background" Value="{DynamicResource MenuBackgroundBrush}" />
    <Setter Property="Foreground" Value="{DynamicResource MenuTextBrush}" />
    <Setter Property="FontFamily" Value="{DynamicResource MessageFontFamily}" />
    <Setter Property="FontSize" Value="{DynamicResource MessageFontSize}" />
    <Setter Property="FontWeight" Value="{DynamicResource MessageFontWeight}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type MenuItem}">
          <Border x:Name="Bd" SnapsToDevicePixels="true" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
            <Grid x:Name="Grid">
              <Grid.ColumnDefinitions>
                <ColumnDefinition MinWidth="17" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup" />
                <ColumnDefinition Width="14" />
              </Grid.ColumnDefinitions>
              <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="4,0,6,0" x:Name="Icon" VerticalAlignment="Center" ContentSource="Icon"/>
              <Path x:Name="GlyphPanel" Visibility="Hidden" Fill="{TemplateBinding Foreground}" Margin="4,0,6,0" VerticalAlignment="Center" Data="{DynamicResource Checkmark}" FlowDirection="LeftToRight" />
              <ContentPresenter x:Name="ContentPresenter" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="{TemplateBinding Padding}" Grid.Column="1" Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" RecognizesAccessKey="true" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" ContentSource="Header" />
              <TextBlock x:Name="InputGestureText" Margin="5,2,0,2" Grid.Column="2" DockPanel.Dock="Right" Text="{TemplateBinding InputGestureText}" />
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
              <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
              <Setter TargetName="GlyphPanel" Property="Visibility" Value="Visible" />
              <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
              <Setter Value="{DynamicResource ButtonOverBrush}" Property="Background" />
              <Setter Value="{DynamicResource BackgroundBrush}" Property="Foreground" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Value="{DynamicResource LayerChild1Brush}" Property="Foreground" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="Role" Value="TopLevelHeader">
        <Setter Property="Margin" Value="0,1,0,1" />
        <Setter Property="Padding" Value="6,3,6,3" />
        <Setter Property="Template" Value="{DynamicResource MenuItemTopLevelHeaderStyle}" />
      </Trigger>
      <Trigger Property="Role" Value="TopLevelItem">
        <Setter Property="Margin" Value="0,1,0,1" />
        <Setter Property="Padding" Value="6,3,6,3" />
        <Setter Property="Template" Value="{DynamicResource MenuItemTopLevelItemStyle}" />
      </Trigger>
      <Trigger Property="Role" Value="SubmenuHeader">
        <Setter Property="DockPanel.Dock" Value="Top" />
        <Setter Property="Padding" Value="0,2,0,2" />
        <Setter Property="Template" Value="{DynamicResource SubmenuHeaderStyle}" />
      </Trigger>
      <Trigger Property="Role" Value="SubmenuItem">
        <Setter Property="DockPanel.Dock" Value="Top" />
        <Setter Property="Padding" Value="0,2,0,2" />
      </Trigger>
    </Style.Triggers>
  </Style>

  <!--StatusBar-->
  <Style x:Key="{x:Type StatusBar}" TargetType="{x:Type StatusBar}">
    <Setter Property="Background" Value="{DynamicResource RecessedBrush}" />
    <Setter Property="Foreground" Value="{DynamicResource Text1Brush}" />
  </Style>

  <!--ToolTip-->
  <Style x:Key="{x:Type ToolTip}" TargetType="{x:Type ToolTip}">
    <Setter Property="Foreground" Value="{DynamicResource Text1Brush}" />
    <Setter Property="FontFamily" Value="{DynamicResource MessageFontFamily}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToolTip}">
          <Border BorderBrush="{DynamicResource Text1Brush}" x:Name="Bd" BorderThickness="1" Background="{DynamicResource PopUpBrush}" SnapsToDevicePixels="True" >
            <ContentPresenter Margin="4,2,4,2" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!--Dialog Container-->
  <Style x:Key="DialogRootContainer" TargetType="{x:Type Border}">
    <Style.Resources>
      <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource BaseTextBox}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource ComboBoxFocusVisualStyle}" />
      </Style>

      <Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource ComboBoxFocusVisualStyle}" />
      </Style>
    </Style.Resources>
    <Setter Property="Background" Value="{DynamicResource DialogBackgroundBrush}" />
    <Setter Property="Padding" Value="{DynamicResource LargeMargin}" />
    <Setter Property="BorderBrush" Value="{DynamicResource Text1Brush}" />
    <Setter Property="SnapsToDevicePixels" Value="true" />
  </Style>

</ResourceDictionary>